[16/12/2015 - 10:19:41] (10.0.2.2|)  => hello
[16/12/2015 - 10:19:41] (10.0.2.2|)  => 
[16/12/2015 - 10:19:42] (10.0.2.2|)  => hello
[16/12/2015 - 10:20:2] (10.0.2.2|)  => timeout
[16/12/2015 - 10:20:2] (10.0.2.2|)  => hello
[16/12/2015 - 10:20:22] (10.0.2.2|)  => timeout
[16/12/2015 - 10:20:22] (10.0.2.2|)  => hello
[16/12/2015 - 10:20:42] (10.0.2.2|)  => timeout
[16/12/2015 - 10:20:42] (10.0.2.2|)  => hello
[16/12/2015 - 10:21:2] (10.0.2.2|)  => timeout
[16/12/2015 - 10:21:57] (10.0.2.2|)  => hello
[16/12/2015 - 10:21:57] (10.0.2.2|)  => 
[16/12/2015 - 10:21:57] (10.0.2.2|)  => hello
[16/12/2015 - 10:21:57] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 10:21:57] (10.0.2.2|)  => hello
[16/12/2015 - 10:21:57] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 10:21:57] (10.0.2.2|)  => hello
[16/12/2015 - 10:22:8] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 10:22:8] (10.0.2.2|)  => hello
[16/12/2015 - 10:22:8] (10.0.2.2|)  => cpm/public/vendor/reveal.js-3.2.0/index.html
[16/12/2015 - 10:22:8] (10.0.2.2|)  => hello
[16/12/2015 - 10:22:8] (10.0.2.2|)  => 
[16/12/2015 - 10:25:48] (10.0.2.2|)  => hello
[16/12/2015 - 10:25:48] (10.0.2.2|)  => 651bf344-a639-427a-8a6d-2a79bc2d067d
[16/12/2015 - 10:25:48] (10.0.2.2|)  => hello
[16/12/2015 - 10:25:49] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:25:48.804","def":"/vagrant/modules/examples/modules/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meanging_of_life.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-651bf344-a639-427a-8a6d-2a79bc2d067d"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meanging_of_life.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-651bf344-a639-427a-8a6d-2a79bc2d067d"}},"ruid":"651bf344-a639-427a-8a6d-2a79bc2d067d","parentProcess":"None","env":"","processport":"50357","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-parser","parentport":"62089","completeddate":"","status":"Running"}
[16/12/2015 - 10:25:51] (10.0.2.2|)  => hello
[16/12/2015 - 10:25:51] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:25:48.804","def":"/vagrant/modules/examples/modules/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meanging_of_life.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-651bf344-a639-427a-8a6d-2a79bc2d067d"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meanging_of_life.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-651bf344-a639-427a-8a6d-2a79bc2d067d"}},"ruid":"651bf344-a639-427a-8a6d-2a79bc2d067d","parentProcess":"None","env":"","processport":"50357","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-parser","parentport":"62089","completeddate":"","status":"Running"}
[16/12/2015 - 10:26:7] (10.0.2.2|)  => hello
[16/12/2015 - 10:26:7] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:25:48.804","def":"/vagrant/modules/examples/modules/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meanging_of_life.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-651bf344-a639-427a-8a6d-2a79bc2d067d"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meanging_of_life.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-651bf344-a639-427a-8a6d-2a79bc2d067d"}},"ruid":"651bf344-a639-427a-8a6d-2a79bc2d067d","parentProcess":"None","env":"","processport":"50357","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-parser","parentport":"62089","completeddate":"","status":"Running"}
[16/12/2015 - 10:26:26] (10.0.2.2|)  => hello
[16/12/2015 - 10:26:26] (10.0.2.2|)  => 501e7b76-5e8b-4973-924a-77ac3134a566
[16/12/2015 - 10:26:26] (10.0.2.2|)  => hello
[16/12/2015 - 10:26:26] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:26:26.320","def":"/vagrant/modules/examples/modules/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566"}},"ruid":"501e7b76-5e8b-4973-924a-77ac3134a566","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-parser"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566/"},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-parser"}},"processport":"16157","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-parser","parentport":"34655","completeddate":"","status":"Running"}
[16/12/2015 - 10:26:32] (10.0.2.2|)  => hello
[16/12/2015 - 10:26:32] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:26:26.320","def":"/vagrant/modules/examples/modules/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566"}},"ruid":"501e7b76-5e8b-4973-924a-77ac3134a566","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-parser"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566/"},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-parser"}},"processport":"16157","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-parser","parentport":"34655","completeddate":"","status":"Running"}
[16/12/2015 - 10:26:39] (10.0.2.2|)  => hello
[16/12/2015 - 10:26:39] (10.0.2.2|)  => Error :mapping values are not allowed here
 in 'string', line 1, column 196:
     ... sm.txt Parsing [sent. 1 len. 42]: Humanism is a philosophical an ... 
                                         ^

[16/12/2015 - 10:26:41] (10.0.2.2|)  => hello
[16/12/2015 - 10:26:41] (10.0.2.2|)  => Error :mapping values are not allowed here
 in 'string', line 1, column 196:
     ... sm.txt Parsing [sent. 1 len. 42]: Humanism is a philosophical an ... 
                                         ^

[16/12/2015 - 10:26:48] (10.0.2.2|)  => hello
[16/12/2015 - 10:26:48] (10.0.2.2|)  => 
[16/12/2015 - 10:26:48] (10.0.2.2|)  => hello
[16/12/2015 - 10:26:48] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 10:26:48] (10.0.2.2|)  => hello
[16/12/2015 - 10:26:59] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 10:26:59] (10.0.2.2|)  => hello
[16/12/2015 - 10:26:59] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 10:26:59] (10.0.2.2|)  => hello
[16/12/2015 - 10:26:59] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566

[16/12/2015 - 10:27:2] (10.0.2.2|)  => hello
[16/12/2015 - 10:27:2] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:25:48.804","def":"/vagrant/modules/examples/modules/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meanging_of_life.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-651bf344-a639-427a-8a6d-2a79bc2d067d"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meanging_of_life.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-651bf344-a639-427a-8a6d-2a79bc2d067d"}},"ruid":"651bf344-a639-427a-8a6d-2a79bc2d067d","parentProcess":"None","env":"","processport":"50357","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-parser","parentport":"62089","completeddate":"","status":"Running"}
[16/12/2015 - 10:27:3] (10.0.2.2|)  => hello
[16/12/2015 - 10:27:3] (10.0.2.2|)  => Error :mapping values are not allowed here
 in 'string', line 1, column 196:
     ... sm.txt Parsing [sent. 1 len. 42]: Humanism is a philosophical an ... 
                                         ^

[16/12/2015 - 10:27:18] (10.0.2.2|)  => hello
[16/12/2015 - 10:27:18] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d

[16/12/2015 - 10:27:24] (10.0.2.2|)  => hello
[16/12/2015 - 10:27:24] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:25:48.804","def":"/vagrant/modules/examples/modules/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meanging_of_life.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-651bf344-a639-427a-8a6d-2a79bc2d067d"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meanging_of_life.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-651bf344-a639-427a-8a6d-2a79bc2d067d"}},"ruid":"651bf344-a639-427a-8a6d-2a79bc2d067d","parentProcess":"None","env":"","processport":"50357","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-parser","parentport":"62089","completeddate":"","status":"Running"}
[16/12/2015 - 10:29:44] (10.0.2.2|)  => hello
[16/12/2015 - 10:29:44] (10.0.2.2|)  => Error :mapping values are not allowed here
 in 'string', line 1, column 196:
     ... sm.txt Parsing [sent. 1 len. 42]: Humanism is a philosophical an ... 
                                         ^

[16/12/2015 - 10:31:18] (10.0.2.2|)  => hello
[16/12/2015 - 10:31:18] (10.0.2.2|)  => Error :mapping values are not allowed here
 in 'string', line 1, column 1124:
     ... en. 3] -LSB- 2 -RSB- Parsed file: /vagrant/data/corpus//testcorp ... 
                                         ^

[16/12/2015 - 10:31:23] (10.0.2.2|)  => hello
[16/12/2015 - 10:31:23] (10.0.2.2|)  => Error :mapping values are not allowed here
 in 'string', line 1, column 1124:
     ... en. 3] -LSB- 2 -RSB- Parsed file: /vagrant/data/corpus//testcorp ... 
                                         ^

[16/12/2015 - 10:32:12] (10.0.2.2|)  => hello
[16/12/2015 - 10:32:12] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:26:26.320","def":"/vagrant/modules/examples/modules/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566"},"OUT":{"type":"FILE","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566//humanism.xml"}},"ruid":"501e7b76-5e8b-4973-924a-77ac3134a566","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":""},"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-parser"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_CMD.STDERR":{"type":"VAL","value":"Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [1.7 sec]. Parsing file /vagrant/data/corpus//testcorpus/humanism.txt Parsing [sent. 1 len. 42] Humanism is a philosophical and ethical stance that emphasizes the value and agency of human beings , individually and collectively , and generally prefers critical thinking and evidence -LRB- rationalism , empiricism -RRB- over established doctrine or faith -LRB- fideism -RRB- . Parsing [sent. 2 len. 21] The meaning of the term humanism has fluctuated , according to the successive intellectual movements which have identified with it . Parsing [sent. 3 len. 22] -LSB- 1 -RSB- Generally , however , humanism refers to a perspective that affirms some notion of human freedom and progress . Parsing [sent. 4 len. 44] In modern times , humanist movements are typically aligned with secularism , and today `` Humanism '' typically refers to a non-theistic life stance centred on human agency , and looking to science instead of religious dogma in order to understand the world . Parsing [sent. 5 len. 3] -LSB- 2 -RSB- Parsed file /vagrant/data/corpus//testcorpus/humanism.txt [5 sentences]. Parsed 132 words in 5 sentences (28.90 wds/sec; 1.09 sents/sec)."},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566/"},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-parser"}},"processport":"9309","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-parser","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[16/12/2015 - 10:32:36] (10.0.2.2|)  => hello
[16/12/2015 - 10:32:36] (10.0.2.2|)  => d0ffe9a4-1476-499b-9e54-e3dccbf2cad4
[16/12/2015 - 10:32:36] (10.0.2.2|)  => hello
[16/12/2015 - 10:32:36] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:32:36.458","def":"/vagrant/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"}},"ruid":"d0ffe9a4-1476-499b-9e54-e3dccbf2cad4","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4/"},"CORPUS":{"type":"DIR","value":"/vagrant/data/corpus//origtweets_light"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"37044","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"39823","completeddate":"","status":"Running"}
[16/12/2015 - 10:32:55] (10.0.2.2|)  => hello
[16/12/2015 - 10:32:55] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:32:36.458","def":"/vagrant/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"}},"ruid":"d0ffe9a4-1476-499b-9e54-e3dccbf2cad4","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4/"},"CORPUS":{"type":"DIR","value":"/vagrant/data/corpus//origtweets_light"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"37044","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"39823","completeddate":"","status":"Running"}
[16/12/2015 - 10:33:10] (10.0.2.2|)  => hello
[16/12/2015 - 10:33:10] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:32:36.458","def":"/vagrant/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"}},"ruid":"d0ffe9a4-1476-499b-9e54-e3dccbf2cad4","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4/"},"CORPUS":{"type":"DIR","value":"/vagrant/data/corpus//origtweets_light"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"37044","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"39823","completeddate":"","status":"Running"}
[16/12/2015 - 10:33:12] (10.0.2.2|)  => hello
[16/12/2015 - 10:33:12] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:32:36.458","def":"/vagrant/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"}},"ruid":"d0ffe9a4-1476-499b-9e54-e3dccbf2cad4","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4/"},"CORPUS":{"type":"DIR","value":"/vagrant/data/corpus//origtweets_light"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"37044","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"39823","completeddate":"","status":"Running"}
[16/12/2015 - 10:33:13] (10.0.2.2|)  => hello
[16/12/2015 - 10:33:13] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:32:36.458","def":"/vagrant/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"}},"ruid":"d0ffe9a4-1476-499b-9e54-e3dccbf2cad4","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4/"},"CORPUS":{"type":"DIR","value":"/vagrant/data/corpus//origtweets_light"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"37044","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"39823","completeddate":"","status":"Running"}
[16/12/2015 - 10:33:22] (10.0.2.2|)  => hello
[16/12/2015 - 10:33:22] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:32:36.458","def":"/vagrant/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"},"VOID":{"type":"FILE*","value":["Error reading val value (should be a string)","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.4/stanford-parser/489056320092643328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.14/stanford-parser/489738611739619328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.13/stanford-parser/489706911927779328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.9/stanford-parser/489377154770403328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.6/stanford-parser/489316372002787328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.1/stanford-parser/488778133295075328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.3/stanford-parser/488984223458787328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.11/stanford-parser/489447870429667328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.15/stanford-parser/489869581918691328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.2/stanford-parser/488963679669731328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.7/stanford-parser/489335673758179328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.5/stanford-parser/489101415894499328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.0/stanford-parser/487838782453219328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.10/stanford-parser/489416444191715328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.17/stanford-parser/490051479555043328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.12/stanford-parser/489681750281699328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.8/stanford-parser/489363645026275328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.16/stanford-parser/490012805358051328.xml"]}},"ruid":"d0ffe9a4-1476-499b-9e54-e3dccbf2cad4","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.4/stanford-parser/489056320092643328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.14/stanford-parser/489738611739619328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.13/stanford-parser/489706911927779328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.9/stanford-parser/489377154770403328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.6/stanford-parser/489316372002787328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.1/stanford-parser/488778133295075328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.3/stanford-parser/488984223458787328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.11/stanford-parser/489447870429667328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.15/stanford-parser/489869581918691328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.2/stanford-parser/488963679669731328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.7/stanford-parser/489335673758179328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.5/stanford-parser/489101415894499328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.0/stanford-parser/487838782453219328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.10/stanford-parser/489416444191715328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.17/stanford-parser/490051479555043328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.12/stanford-parser/489681750281699328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.8/stanford-parser/489363645026275328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.16/stanford-parser/490012805358051328.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.11/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.11/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.11/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.3/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.3/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.3/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.6/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.6/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.6/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.2/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.2/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.2/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.0/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.0/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.0/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.10/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.10/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.10/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.12/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.12/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.12/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.8/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.8/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.8/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.9/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.9/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.9/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.14/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.14/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.14/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.17/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.17/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.17/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.1/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.1/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.1/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.16/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.16/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.16/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.5/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.5/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.5/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.15/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.15/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.15/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.7/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.7/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.7/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.4/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.4/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.4/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.13/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.13/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.13/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},"CORPUS":{"type":"DIR","value":"/vagrant/data/corpus//origtweets_light"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"9668","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[16/12/2015 - 10:33:47] (10.0.2.2|)  => hello
[16/12/2015 - 10:33:47] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 10:33:47] (10.0.2.2|)  => hello
[16/12/2015 - 10:33:47] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 10:35:3] (10.0.2.2|)  => hello
[16/12/2015 - 10:35:3] (10.0.2.2|)  => 
[16/12/2015 - 10:35:3] (10.0.2.2|)  => hello
[16/12/2015 - 10:35:3] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 10:35:3] (10.0.2.2|)  => hello
[16/12/2015 - 10:35:3] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 10:35:4] (10.0.2.2|)  => hello
[16/12/2015 - 10:35:4] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 10:35:4] (10.0.2.2|)  => hello
[16/12/2015 - 10:35:4] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 10:35:4] (10.0.2.2|)  => hello
[16/12/2015 - 10:35:14] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 10:35:14] (10.0.2.2|)  => hello
[16/12/2015 - 10:35:14] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4

[16/12/2015 - 10:35:59] (10.0.2.2|)  => hello
[16/12/2015 - 10:35:59] (10.0.2.2|)  => 
[16/12/2015 - 10:36:0] (10.0.2.2|)  => hello
[16/12/2015 - 10:36:0] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 10:36:0] (10.0.2.2|)  => hello
[16/12/2015 - 10:36:0] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 10:36:0] (10.0.2.2|)  => hello
[16/12/2015 - 10:36:0] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 10:36:0] (10.0.2.2|)  => hello
[16/12/2015 - 10:36:0] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 10:36:0] (10.0.2.2|)  => hello
[16/12/2015 - 10:36:9] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 10:36:9] (10.0.2.2|)  => hello
[16/12/2015 - 10:36:9] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4

[16/12/2015 - 10:36:21] (10.0.2.2|)  => hello
[16/12/2015 - 10:36:21] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:32:36.458","def":"/vagrant/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light"},"VOID":{"type":"FILE*","value":["Error reading val value (should be a string)","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.4/stanford-parser/489056320092643328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.14/stanford-parser/489738611739619328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.13/stanford-parser/489706911927779328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.9/stanford-parser/489377154770403328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.6/stanford-parser/489316372002787328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.1/stanford-parser/488778133295075328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.3/stanford-parser/488984223458787328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.11/stanford-parser/489447870429667328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.15/stanford-parser/489869581918691328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.2/stanford-parser/488963679669731328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.7/stanford-parser/489335673758179328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.5/stanford-parser/489101415894499328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.0/stanford-parser/487838782453219328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.10/stanford-parser/489416444191715328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.17/stanford-parser/490051479555043328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.12/stanford-parser/489681750281699328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.8/stanford-parser/489363645026275328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.16/stanford-parser/490012805358051328.xml"]}},"ruid":"d0ffe9a4-1476-499b-9e54-e3dccbf2cad4","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.4/stanford-parser/489056320092643328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.14/stanford-parser/489738611739619328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.13/stanford-parser/489706911927779328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.9/stanford-parser/489377154770403328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.6/stanford-parser/489316372002787328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.1/stanford-parser/488778133295075328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.3/stanford-parser/488984223458787328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.11/stanford-parser/489447870429667328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.15/stanford-parser/489869581918691328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.2/stanford-parser/488963679669731328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.7/stanford-parser/489335673758179328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.5/stanford-parser/489101415894499328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.0/stanford-parser/487838782453219328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.10/stanford-parser/489416444191715328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.17/stanford-parser/490051479555043328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.12/stanford-parser/489681750281699328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.8/stanford-parser/489363645026275328.xml","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.16/stanford-parser/490012805358051328.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.11/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.11/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.11/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.3/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.3/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.3/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.6/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.6/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.6/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.2/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.2/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.2/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.0/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.0/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.0/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.10/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.10/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.10/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.12/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.12/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.12/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.8/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.8/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.8/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.9/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.9/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.9/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.14/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.14/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.14/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.17/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.17/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.17/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.1/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.1/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.1/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.16/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.16/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.16/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.5/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.5/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.5/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.15/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.15/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.15/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.7/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.7/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.7/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.4/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.4/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.4/foo/foo3"],["/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.13/foo/foo1","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.13/foo/foo2","/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4//_MAP/_MAP.13/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-d0ffe9a4-1476-499b-9e54-e3dccbf2cad4/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},"CORPUS":{"type":"DIR","value":"/vagrant/data/corpus//origtweets_light"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"48676","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[16/12/2015 - 10:36:23] (10.0.2.2|)  => hello
[16/12/2015 - 10:36:23] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:25:48.804","def":"/vagrant/modules/examples/modules/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meanging_of_life.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-651bf344-a639-427a-8a6d-2a79bc2d067d"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meanging_of_life.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-651bf344-a639-427a-8a6d-2a79bc2d067d"}},"ruid":"651bf344-a639-427a-8a6d-2a79bc2d067d","parentProcess":"None","env":"","processport":"50357","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-parser","parentport":"62089","completeddate":"","status":"Running"}
[16/12/2015 - 10:36:25] (10.0.2.2|)  => hello
[16/12/2015 - 10:36:25] (10.0.2.2|)  => {"creationdate":"2015-12-16T10:26:26.320","def":"/vagrant/modules/examples/modules/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566"},"OUT":{"type":"FILE","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566//humanism.xml"}},"ruid":"501e7b76-5e8b-4973-924a-77ac3134a566","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":""},"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-parser"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/parsing"},"_CMD.STDERR":{"type":"VAL","value":"Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [1.7 sec]. Parsing file /vagrant/data/corpus//testcorpus/humanism.txt Parsing [sent. 1 len. 42] Humanism is a philosophical and ethical stance that emphasizes the value and agency of human beings , individually and collectively , and generally prefers critical thinking and evidence -LRB- rationalism , empiricism -RRB- over established doctrine or faith -LRB- fideism -RRB- . Parsing [sent. 2 len. 21] The meaning of the term humanism has fluctuated , according to the successive intellectual movements which have identified with it . Parsing [sent. 3 len. 22] -LSB- 1 -RSB- Generally , however , humanism refers to a perspective that affirms some notion of human freedom and progress . Parsing [sent. 4 len. 44] In modern times , humanist movements are typically aligned with secularism , and today `` Humanism '' typically refers to a non-theistic life stance centred on human agency , and looking to science instead of religious dogma in order to understand the world . Parsing [sent. 5 len. 3] -LSB- 2 -RSB- Parsed file /vagrant/data/corpus//testcorpus/humanism.txt [5 sentences]. Parsed 132 words in 5 sentences (28.90 wds/sec; 1.09 sents/sec)."},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-501e7b76-5e8b-4973-924a-77ac3134a566/"},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-parser"}},"processport":"3113","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-parser","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[16/12/2015 - 10:41:20] (10.0.2.2|)  => hello
[16/12/2015 - 10:41:20] (10.0.2.2|)  => 
[16/12/2015 - 10:41:20] (10.0.2.2|)  => hello
[16/12/2015 - 10:41:20] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 10:41:20] (10.0.2.2|)  => hello
[16/12/2015 - 10:41:20] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 10:41:20] (10.0.2.2|)  => hello
[16/12/2015 - 10:41:20] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 10:41:20] (10.0.2.2|)  => hello
[16/12/2015 - 10:41:20] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 10:41:20] (10.0.2.2|)  => hello
[16/12/2015 - 10:41:20] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4

[16/12/2015 - 10:41:20] (10.0.2.2|)  => hello
[16/12/2015 - 10:41:30] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 10:42:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:42:56] (10.0.2.2|)  => 
[16/12/2015 - 10:42:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:42:56] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 10:42:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:42:56] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 10:42:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:42:56] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 10:42:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:42:56] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 10:42:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:7] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 10:43:7] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:7] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4

[16/12/2015 - 10:43:23] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:23] (10.0.2.2|)  => 
[16/12/2015 - 10:43:24] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:24] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 10:43:24] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:24] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 10:43:24] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:24] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 10:43:24] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:24] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 10:43:24] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:31] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 10:43:31] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:31] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4

[16/12/2015 - 10:43:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:56] (10.0.2.2|)  => 
[16/12/2015 - 10:43:57] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:57] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 10:43:57] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:57] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 10:43:57] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:57] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 10:43:57] (10.0.2.2|)  => hello
[16/12/2015 - 10:43:57] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 10:43:57] (10.0.2.2|)  => hello
[16/12/2015 - 10:44:7] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 10:44:7] (10.0.2.2|)  => hello
[16/12/2015 - 10:44:7] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4

[16/12/2015 - 10:46:6] (10.0.2.2|)  => hello
[16/12/2015 - 10:46:6] (10.0.2.2|)  => 
[16/12/2015 - 10:46:6] (10.0.2.2|)  => hello
[16/12/2015 - 10:46:6] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 10:46:6] (10.0.2.2|)  => hello
[16/12/2015 - 10:46:6] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 10:46:7] (10.0.2.2|)  => hello
[16/12/2015 - 10:46:7] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 10:46:7] (10.0.2.2|)  => hello
[16/12/2015 - 10:46:7] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4

[16/12/2015 - 10:46:7] (10.0.2.2|)  => hello
[16/12/2015 - 10:46:16] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 10:46:16] (10.0.2.2|)  => hello
[16/12/2015 - 10:46:16] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 10:47:43] (10.0.2.2|)  => hello
[16/12/2015 - 10:47:43] (10.0.2.2|)  => 
[16/12/2015 - 10:47:44] (10.0.2.2|)  => hello
[16/12/2015 - 10:47:44] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 10:47:44] (10.0.2.2|)  => hello
[16/12/2015 - 10:47:44] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 10:47:44] (10.0.2.2|)  => hello
[16/12/2015 - 10:47:44] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 10:47:44] (10.0.2.2|)  => hello
[16/12/2015 - 10:47:54] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 10:47:54] (10.0.2.2|)  => hello
[16/12/2015 - 10:47:54] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4

[16/12/2015 - 10:47:54] (10.0.2.2|)  => hello
[16/12/2015 - 10:47:54] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 10:47:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:47:56] (10.0.2.2|)  => 
[16/12/2015 - 10:47:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:47:56] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 10:47:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:47:56] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 10:47:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:47:56] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 10:47:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:47:56] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 10:47:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:47:56] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4

[16/12/2015 - 10:47:56] (10.0.2.2|)  => hello
[16/12/2015 - 10:48:4] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 11:53:7] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:7] (10.0.2.2|)  => 
[16/12/2015 - 11:53:7] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:7] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 11:53:7] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:7] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 11:53:7] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:7] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 11:53:7] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:8] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 11:53:8] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:17] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 11:53:17] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:17] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4

[16/12/2015 - 11:53:51] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:51] (10.0.2.2|)  => 
[16/12/2015 - 11:53:51] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:51] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 11:53:51] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:51] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 11:53:52] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:52] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 11:53:52] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:59] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 11:53:59] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:59] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4

[16/12/2015 - 11:53:59] (10.0.2.2|)  => hello
[16/12/2015 - 11:53:59] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 11:55:0] (10.0.2.2|)  => hello
[16/12/2015 - 11:55:0] (10.0.2.2|)  => f7e2655c-1f32-46dd-a412-fba73691494e
[16/12/2015 - 11:55:0] (10.0.2.2|)  => hello
[16/12/2015 - 11:55:0] (10.0.2.2|)  => {"creationdate":"2015-12-16T11:55:00.710","def":"/vagrant/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus"}},"ruid":"f7e2655c-1f32-46dd-a412-fba73691494e","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e/"},"CORPUS":{"type":"DIR","value":"/vagrant/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"20730","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"29051","completeddate":"","status":"Running"}
[16/12/2015 - 11:55:37] (10.0.2.2|)  => hello
[16/12/2015 - 11:55:37] (10.0.2.2|)  => {"creationdate":"2015-12-16T11:55:00.710","def":"/vagrant/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus"},"VOID":{"type":"FILE*","value":["Error reading val value (should be a string)","/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.1/stanford-parser/humanism.xml","/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.2/stanford-parser/meaning_of_life_full.xml","/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.0/stanford-parser/meaning_of_life.xml"]}},"ruid":"f7e2655c-1f32-46dd-a412-fba73691494e","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.1/stanford-parser/humanism.xml","/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.2/stanford-parser/meaning_of_life_full.xml","/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.0/stanford-parser/meaning_of_life.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.2/foo/foo1","/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.2/foo/foo2","/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.2/foo/foo3"],["/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.0/foo/foo1","/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.0/foo/foo2","/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.0/foo/foo3"],["/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.1/foo/foo1","/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.1/foo/foo2","/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null,null]},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-f7e2655c-1f32-46dd-a412-fba73691494e/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null,null]},"CORPUS":{"type":"DIR","value":"/vagrant/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"25794","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[16/12/2015 - 11:55:43] (10.0.2.2|)  => hello
[16/12/2015 - 11:55:53] (10.0.2.2|)  => ok
[16/12/2015 - 11:55:53] (10.0.2.2|)  => hello
[16/12/2015 - 11:55:53] (10.0.2.2|)  => Name : pipeline-test
Desc : test de pipeline
Last Modified : 12/10/15 4:35 PM
Inputs : 
	CORPUS: DIR( format : none ; schema : none)
Outputs : 
	VOID: FILE*( format : none ; schema : none)


Name : corenlp-server
Desc : stanford core nlp server mode test
Last Modified : 11/27/15 1:01 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	OUT: FILE( format : none ; schema : none)


Name : pipeline-test2
Desc : test de pipeline
Last Modified : 11/27/15 2:42 PM
Inputs : 
	CORPUS: DIR( format : none ; schema : none)
Outputs : 
	VOID: VAL( format : none ; schema : none)


Name : brat_propagate
Desc : 
Last Modified : 11/3/15 10:47 AM
Inputs : 
	SEED: FILE( format : none ; schema : brat_annotation)
	CORPUS: DIR( format : none ; schema : text)
Outputs : 
	CORPUS_MODIFIED: DIR( format : none ; schema : text)


Name : bonsai-parser@munshi
Desc : bonsai parse of xml files into passage format made by Munshi Asadullah
Last Modified : 12/11/15 3:03 PM
Inputs : 
	IN_DIR: DIR( format : xml ; schema : html)// directory containing html files to be parsed
Outputs : 
	OUT_DIR: DIR( format : xml ; schema : passage)// directory containing the output of the parsed file files keep the same name as the original file



Name : stanford-parser
Desc : The stanford parser
Last Modified : 12/10/15 10:54 AM
Inputs : 
	IN: FILE( format : none ; schema : none)// File to be annotated
Outputs : 
	OUT: FILE( format : unknown ; schema : none)


Name : pipeline-test0
Desc : test de pipeline
Last Modified : 11/27/15 2:41 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	VOID: VAL( format : none ; schema : none)


Name : tweetparse@jose
Desc : crawl some tweets
Last Modified : 10/22/15 2:53 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	OUT: FILE( format : none ; schema : none)


Name : foo
Desc : foo module for testing purposes
Last Modified : 10/29/15 4:22 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	OUT: FILE*( format : none ; schema : none)



<<<<<<< HEAD
[14/12/2015 - 23:39:18] (::1|)  => hello
[14/12/2015 - 23:39:18] (::1|)  => ba57e113-3437-4ac0-81b1-19867667481f
[14/12/2015 - 23:39:33] (::1|)  => hello
[14/12/2015 - 23:39:33] (::1|)  => foo : 33a1a129-ac1c-4679-baf4-5eaf475311cf

[14/12/2015 - 23:39:37] (::1|)  => hello
[14/12/2015 - 23:39:37] (::1|)  => foo : 33a1a129-ac1c-4679-baf4-5eaf475311cf
pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
foo : ba57e113-3437-4ac0-81b1-19867667481f

[14/12/2015 - 23:42:7] (::1|)  => hello
[14/12/2015 - 23:42:7] (::1|)  => 
[14/12/2015 - 23:42:8] (::1|)  => hello
[14/12/2015 - 23:42:8] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[14/12/2015 - 23:42:8] (::1|)  => hello
[14/12/2015 - 23:42:8] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.stanford-parser.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"}]}]}]}]}]}
[14/12/2015 - 23:42:8] (::1|)  => hello
[14/12/2015 - 23:42:8] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[14/12/2015 - 23:42:8] (::1|)  => hello
[14/12/2015 - 23:42:8] (::1|)  => foo : 33a1a129-ac1c-4679-baf4-5eaf475311cf
pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
foo : ba57e113-3437-4ac0-81b1-19867667481f

[14/12/2015 - 23:42:8] (::1|)  => hello
[14/12/2015 - 23:42:8] (::1|)  => public/js/vendor/underscore-min.map
[14/12/2015 - 23:42:8] (::1|)  => hello
[14/12/2015 - 23:42:8] (::1|)  => public/js/vendor/backbone-min.map
[14/12/2015 - 23:42:10] (::1|)  => hello
[14/12/2015 - 23:42:10] (::1|)  => 
[14/12/2015 - 23:44:58] (::1|)  => hello
[14/12/2015 - 23:44:58] (::1|)  => 
[14/12/2015 - 23:44:59] (::1|)  => hello
[14/12/2015 - 23:45:19] (::1|)  => timeout
[14/12/2015 - 23:45:19] (::1|)  => hello
[14/12/2015 - 23:45:39] (::1|)  => timeout
[14/12/2015 - 23:45:39] (::1|)  => hello
[14/12/2015 - 23:45:59] (::1|)  => timeout
[14/12/2015 - 23:45:59] (::1|)  => hello
[14/12/2015 - 23:45:59] (::1|)  => public/js/vendor/underscore-min.map
[14/12/2015 - 23:45:59] (::1|)  => hello
[14/12/2015 - 23:45:59] (::1|)  => public/js/vendor/backbone-min.map
[14/12/2015 - 23:45:59] (::1|)  => hello
[14/12/2015 - 23:46:19] (::1|)  => timeout
[14/12/2015 - 23:46:40] (::1|)  => hello
[14/12/2015 - 23:46:40] (::1|)  => 
[14/12/2015 - 23:46:41] (::1|)  => hello
[14/12/2015 - 23:46:41] (::1|)  => public/js/vendor/underscore-min.map
[14/12/2015 - 23:46:41] (::1|)  => hello
[14/12/2015 - 23:46:41] (::1|)  => public/js/vendor/backbone-min.map
[14/12/2015 - 23:46:42] (::1|)  => hello
[14/12/2015 - 23:47:2] (::1|)  => timeout
[14/12/2015 - 23:47:2] (::1|)  => hello
[14/12/2015 - 23:47:22] (::1|)  => timeout
[14/12/2015 - 23:47:22] (::1|)  => hello
[14/12/2015 - 23:47:28] (::1|)  => hello
[14/12/2015 - 23:47:28] (::1|)  => 
[14/12/2015 - 23:47:29] (::1|)  => hello
[14/12/2015 - 23:47:42] (::1|)  => timeout
[14/12/2015 - 23:47:42] (::1|)  => hello
[14/12/2015 - 23:47:49] (::1|)  => timeout
[14/12/2015 - 23:47:49] (::1|)  => hello
[14/12/2015 - 23:48:2] (::1|)  => timeout
[14/12/2015 - 23:48:9] (::1|)  => timeout
[14/12/2015 - 23:48:9] (::1|)  => hello
[14/12/2015 - 23:48:29] (::1|)  => timeout
[14/12/2015 - 23:48:29] (::1|)  => hello
[14/12/2015 - 23:48:49] (::1|)  => timeout
[15/12/2015 - 5:37:31] (::1|)  => hello
[15/12/2015 - 5:37:31] (::1|)  => 
[15/12/2015 - 5:37:36] (::1|)  => hello
[15/12/2015 - 5:37:36] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 5:37:37] (::1|)  => hello
[15/12/2015 - 5:37:37] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 5:37:47] (::1|)  => hello
[15/12/2015 - 5:38:7] (::1|)  => timeout
[15/12/2015 - 5:38:7] (::1|)  => hello
[15/12/2015 - 5:38:27] (::1|)  => timeout
[15/12/2015 - 5:38:27] (::1|)  => hello
[15/12/2015 - 5:38:47] (::1|)  => timeout
[15/12/2015 - 5:38:47] (::1|)  => hello
[15/12/2015 - 5:39:7] (::1|)  => timeout
[15/12/2015 - 5:39:7] (::1|)  => hello
[15/12/2015 - 5:39:7] (::1|)  => 
[15/12/2015 - 5:39:12] (::1|)  => hello
[15/12/2015 - 5:39:12] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 5:39:13] (::1|)  => hello
[15/12/2015 - 5:39:13] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 5:39:15] (::1|)  => hello
[15/12/2015 - 5:39:35] (::1|)  => timeout
[15/12/2015 - 5:39:35] (::1|)  => hello
[15/12/2015 - 5:39:55] (::1|)  => timeout
[15/12/2015 - 5:39:55] (::1|)  => hello
[15/12/2015 - 5:40:15] (::1|)  => timeout
[15/12/2015 - 5:40:15] (::1|)  => hello
[15/12/2015 - 5:40:35] (::1|)  => timeout
[15/12/2015 - 7:21:20] (::1|)  => hello
[15/12/2015 - 7:21:20] (::1|)  => 
[15/12/2015 - 7:21:21] (::1|)  => hello
[15/12/2015 - 7:21:41] (::1|)  => timeout
[15/12/2015 - 7:21:41] (::1|)  => hello
[15/12/2015 - 7:22:1] (::1|)  => timeout
[15/12/2015 - 7:22:1] (::1|)  => hello
[15/12/2015 - 7:22:22] (::1|)  => timeout
[15/12/2015 - 7:22:22] (::1|)  => hello
[15/12/2015 - 7:22:42] (::1|)  => timeout
[15/12/2015 - 7:23:42] (::1|)  => hello
[15/12/2015 - 7:23:42] (::1|)  => 
[15/12/2015 - 7:23:45] (::1|)  => hello
[15/12/2015 - 7:23:45] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 7:23:45] (::1|)  => hello
[15/12/2015 - 7:23:45] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 7:23:46] (::1|)  => hello
[15/12/2015 - 7:24:7] (::1|)  => timeout
[15/12/2015 - 7:24:7] (::1|)  => hello
[15/12/2015 - 7:24:27] (::1|)  => timeout
[15/12/2015 - 7:24:27] (::1|)  => hello
[15/12/2015 - 7:24:47] (::1|)  => timeout
[15/12/2015 - 7:24:47] (::1|)  => hello
[15/12/2015 - 7:25:7] (::1|)  => timeout
[15/12/2015 - 7:25:46] (::1|)  => hello
[15/12/2015 - 7:25:46] (::1|)  => 
[15/12/2015 - 7:25:47] (::1|)  => hello
[15/12/2015 - 7:25:47] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 7:25:48] (::1|)  => hello
[15/12/2015 - 7:25:48] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 7:25:48] (::1|)  => hello
[15/12/2015 - 7:26:8] (::1|)  => timeout
[15/12/2015 - 7:26:8] (::1|)  => hello
[15/12/2015 - 7:26:28] (::1|)  => timeout
[15/12/2015 - 7:26:28] (::1|)  => hello
[15/12/2015 - 7:26:48] (::1|)  => timeout
[15/12/2015 - 7:26:48] (::1|)  => hello
[15/12/2015 - 7:27:8] (::1|)  => timeout
[15/12/2015 - 7:27:50] (::1|)  => hello
[15/12/2015 - 7:27:50] (::1|)  => 
[15/12/2015 - 7:27:52] (::1|)  => hello
[15/12/2015 - 7:27:52] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 7:27:52] (::1|)  => hello
[15/12/2015 - 7:27:52] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 7:27:53] (::1|)  => hello
[15/12/2015 - 7:28:13] (::1|)  => timeout
[15/12/2015 - 7:28:13] (::1|)  => hello
[15/12/2015 - 7:28:33] (::1|)  => timeout
[15/12/2015 - 7:28:33] (::1|)  => hello
[15/12/2015 - 7:28:53] (::1|)  => timeout
[15/12/2015 - 7:28:53] (::1|)  => hello
[15/12/2015 - 7:29:13] (::1|)  => timeout
[15/12/2015 - 7:30:22] (::1|)  => hello
[15/12/2015 - 7:30:22] (::1|)  => 
[15/12/2015 - 7:30:23] (::1|)  => hello
[15/12/2015 - 7:30:23] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 7:30:24] (::1|)  => hello
[15/12/2015 - 7:30:24] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 7:30:24] (::1|)  => hello
[15/12/2015 - 7:30:44] (::1|)  => timeout
[15/12/2015 - 7:30:44] (::1|)  => hello
[15/12/2015 - 7:31:4] (::1|)  => timeout
[15/12/2015 - 7:31:4] (::1|)  => hello
[15/12/2015 - 7:31:24] (::1|)  => timeout
[15/12/2015 - 7:31:24] (::1|)  => hello
[15/12/2015 - 7:31:44] (::1|)  => timeout
[15/12/2015 - 8:36:12] (::1|)  => hello
[15/12/2015 - 8:36:32] (::1|)  => timeout
[15/12/2015 - 8:47:50] (::1|)  => hello
[15/12/2015 - 8:47:50] (::1|)  => 
[15/12/2015 - 8:47:55] (::1|)  => hello
[15/12/2015 - 8:47:55] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 8:47:55] (::1|)  => hello
[15/12/2015 - 8:47:55] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 8:47:57] (::1|)  => hello
[15/12/2015 - 8:48:17] (::1|)  => timeout
[15/12/2015 - 8:48:17] (::1|)  => hello
[15/12/2015 - 8:48:37] (::1|)  => timeout
[15/12/2015 - 8:48:37] (::1|)  => hello
[15/12/2015 - 8:48:48] (::1|)  => hello
[15/12/2015 - 8:48:48] (::1|)  => 
[15/12/2015 - 8:48:50] (::1|)  => hello
[15/12/2015 - 8:48:51] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.stanford-parser.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 8:48:51] (::1|)  => hello
[15/12/2015 - 8:48:51] (::1|)  => corpus
[15/12/2015 - 8:48:52] (::1|)  => hello
[15/12/2015 - 8:48:52] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/people/buiquang/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 8:48:52] (::1|)  => hello
[15/12/2015 - 8:48:53] (::1|)  => 
[15/12/2015 - 8:48:57] (::1|)  => timeout
[15/12/2015 - 8:48:57] (::1|)  => hello
[15/12/2015 - 8:48:57] (::1|)  => corpus
[15/12/2015 - 8:48:57] (::1|)  => hello
[15/12/2015 - 8:48:57] (::1|)  => 
[15/12/2015 - 8:48:59] (::1|)  => hello
[15/12/2015 - 8:48:59] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 8:49:0] (::1|)  => hello
[15/12/2015 - 8:49:0] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 8:49:1] (::1|)  => hello
[15/12/2015 - 8:49:1] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/people/buiquang/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 8:49:1] (::1|)  => hello
[15/12/2015 - 8:49:1] (::1|)  => corpus
[15/12/2015 - 8:49:1] (::1|)  => hello
[15/12/2015 - 8:49:1] (::1|)  => 
[15/12/2015 - 8:49:1] (::1|)  => hello
[15/12/2015 - 8:49:1] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.stanford-parser.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 8:49:25] (::1|)  => hello
[15/12/2015 - 8:49:25] (::1|)  => 
[15/12/2015 - 8:49:26] (::1|)  => hello
[15/12/2015 - 8:49:26] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/people/buiquang/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 8:49:26] (::1|)  => hello
[15/12/2015 - 8:49:26] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.stanford-parser.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 8:49:26] (::1|)  => hello
[15/12/2015 - 8:49:26] (::1|)  => corpus
[15/12/2015 - 8:49:26] (::1|)  => hello
[15/12/2015 - 8:49:26] (::1|)  => 
[15/12/2015 - 8:49:49] (::1|)  => hello
[15/12/2015 - 8:49:49] (::1|)  => 
[15/12/2015 - 8:49:50] (::1|)  => hello
[15/12/2015 - 8:49:50] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 8:49:51] (::1|)  => hello
[15/12/2015 - 8:49:51] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 8:49:52] (::1|)  => hello
[15/12/2015 - 8:49:52] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 8:49:52] (::1|)  => hello
[15/12/2015 - 8:49:52] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 8:49:52] (::1|)  => hello
[15/12/2015 - 8:49:52] (::1|)  => 
[15/12/2015 - 8:49:52] (::1|)  => hello
[15/12/2015 - 8:49:53] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.stanford-parser.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 8:49:54] (::1|)  => hello
[15/12/2015 - 8:49:54] (::1|)  => 
[15/12/2015 - 8:49:54] (::1|)  => hello
[15/12/2015 - 8:49:54] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 8:49:54] (::1|)  => hello
[15/12/2015 - 8:49:54] (::1|)  => 
[15/12/2015 - 8:49:54] (::1|)  => hello
[15/12/2015 - 8:49:54] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 8:49:54] (::1|)  => hello
[15/12/2015 - 8:49:54] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.stanford-parser.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 8:50:7] (::1|)  => hello
[15/12/2015 - 8:50:8] (::1|)  => 1c88156d-30dc-48ac-af3b-3f2d805f2f81
[15/12/2015 - 8:54:44] (::1|)  => hello
[15/12/2015 - 8:54:44] (::1|)  => 
[15/12/2015 - 8:54:46] (::1|)  => hello
[15/12/2015 - 8:54:46] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 8:54:47] (::1|)  => hello
[15/12/2015 - 8:54:47] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 8:54:47] (::1|)  => hello
[15/12/2015 - 8:54:47] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 8:54:47] (::1|)  => hello
[15/12/2015 - 8:54:47] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.stanford-parser.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 8:54:47] (::1|)  => hello
[15/12/2015 - 8:54:47] (::1|)  => _MAP : d28175a2-66c7-4d22-98c5-c3155589f29f
_ANONYMOUS : 42bebdaf-066b-486b-919c-56551ebb74bb
_ANONYMOUS : 82ba456c-cd49-43c3-8adf-99b6750cfc67
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
stanford-parser : 062ffd62-cf2b-46fd-98c8-b10be82ec146
stanford-parser : 1e617100-a190-4fa7-bc90-d796a27e4ab1
_ANONYMOUS : e97c4fba-f525-44e0-a589-0aad4eaf7561
stanford-parser : 10562ac4-86fc-47fe-9275-8e2c784fc460

[15/12/2015 - 8:54:47] (::1|)  => hello
[15/12/2015 - 8:54:47] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 8:55:42] (::1|)  => hello
[15/12/2015 - 8:55:42] (::1|)  => _MAP : d28175a2-66c7-4d22-98c5-c3155589f29f
_ANONYMOUS : 42bebdaf-066b-486b-919c-56551ebb74bb
_ANONYMOUS : 82ba456c-cd49-43c3-8adf-99b6750cfc67
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
stanford-parser : 062ffd62-cf2b-46fd-98c8-b10be82ec146
stanford-parser : 1e617100-a190-4fa7-bc90-d796a27e4ab1
_ANONYMOUS : e97c4fba-f525-44e0-a589-0aad4eaf7561
stanford-parser : 10562ac4-86fc-47fe-9275-8e2c784fc460

[15/12/2015 - 8:56:0] (::1|)  => hello
[15/12/2015 - 8:56:0] (::1|)  => Missing pid
[15/12/2015 - 8:56:7] (::1|)  => hello
[15/12/2015 - 8:56:7] (::1|)  => _CMD#test.STDOUT,_CUR_MOD,foo.OUT,CORPUS,_DEF_DIR,REGEX,_MOD_CONTEXT,_CMD#test.STDERR,_,_RUN_DIR,CHUNK_SIZE,_CUR_MOD,OUT_DIR,_DEF_DIR,_MOD_CONTEXT,_,_RUN_DIR
[15/12/2015 - 8:56:30] (::1|)  => hello
[15/12/2015 - 8:56:30] (::1|)  => /home/paul/projects/custom/cpm/data/corpus/testcorpus/humanism.txt
[15/12/2015 - 9:5:3] (::1|)  => hello
[15/12/2015 - 9:5:3] (::1|)  => 
[15/12/2015 - 9:5:4] (::1|)  => hello
[15/12/2015 - 9:5:4] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 9:5:4] (::1|)  => hello
[15/12/2015 - 9:5:4] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 9:5:4] (::1|)  => hello
[15/12/2015 - 9:5:4] (::1|)  => _MAP : d28175a2-66c7-4d22-98c5-c3155589f29f
_ANONYMOUS : 42bebdaf-066b-486b-919c-56551ebb74bb
_ANONYMOUS : 82ba456c-cd49-43c3-8adf-99b6750cfc67
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
stanford-parser : 062ffd62-cf2b-46fd-98c8-b10be82ec146
stanford-parser : 1e617100-a190-4fa7-bc90-d796a27e4ab1
_ANONYMOUS : e97c4fba-f525-44e0-a589-0aad4eaf7561
stanford-parser : 10562ac4-86fc-47fe-9275-8e2c784fc460

[15/12/2015 - 9:5:4] (::1|)  => hello
[15/12/2015 - 9:5:4] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.stanford-parser.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 9:5:14] (::1|)  => hello
[15/12/2015 - 9:5:14] (::1|)  => _MAP : d28175a2-66c7-4d22-98c5-c3155589f29f
_ANONYMOUS : 42bebdaf-066b-486b-919c-56551ebb74bb
_ANONYMOUS : 82ba456c-cd49-43c3-8adf-99b6750cfc67
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
stanford-parser : 062ffd62-cf2b-46fd-98c8-b10be82ec146
stanford-parser : 1e617100-a190-4fa7-bc90-d796a27e4ab1
_ANONYMOUS : e97c4fba-f525-44e0-a589-0aad4eaf7561
stanford-parser : 10562ac4-86fc-47fe-9275-8e2c784fc460

[15/12/2015 - 9:5:25] (::1|)  => hello
[15/12/2015 - 9:5:25] (::1|)  => _CUR_MOD,CORPUS,_DEF_DIR,_MOD_CONTEXT,_RUN_DIR,_CUR_MOD,CORPUS,_DEF_DIR,REGEX,_MOD_CONTEXT,_,_RUN_DIR,CHUNK_SIZE
[15/12/2015 - 9:6:30] (::1|)  => hello
[15/12/2015 - 9:6:30] (::1|)  => /home/paul/projects/custom/cpm/data/corpus//testcorpus
[15/12/2015 - 9:7:8] (::1|)  => hello
[15/12/2015 - 9:7:8] (::1|)  => /home/paul/projects/custom/cpm/data/corpus//testcorpus/meaning_of_life.txt
[15/12/2015 - 9:7:8] (::1|)  => 
The meaning of life, or the answer to the question "What is the meaning of life?", is a philosophical and spiritual conception of the significance of living or existence in general. The question seeking the meaning of life can also be expressed in different forms, such as "What should I do?", "Why are we here?", "What is life all about?", and "What is the purpose of existence?" or even "Does life exist at all?" There have been a large number of proposed answers to these questions from many different cultural and ideological backgrounds. The search for life's meaning has produced much philosophical, scientific, and theological speculation throughout history.



[15/12/2015 - 9:16:28] (::1|)  => hello
[15/12/2015 - 9:16:28] (::1|)  => malformed configuration file (Missing argument)
[15/12/2015 - 9:17:58] (::1|)  => hello
[15/12/2015 - 9:17:59] (::1|)  => malformed configuration file (Missing argument)
[15/12/2015 - 9:19:52] (::1|)  => hello
[15/12/2015 - 9:20:6] (::1|)  => malformed configuration file (Missing argument)
[15/12/2015 - 9:21:32] (::1|)  => hello
[15/12/2015 - 9:21:32] (::1|)  => malformed configuration file (Missing argument)
[15/12/2015 - 9:22:13] (::1|)  => hello
[15/12/2015 - 9:22:13] (::1|)  => 366e661c-1747-4384-8282-e8328e36e4c1
[15/12/2015 - 9:22:48] (::1|)  => hello
[15/12/2015 - 9:22:48] (::1|)  => CORPUS,_RUN_DIR,_DEF_DIR,_CUR_MOD,CORPUS,_DEF_DIR,_MOD_CONTEXT,_RUN_DIR
[15/12/2015 - 13:43:45] (::1|)  => hello
[15/12/2015 - 13:43:45] (::1|)  => 
[15/12/2015 - 13:43:46] (::1|)  => hello
[15/12/2015 - 13:43:47] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 13:43:47] (::1|)  => hello
[15/12/2015 - 13:43:47] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.stanford-parser.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 13:43:47] (::1|)  => hello
[15/12/2015 - 13:43:47] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 13:43:47] (::1|)  => hello
[15/12/2015 - 13:43:47] (::1|)  => stanford-parser : 5605b609-6069-4165-a30d-dbbc89ccbef6
pipeline-test : 366e661c-1747-4384-8282-e8328e36e4c1
_ANONYMOUS : f103e6e6-a3ba-4b74-816f-d8e1beb2f35a
_ANONYMOUS : 1dfeb792-e81b-42f8-9766-a18a487d16af
stanford-parser : ea5859d7-119b-4eb7-993a-72493c28d5ed
_ANONYMOUS : fdbe897a-e8c6-472b-a377-e9b32aae3852
_MAP : ade500d1-c9b2-406c-90d5-2047a80c3306
stanford-parser : d20f069e-db12-4174-8c89-693c2fd3f33b
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81

[15/12/2015 - 14:1:14] (::1|)  => hello
[15/12/2015 - 14:1:14] (::1|)  => d350e7c2-7448-40be-983f-46a54eb0421b
[15/12/2015 - 14:2:14] (::1|)  => hello
[15/12/2015 - 14:2:14] (::1|)  => 244a3f68-13d0-4df2-8be4-11f8c91a431c
[15/12/2015 - 14:6:53] (::1|)  => hello
[15/12/2015 - 14:6:53] (::1|)  => 79468b25-1562-4618-91ee-70269095c24a
[15/12/2015 - 14:8:45] (::1|)  => hello
[15/12/2015 - 14:8:45] (::1|)  => 56648286-47fd-41d4-b856-86ce9833e04f
[15/12/2015 - 14:9:21] (::1|)  => hello
[15/12/2015 - 14:9:21] (::1|)  => 6eb2b4fb-29fd-4341-9480-f334a029d0bd
[15/12/2015 - 14:10:22] (::1|)  => hello
[15/12/2015 - 14:10:23] (::1|)  => 83f261b0-3959-40fe-b66f-9e313d8b3bdc
[15/12/2015 - 14:10:42] (::1|)  => hello
[15/12/2015 - 14:10:43] (::1|)  => d0ab9049-e963-4204-9c51-8540d5a648fb
[15/12/2015 - 14:12:30] (::1|)  => hello
[15/12/2015 - 14:12:30] (::1|)  => 9e50574b-afc7-4de3-8b37-2fc198e5763b
[15/12/2015 - 14:17:20] (::1|)  => hello
[15/12/2015 - 14:17:20] (::1|)  => 75a7a073-d7d4-40ae-90db-48db087c3022
[15/12/2015 - 14:20:2] (::1|)  => hello
[15/12/2015 - 14:20:2] (::1|)  => 7e312d6d-42e3-4441-b2ac-02a53a2bf188
[15/12/2015 - 14:23:47] (::1|)  => hello
[15/12/2015 - 14:23:56] (::1|)  => 34cc55db-73a8-4635-b5cb-160b55232317
[15/12/2015 - 14:26:0] (::1|)  => hello
[15/12/2015 - 14:26:0] (::1|)  => CORPUS,_RUN_DIR,_DEF_DIR,VOID,_CMD#merge.STDOUT,_MAP._CMD#test.STDOUT,_MAP.stanford-parser.OUT,_CUR_MOD,CORPUS,_MAP.foo.OUT,_DEF_DIR,_MAP._CMD#test.STDERR,_MOD_CONTEXT,_RUN_DIR,_CMD#merge.STDERR
[15/12/2015 - 14:26:8] (::1|)  => hello
[15/12/2015 - 14:26:8] (::1|)  => 
  - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-34cc55db-73a8-4635-b5cb-160b55232317//_MAP/_MAP.1/humanism.xml
  - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-34cc55db-73a8-4635-b5cb-160b55232317//_MAP/_MAP.2/meaning_of_life_full.xml
  - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-34cc55db-73a8-4635-b5cb-160b55232317//_MAP/_MAP.0/meaning_of_life.xml
[15/12/2015 - 14:26:22] (::1|)  => hello
[15/12/2015 - 14:26:22] (::1|)  => /home/paul/projects/custom/cpm/data/results/pipeline-test/run-34cc55db-73a8-4635-b5cb-160b55232317//_MAP/_MAP.1/humanism.xml
[15/12/2015 - 14:26:22] (::1|)  => (ROOT
  (S
    (S
      (NP (NNP Humanism))
      (VP (VBZ is)
        (NP
          (NP
            (NP (DT a)
              (ADJP (JJ philosophical)
                (CC and)
                (JJ ethical))
              (NN stance))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBZ emphasizes)
                  (NP
                    (NP (DT the) (NN value)
                      (CC and)
                      (NN agency))
                    (PP (IN of)
                      (NP (JJ human) (NNS beings))))
                  (, ,)
                  (ADVP (RB individually))))))
          (CC and)
          (ADVP (RB collectively)))))
    (, ,)
    (CC and)
    (S
      (ADVP (RB generally))
      (VP (VBZ prefers)
        (ADJP (JJ critical)))
      (NP
        (NP
          (NP (NN thinking)
            (CC and)
            (NN evidence))
          (PRN (-LRB- -LRB-)
            (NP
              (NP (NN rationalism))
              (, ,)
              (NP (NN empiricism)))
            (-RRB- -RRB-)))
        (PP (IN over)
          (NP
            (NP (VBN established) (NN doctrine)
              (CC or)
              (NN faith))
            (PRN (-LRB- -LRB-)
              (NP (NNP fideism))
              (-RRB- -RRB-))))))
    (. .)))

nsubj(stance-7, Humanism-1)
nsubj(prefers-24, Humanism-1)
cop(stance-7, is-2)
det(stance-7, a-3)
amod(stance-7, philosophical-4)
cc(philosophical-4, and-5)
conj:and(philosophical-4, ethical-6)
amod(stance-7, ethical-6)
root(ROOT-0, stance-7)
nsubj(emphasizes-9, stance-7)
ref(stance-7, that-8)
acl:relcl(stance-7, emphasizes-9)
det(value-11, the-10)
dobj(emphasizes-9, value-11)
cc(value-11, and-12)
dobj(emphasizes-9, agency-13)
conj:and(value-11, agency-13)
case(beings-16, of-14)
amod(beings-16, human-15)
nmod:of(value-11, beings-16)
advmod(emphasizes-9, individually-18)
cc(stance-7, and-19)
advmod(stance-7, collectively-20)
cc(stance-7, and-22)
advmod(prefers-24, generally-23)
conj:and(stance-7, prefers-24)
nsubj(emphasizes-9, prefers-24)
xcomp(prefers-24, critical-25)
dep(prefers-24, thinking-26)
cc(thinking-26, and-27)
dep(prefers-24, evidence-28)
conj:and(thinking-26, evidence-28)
dep(thinking-26, rationalism-30)
appos(rationalism-30, empiricism-32)
case(doctrine-36, over-34)
amod(doctrine-36, established-35)
nmod:over(thinking-26, doctrine-36)
cc(doctrine-36, or-37)
nmod:over(thinking-26, faith-38)
conj:or(doctrine-36, faith-38)
appos(doctrine-36, fideism-40)

(ROOT
  (S
    (NP
      (NP (DT The) (NN meaning))
      (PP (IN of)
        (NP (DT the) (NN term) (NN humanism))))
    (VP (VBZ has)
      (VP (VBN fluctuated) (, ,)
        (PP (VBG according)
          (PP (TO to)
            (NP
              (NP (DT the) (JJ successive) (JJ intellectual) (NNS movements))
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (VBP have)
                    (VP (VBN identified)
                      (PP (IN with)
                        (NP (PRP it))))))))))))
    (. .)))

det(meaning-2, The-1)
nsubj(fluctuated-8, meaning-2)
case(humanism-6, of-3)
det(humanism-6, the-4)
compound(humanism-6, term-5)
nmod:of(meaning-2, humanism-6)
aux(fluctuated-8, has-7)
root(ROOT-0, fluctuated-8)
case(movements-15, according-10)
mwe(according-10, to-11)
det(movements-15, the-12)
amod(movements-15, successive-13)
amod(movements-15, intellectual-14)
nmod:according_to(fluctuated-8, movements-15)
nsubj(identified-18, movements-15)
ref(movements-15, which-16)
aux(identified-18, have-17)
acl:relcl(movements-15, identified-18)
case(it-20, with-19)
nmod:with(identified-18, it-20)

(ROOT
  (S
    (S
      (VP (VBG -LSB-)
        (NP (CD 1) (NNS -RSB-))
        (ADVP (RB Generally))))
    (, ,)
    (ADVP (RB however))
    (, ,)
    (NP (NN humanism))
    (VP (VBZ refers)
      (PP (TO to)
        (NP
          (NP (DT a) (NN perspective))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ affirms)
                (NP
                  (NP (DT some) (NN notion))
                  (PP (IN of)
                    (NP (JJ human) (NN freedom)
                      (CC and)
                      (NN progress))))))))))
    (. .)))

dep(refers-9, -LSB--1)
nummod(-RSB--3, 1-2)
dobj(-LSB--1, -RSB--3)
advmod(-LSB--1, Generally-4)
advmod(refers-9, however-6)
nsubj(refers-9, humanism-8)
root(ROOT-0, refers-9)
case(perspective-12, to-10)
det(perspective-12, a-11)
nmod:to(refers-9, perspective-12)
nsubj(affirms-14, perspective-12)
ref(perspective-12, that-13)
acl:relcl(perspective-12, affirms-14)
det(notion-16, some-15)
dobj(affirms-14, notion-16)
case(freedom-19, of-17)
amod(freedom-19, human-18)
nmod:of(notion-16, freedom-19)
cc(freedom-19, and-20)
nmod:of(notion-16, progress-21)
conj:and(freedom-19, progress-21)

(ROOT
  (S
    (S
      (S
        (PP (IN In)
          (NP (JJ modern) (NNS times)))
        (, ,)
        (NP (JJ humanist) (NNS movements))
        (VP (VBP are)
          (ADVP (RB typically))
          (VP (VBN aligned)
            (PP (IN with)
              (NP (NN secularism))))))
      (, ,)
      (CC and)
      (S
        (NP
          (NP (NN today))
          (`` ``)
          (NP (NNP Humanism))
          ('' ''))
        (ADVP (RB typically))
        (VP (VBZ refers)
          (PP (TO to)
            (NP
              (NP (DT a) (JJ non-theistic) (NN life) (NN stance))
              (VP (VBN centred)
                (PP (IN on)
                  (NP (JJ human) (NN agency)))))))))
    (, ,)
    (CC and)
    (S
      (VP (VBG looking)
        (PP (TO to)
          (NP
            (NP (NN science))
            (PP (RB instead) (IN of)
              (NP (JJ religious) (NN dogma)))))
        (SBAR (IN in) (NN order)
          (S
            (VP (TO to)
              (VP (VB understand)
                (NP (DT the) (NN world))))))))
    (. .)))

case(times-3, In-1)
amod(times-3, modern-2)
nmod:in(aligned-9, times-3)
amod(movements-6, humanist-5)
nsubjpass(aligned-9, movements-6)
nsubjpass(looking-31, movements-6)
auxpass(aligned-9, are-7)
advmod(aligned-9, typically-8)
root(ROOT-0, aligned-9)
case(secularism-11, with-10)
nmod:with(aligned-9, secularism-11)
cc(aligned-9, and-13)
nsubj(refers-19, today-14)
dep(today-14, Humanism-16)
advmod(refers-19, typically-18)
conj:and(aligned-9, refers-19)
case(stance-24, to-20)
det(stance-24, a-21)
amod(stance-24, non-theistic-22)
compound(stance-24, life-23)
nmod:to(refers-19, stance-24)
acl(stance-24, centred-25)
case(agency-28, on-26)
amod(agency-28, human-27)
nmod:on(centred-25, agency-28)
cc(aligned-9, and-30)
conj:and(aligned-9, looking-31)
case(science-33, to-32)
nmod:to(looking-31, science-33)
case(dogma-37, instead-34)
mwe(instead-34, of-35)
amod(dogma-37, religious-36)
nmod:instead_of(science-33, dogma-37)
mark(understand-41, in-38)
mwe(in-38, order-39)
mark(understand-41, to-40)
advcl(looking-31, understand-41)
det(world-43, the-42)
dobj(understand-41, world-43)

(ROOT
  (SINV
    (VP (VBZ -LSB-))
    (NP (CD 2) (NN -RSB-))))

root(ROOT-0, -LSB--1)
nummod(-RSB--3, 2-2)
nsubj(-LSB--1, -RSB--3)


[15/12/2015 - 14:26:52] (::1|)  => hello
[15/12/2015 - 14:26:52] (::1|)  => - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-34cc55db-73a8-4635-b5cb-160b55232317//_MAP/_MAP.1/humanism.xml
  - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-34cc55db-73a8-4635-b5cb-160b55232317//_MAP/_MAP.2/meaning_of_life_full.xml
  - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-34cc55db-73a8-4635-b5cb-160b55232317//_MAP/_MAP.0/meaning_of_life.xml
[15/12/2015 - 14:28:1] (::1|)  => hello
[15/12/2015 - 14:28:1] (::1|)  => ok
[15/12/2015 - 14:28:8] (::1|)  => hello
[15/12/2015 - 14:28:8] (::1|)  => 33b85e3b-d9a5-44f4-a476-0e546f05f74b
[15/12/2015 - 14:28:49] (::1|)  => hello
[15/12/2015 - 14:28:49] (::1|)  => CORPUS,_RUN_DIR,_DEF_DIR,VOID,_CMD#merge.STDOUT,_MAP._CMD#test.STDOUT,_MAP.stanford-parser.OUT,_CUR_MOD,CORPUS,_MAP.foo.OUT,_DEF_DIR,_MAP._CMD#test.STDERR,_MOD_CONTEXT,_RUN_DIR,_CMD#merge.STDERR
[15/12/2015 - 14:28:55] (::1|)  => hello
[15/12/2015 - 14:28:55] (::1|)  => /home/paul/projects/custom/cpm/data/results/pipeline-test/run-33b85e3b-d9a5-44f4-a476-0e546f05f74b//merged.xml
[15/12/2015 - 14:29:4] (::1|)  => hello
[15/12/2015 - 14:29:4] (::1|)  => /home/paul/projects/custom/cpm/data/results/pipeline-test/run-33b85e3b-d9a5-44f4-a476-0e546f05f74b//merged.xml
[15/12/2015 - 14:29:4] (::1|)  => (ROOT
  (S
    (S
      (NP (NNP Humanism))
      (VP (VBZ is)
        (NP
          (NP
            (NP (DT a)
              (ADJP (JJ philosophical)
                (CC and)
                (JJ ethical))
              (NN stance))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBZ emphasizes)
                  (NP
                    (NP (DT the) (NN value)
                      (CC and)
                      (NN agency))
                    (PP (IN of)
                      (NP (JJ human) (NNS beings))))
                  (, ,)
                  (ADVP (RB individually))))))
          (CC and)
          (ADVP (RB collectively)))))
    (, ,)
    (CC and)
    (S
      (ADVP (RB generally))
      (VP (VBZ prefers)
        (ADJP (JJ critical)))
      (NP
        (NP
          (NP (NN thinking)
            (CC and)
            (NN evidence))
          (PRN (-LRB- -LRB-)
            (NP
              (NP (NN rationalism))
              (, ,)
              (NP (NN empiricism)))
            (-RRB- -RRB-)))
        (PP (IN over)
          (NP
            (NP (VBN established) (NN doctrine)
              (CC or)
              (NN faith))
            (PRN (-LRB- -LRB-)
              (NP (NNP fideism))
              (-RRB- -RRB-))))))
    (. .)))

nsubj(stance-7, Humanism-1)
nsubj(prefers-24, Humanism-1)
cop(stance-7, is-2)
det(stance-7, a-3)
amod(stance-7, philosophical-4)
cc(philosophical-4, and-5)
conj:and(philosophical-4, ethical-6)
amod(stance-7, ethical-6)
root(ROOT-0, stance-7)
nsubj(emphasizes-9, stance-7)
ref(stance-7, that-8)
acl:relcl(stance-7, emphasizes-9)
det(value-11, the-10)
dobj(emphasizes-9, value-11)
cc(value-11, and-12)
dobj(emphasizes-9, agency-13)
conj:and(value-11, agency-13)
case(beings-16, of-14)
amod(beings-16, human-15)
nmod:of(value-11, beings-16)
advmod(emphasizes-9, individually-18)
cc(stance-7, and-19)
advmod(stance-7, collectively-20)
cc(stance-7, and-22)
advmod(prefers-24, generally-23)
conj:and(stance-7, prefers-24)
nsubj(emphasizes-9, prefers-24)
xcomp(prefers-24, critical-25)
dep(prefers-24, thinking-26)
cc(thinking-26, and-27)
dep(prefers-24, evidence-28)
conj:and(thinking-26, evidence-28)
dep(thinking-26, rationalism-30)
appos(rationalism-30, empiricism-32)
case(doctrine-36, over-34)
amod(doctrine-36, established-35)
nmod:over(thinking-26, doctrine-36)
cc(doctrine-36, or-37)
nmod:over(thinking-26, faith-38)
conj:or(doctrine-36, faith-38)
appos(doctrine-36, fideism-40)

(ROOT
  (S
    (NP
      (NP (DT The) (NN meaning))
      (PP (IN of)
        (NP (DT the) (NN term) (NN humanism))))
    (VP (VBZ has)
      (VP (VBN fluctuated) (, ,)
        (PP (VBG according)
          (PP (TO to)
            (NP
              (NP (DT the) (JJ successive) (JJ intellectual) (NNS movements))
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (VBP have)
                    (VP (VBN identified)
                      (PP (IN with)
                        (NP (PRP it))))))))))))
    (. .)))

det(meaning-2, The-1)
nsubj(fluctuated-8, meaning-2)
case(humanism-6, of-3)
det(humanism-6, the-4)
compound(humanism-6, term-5)
nmod:of(meaning-2, humanism-6)
aux(fluctuated-8, has-7)
root(ROOT-0, fluctuated-8)
case(movements-15, according-10)
mwe(according-10, to-11)
det(movements-15, the-12)
amod(movements-15, successive-13)
amod(movements-15, intellectual-14)
nmod:according_to(fluctuated-8, movements-15)
nsubj(identified-18, movements-15)
ref(movements-15, which-16)
aux(identified-18, have-17)
acl:relcl(movements-15, identified-18)
case(it-20, with-19)
nmod:with(identified-18, it-20)

(ROOT
  (S
    (S
      (VP (VBG -LSB-)
        (NP (CD 1) (NNS -RSB-))
        (ADVP (RB Generally))))
    (, ,)
    (ADVP (RB however))
    (, ,)
    (NP (NN humanism))
    (VP (VBZ refers)
      (PP (TO to)
        (NP
          (NP (DT a) (NN perspective))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ affirms)
                (NP
                  (NP (DT some) (NN notion))
                  (PP (IN of)
                    (NP (JJ human) (NN freedom)
                      (CC and)
                      (NN progress))))))))))
    (. .)))

dep(refers-9, -LSB--1)
nummod(-RSB--3, 1-2)
dobj(-LSB--1, -RSB--3)
advmod(-LSB--1, Generally-4)
advmod(refers-9, however-6)
nsubj(refers-9, humanism-8)
root(ROOT-0, refers-9)
case(perspective-12, to-10)
det(perspective-12, a-11)
nmod:to(refers-9, perspective-12)
nsubj(affirms-14, perspective-12)
ref(perspective-12, that-13)
acl:relcl(perspective-12, affirms-14)
det(notion-16, some-15)
dobj(affirms-14, notion-16)
case(freedom-19, of-17)
amod(freedom-19, human-18)
nmod:of(notion-16, freedom-19)
cc(freedom-19, and-20)
nmod:of(notion-16, progress-21)
conj:and(freedom-19, progress-21)

(ROOT
  (S
    (S
      (S
        (PP (IN In)
          (NP (JJ modern) (NNS times)))
        (, ,)
        (NP (JJ humanist) (NNS movements))
        (VP (VBP are)
          (ADVP (RB typically))
          (VP (VBN aligned)
            (PP (IN with)
              (NP (NN secularism))))))
      (, ,)
      (CC and)
      (S
        (NP
          (NP (NN today))
          (`` ``)
          (NP (NNP Humanism))
          ('' ''))
        (ADVP (RB typically))
        (VP (VBZ refers)
          (PP (TO to)
            (NP
              (NP (DT a) (JJ non-theistic) (NN life) (NN stance))
              (VP (VBN centred)
                (PP (IN on)
                  (NP (JJ human) (NN agency)))))))))
    (, ,)
    (CC and)
    (S
      (VP (VBG looking)
        (PP (TO to)
          (NP
            (NP (NN science))
            (PP (RB instead) (IN of)
              (NP (JJ religious) (NN dogma)))))
        (SBAR (IN in) (NN order)
          (S
            (VP (TO to)
              (VP (VB understand)
                (NP (DT the) (NN world))))))))
    (. .)))

case(times-3, In-1)
amod(times-3, modern-2)
nmod:in(aligned-9, times-3)
amod(movements-6, humanist-5)
nsubjpass(aligned-9, movements-6)
nsubjpass(looking-31, movements-6)
auxpass(aligned-9, are-7)
advmod(aligned-9, typically-8)
root(ROOT-0, aligned-9)
case(secularism-11, with-10)
nmod:with(aligned-9, secularism-11)
cc(aligned-9, and-13)
nsubj(refers-19, today-14)
dep(today-14, Humanism-16)
advmod(refers-19, typically-18)
conj:and(aligned-9, refers-19)
case(stance-24, to-20)
det(stance-24, a-21)
amod(stance-24, non-theistic-22)
compound(stance-24, life-23)
nmod:to(refers-19, stance-24)
acl(stance-24, centred-25)
case(agency-28, on-26)
amod(agency-28, human-27)
nmod:on(centred-25, agency-28)
cc(aligned-9, and-30)
conj:and(aligned-9, looking-31)
case(science-33, to-32)
nmod:to(looking-31, science-33)
case(dogma-37, instead-34)
mwe(instead-34, of-35)
amod(dogma-37, religious-36)
nmod:instead_of(science-33, dogma-37)
mark(understand-41, in-38)
mwe(in-38, order-39)
mark(understand-41, to-40)
advcl(looking-31, understand-41)
det(world-43, the-42)
dobj(understand-41, world-43)

(ROOT
  (SINV
    (VP (VBZ -LSB-))
    (NP (CD 2) (NN -RSB-))))

root(ROOT-0, -LSB--1)
nummod(-RSB--3, 2-2)
nsubj(-LSB--1, -RSB--3)

(ROOT
  (S
    (NP
      (NP (DT The) (NN meaning))
      (PP (IN of)
        (NP
          (NP (NN life))
          (PP (IN as)
            (NP (PRP we))))))
    (VP (VBP perceive)
      (SBAR
        (S
          (NP (PRP it))
          (VP (VBZ is)
            (VP (VBN derived)
              (PP (IN from)
                (NP
                  (NP
                    (NP (PRP$ our)
                      (ADJP (JJ philosophical)
                        (CC and)
                        (JJ religious))
                      (NN contemplation))
                    (PP (IN of)))
                  (, ,)
                  (CC and)
                  (NP
                    (NP (JJ scientific) (NNS inquiries))
                    (PP (IN about)
                      (NP
                        (NP (NN existence))
                        (, ,)
                        (NP (JJ social) (NNS ties))
                        (, ,)
                        (NP (NN consciousness))
                        (, ,)
                        (CC and)
                        (NP (NN happiness))))))))))))
    (. .)))

det(meaning-2, The-1)
nsubj(perceive-7, meaning-2)
case(life-4, of-3)
nmod:of(meaning-2, life-4)
case(we-6, as-5)
nmod:as(life-4, we-6)
root(ROOT-0, perceive-7)
nsubjpass(derived-10, it-8)
auxpass(derived-10, is-9)
ccomp(perceive-7, derived-10)
case(contemplation-16, from-11)
nmod:poss(contemplation-16, our-12)
amod(contemplation-16, philosophical-13)
cc(philosophical-13, and-14)
conj:and(philosophical-13, religious-15)
amod(contemplation-16, religious-15)
nmod:from(derived-10, contemplation-16)
acl(contemplation-16, of-17)
cc(contemplation-16, and-19)
amod(inquiries-21, scientific-20)
nmod:from(derived-10, inquiries-21)
conj:and(contemplation-16, inquiries-21)
case(existence-23, about-22)
nmod:about(inquiries-21, existence-23)
amod(ties-26, social-25)
nmod:about(inquiries-21, ties-26)
conj:and(existence-23, ties-26)
nmod:about(inquiries-21, consciousness-28)
conj:and(existence-23, consciousness-28)
cc(existence-23, and-30)
nmod:about(inquiries-21, happiness-31)
conj:and(existence-23, happiness-31)

(ROOT
  (S
    (NP (JJ Many) (JJ other) (NNS issues))
    (VP (VBP are)
      (ADVP (RB also))
      (VP (VBN involved) (, ,)
        (PP (JJ such) (IN as)
          (NP
            (NP (JJ symbolic) (NN meaning))
            (, ,)
            (NP (NN ontology))
            (, ,)
            (NP (NN value))
            (, ,)
            (NP (NN purpose))
            (, ,)
            (NP (NNS ethics))
            (, ,)
            (ADJP (JJ good)
              (CC and)
              (JJ evil))
            (, ,)
            (NP (JJ free) (NN will))
            (, ,)
            (NP
              (NP (DT the) (NN existence))
              (PP (IN of)
                (NP (CD one)
                  (CC or)
                  (JJ multiple) (NNS gods))))
            (, ,)
            (NP
              (NP (NNS conceptions))
              (PP (IN of)
                (NP
                  (NP (NNP God))
                  (, ,)
                  (NP (DT the) (NN soul)))))
            (, ,)
            (CC and)
            (NP (DT the) (NN afterlife))))))
    (. .)))

amod(issues-3, Many-1)
amod(issues-3, other-2)
nsubjpass(involved-6, issues-3)
auxpass(involved-6, are-4)
advmod(involved-6, also-5)
root(ROOT-0, involved-6)
case(meaning-11, such-8)
mwe(such-8, as-9)
amod(meaning-11, symbolic-10)
nmod:such_as(involved-6, meaning-11)
nmod:such_as(involved-6, ontology-13)
conj:and(meaning-11, ontology-13)
nmod:such_as(involved-6, value-15)
conj:and(meaning-11, value-15)
nmod:such_as(involved-6, purpose-17)
conj:and(meaning-11, purpose-17)
nmod:such_as(involved-6, ethics-19)
conj:and(meaning-11, ethics-19)
amod(meaning-11, good-21)
cc(good-21, and-22)
amod(meaning-11, evil-23)
conj:and(good-21, evil-23)
amod(will-26, free-25)
nmod:such_as(involved-6, will-26)
conj:and(meaning-11, will-26)
det(existence-29, the-28)
nmod:such_as(involved-6, existence-29)
conj:and(meaning-11, existence-29)
case(gods-34, of-30)
compound(gods-34, one-31)
cc(one-31, or-32)
conj:or(one-31, multiple-33)
compound(gods-34, multiple-33)
nmod:of(existence-29, gods-34)
nmod:such_as(involved-6, conceptions-36)
conj:and(meaning-11, conceptions-36)
case(God-38, of-37)
nmod:of(conceptions-36, God-38)
det(soul-41, the-40)
appos(God-38, soul-41)
cc(meaning-11, and-43)
det(afterlife-45, the-44)
nmod:such_as(involved-6, afterlife-45)
conj:and(meaning-11, afterlife-45)

(ROOT
  (S
    (NP (NNP Scientific) (NNS contributions))
    (VP
      (VP (VBP focus)
        (ADVP (RB primarily))
        (PP (IN on)
          (S
            (VP (VBG describing)
              (NP (VBN related) (JJ empirical) (NNS facts))
              (PP (IN about)
                (NP (DT the) (NN universe)))
              (, ,)
              (S
                (VP (VBG exploring)
                  (NP (DT the) (NN context))))))))
      (CC and)
      (VP (VBD parameters)
        (S
          (VP (VBG concerning)
            (NP (DT the))
            (`` `)
            (NP (WRB how))))
        ('' ')
        (PP (IN of)
          (NP (NN life)))))
    (. .)))

compound(contributions-2, Scientific-1)
nsubj(focus-3, contributions-2)
nsubj(parameters-18, contributions-2)
root(ROOT-0, focus-3)
advmod(focus-3, primarily-4)
mark(describing-6, on-5)
advcl(focus-3, describing-6)
amod(facts-9, related-7)
amod(facts-9, empirical-8)
dobj(describing-6, facts-9)
case(universe-12, about-10)
det(universe-12, the-11)
nmod:about(describing-6, universe-12)
advcl(describing-6, exploring-14)
det(context-16, the-15)
dobj(exploring-14, context-16)
cc(focus-3, and-17)
conj:and(focus-3, parameters-18)
xcomp(parameters-18, concerning-19)
dobj(concerning-19, the-20)
dobj(concerning-19, how-22)
case(life-25, of-24)
nmod:of(parameters-18, life-25)

(ROOT
  (S
    (NP (NNP Science))
    (ADVP (RB also))
    (VP
      (VP (VBZ studies))
      (CC and)
      (VP (MD can)
        (VP (VB provide)
          (NP (NNS recommendations))
          (PP (IN for)
            (NP
              (NP
                (NP (DT the) (NN pursuit))
                (PP (IN of)
                  (NP (NN well-being))))
              (CC and)
              (NP
                (NP (DT a) (VBN related) (NN conception))
                (PP (IN of)
                  (NP (NN morality)))))))))
    (. .)))

nsubj(studies-3, Science-1)
nsubj(provide-6, Science-1)
advmod(studies-3, also-2)
root(ROOT-0, studies-3)
cc(studies-3, and-4)
aux(provide-6, can-5)
conj:and(studies-3, provide-6)
dobj(provide-6, recommendations-7)
case(pursuit-10, for-8)
det(pursuit-10, the-9)
nmod:for(provide-6, pursuit-10)
case(well-being-12, of-11)
nmod:of(pursuit-10, well-being-12)
cc(pursuit-10, and-13)
det(conception-16, a-14)
amod(conception-16, related-15)
nmod:for(provide-6, conception-16)
conj:and(pursuit-10, conception-16)
case(morality-18, of-17)
nmod:of(conception-16, morality-18)

(ROOT
  (S
    (NP (DT An) (JJ alternative) (, ,) (JJ humanistic) (NN approach))
    (VP (VBZ poses)
      (NP
        (NP (DT the) (NN question))
        (`` ``)
        (SBAR
          (WHNP (WP What))
          (S
            (VP (VBZ is)
              (NP
                (NP (DT the) (NN meaning))
                (PP (IN of)
                  (NP (PRP$ my) (NN life)))))))))
    (. ?) ('' '')))

det(approach-5, An-1)
amod(approach-5, alternative-2)
amod(approach-5, humanistic-4)
nsubj(poses-6, approach-5)
root(ROOT-0, poses-6)
det(question-8, the-7)
dobj(poses-6, question-8)
nsubj(meaning-13, question-8)
ref(question-8, What-10)
cop(meaning-13, is-11)
det(meaning-13, the-12)
acl:relcl(question-8, meaning-13)
case(life-16, of-14)
nmod:poss(life-16, my-15)
nmod:of(meaning-13, life-16)

(ROOT
  (FRAG
    (NP
      (NP (DT The) (NN meaning))
      (PP (IN of)
        (NP
          (NP (NN life))
          (, ,)
          (CC or)
          (NP
            (NP (DT the) (NN answer))
            (PP (TO to)
              (NP
                (NP (DT the) (NN question))
                (`` ``)
                (SBAR
                  (WHNP (WP What))
                  (S
                    (VP (VBZ is)
                      (NP
                        (NP (DT the) (NN meaning))
                        (PP (IN of)
                          (NP (NN life)))))))))))))
    (. ?) ('' '')))

det(meaning-2, The-1)
root(ROOT-0, meaning-2)
case(life-4, of-3)
nmod:of(meaning-2, life-4)
cc(life-4, or-6)
det(answer-8, the-7)
nmod:of(meaning-2, answer-8)
conj:or(life-4, answer-8)
case(question-11, to-9)
det(question-11, the-10)
nmod:to(answer-8, question-11)
nsubj(meaning-16, question-11)
ref(question-11, What-13)
cop(meaning-16, is-14)
det(meaning-16, the-15)
acl:relcl(question-11, meaning-16)
case(life-18, of-17)
nmod:of(meaning-16, life-18)

(ROOT
  (PRN (, ,)
    (S
      (VP (VBZ is)
        (NP
          (NP (DT a)
            (ADJP (JJ philosophical)
              (CC and)
              (JJ spiritual))
            (NN conception))
          (PP (IN of)
            (NP
              (NP (DT the) (NN significance))
              (PP (IN of)
                (NP (VBG living)
                  (CC or)
                  (NN existence)))))
          (SBAR (IN in)
            (FRAG
              (ADJP (JJ general))
              (. .))))))))

cop(conception-7, is-2)
det(conception-7, a-3)
amod(conception-7, philosophical-4)
cc(philosophical-4, and-5)
conj:and(philosophical-4, spiritual-6)
amod(conception-7, spiritual-6)
root(ROOT-0, conception-7)
case(significance-10, of-8)
det(significance-10, the-9)
nmod:of(conception-7, significance-10)
case(living-12, of-11)
nmod:of(significance-10, living-12)
cc(living-12, or-13)
nmod:of(significance-10, existence-14)
conj:or(living-12, existence-14)
mark(general-16, in-15)
dep(conception-7, general-16)

(ROOT
  (S
    (NP
      (NP (DT The) (NN question))
      (VP (VBG seeking)
        (NP
          (NP (DT the) (NN meaning))
          (PP (IN of)
            (NP (NN life))))))
    (VP (MD can)
      (ADVP (RB also))
      (VP (VB be)
        (VP (VBN expressed)
          (PP (IN in)
            (NP
              (NP (JJ different) (NNS forms))
              (, ,)
              (NP
                (NP (JJ such))
                (PP (IN as) (`` ``)
                  (SBARQ
                    (WHNP (WP What))
                    (SQ (MD should)
                      (NP (PRP I))
                      (VP (VB do)))
                    (. ?))
                  ('' ''))))))))))

det(question-2, The-1)
nsubjpass(expressed-11, question-2)
acl(question-2, seeking-3)
det(meaning-5, the-4)
dobj(seeking-3, meaning-5)
case(life-7, of-6)
nmod:of(meaning-5, life-7)
aux(expressed-11, can-8)
advmod(expressed-11, also-9)
auxpass(expressed-11, be-10)
root(ROOT-0, expressed-11)
case(forms-14, in-12)
amod(forms-14, different-13)
nmod:in(expressed-11, forms-14)
appos(forms-14, such-16)
case(do-22, as-17)
dobj(do-22, What-19)
aux(do-22, should-20)
nsubj(do-22, I-21)
acl:as(such-16, do-22)

(ROOT
  (S
    (VP (VB ,)
      (SBAR
        (SBARQ (`` ``)
          (WHADVP (WRB Why))
          (SQ (VBP are)
            (NP (PRP we))
            (NP (RB here)))
          (. ?) ('' ''))))))

root(ROOT-0, ,-1)
advmod(are-4, Why-3)
dep(,-1, are-4)
nsubj(are-4, we-5)
dep(are-4, here-6)

(ROOT
  (PRN (, ,)
    (S (`` ``)
      (NP (WP What))
      (VP (VBZ is)
        (NP
          (NP (NN life))
          (UCP
            (ADJP (RB all) (RB about) (. ?)))))
      ('' ''))))

nsubj(life-5, What-3)
cop(life-5, is-4)
root(ROOT-0, life-5)
advmod(about-7, all-6)
amod(life-5, about-7)

(ROOT
  (PRN (, ,)
    (S
      (VP (VB and)
        (SBAR
          (SBARQ (`` ``)
            (WHNP (WP What))
            (SQ (VBZ is)
              (NP
                (NP (DT the) (NN purpose))
                (PP (IN of)
                  (NP (NN existence)))))
            (. ?) ('' '')))))))

root(ROOT-0, and-2)
dep(and-2, What-4)
cop(What-4, is-5)
det(purpose-7, the-6)
nsubj(What-4, purpose-7)
case(existence-9, of-8)
nmod:of(purpose-7, existence-9)

(ROOT
  (FRAG (CC or)
    (ADVP (RB even))
    (VP (`` ``) (VBZ Does)
      (NP (NN life))
      (VP (VB exist)
        (ADVP (IN at) (DT all))))
    (. ?) ('' '')))

cc(exist-6, or-1)
advmod(exist-6, even-2)
aux(exist-6, Does-4)
dobj(exist-6, life-5)
root(ROOT-0, exist-6)
case(all-8, at-7)
nmod:at(exist-6, all-8)

(ROOT
  (S
    (NP (EX There))
    (VP (VBP have)
      (VP (VBN been)
        (NP
          (NP (DT a) (JJ large) (NN number))
          (PP (IN of)
            (NP (JJ proposed) (NNS answers))))
        (PP (TO to)
          (NP
            (NP (DT these) (NNS questions))
            (PP (IN from)
              (NP (JJ many) (JJ different) (JJ cultural)
                (CC and)
                (JJ ideological) (NNS backgrounds)))))))
    (. .)))

expl(number-6, There-1)
aux(number-6, have-2)
cop(number-6, been-3)
det(number-6, a-4)
amod(number-6, large-5)
root(ROOT-0, number-6)
case(answers-9, of-7)
amod(answers-9, proposed-8)
nmod:of(number-6, answers-9)
case(questions-12, to-10)
det(questions-12, these-11)
nmod:to(number-6, questions-12)
case(cultural-16, from-13)
amod(cultural-16, many-14)
amod(cultural-16, different-15)
nmod:from(questions-12, cultural-16)
cc(cultural-16, and-17)
amod(backgrounds-19, ideological-18)
nmod:from(questions-12, backgrounds-19)
conj:and(cultural-16, backgrounds-19)

(ROOT
  (S
    (NP
      (NP (DT The) (NN search))
      (PP (IN for)
        (NP
          (NP (NN life) (POS 's))
          (NN meaning))))
    (VP (VBZ has)
      (VP (VBN produced)
        (NP
          (ADJP
            (ADJP (RB much) (JJ philosophical))
            (, ,)
            (ADJP (JJ scientific))
            (, ,)
            (CC and)
            (ADJP (JJ theological)))
          (NN speculation))
        (PP (IN throughout)
          (NP (NN history)))))
    (. .)))

det(search-2, The-1)
nsubj(produced-8, search-2)
case(meaning-6, for-3)
nmod:poss(meaning-6, life-4)
case(life-4, 's-5)
nmod:for(search-2, meaning-6)
aux(produced-8, has-7)
root(ROOT-0, produced-8)
advmod(philosophical-10, much-9)
amod(speculation-16, philosophical-10)
conj:and(philosophical-10, scientific-12)
amod(speculation-16, scientific-12)
cc(philosophical-10, and-14)
conj:and(philosophical-10, theological-15)
amod(speculation-16, theological-15)
dobj(produced-8, speculation-16)
case(history-18, throughout-17)
nmod:throughout(produced-8, history-18)


[15/12/2015 - 14:40:19] (::1|)  => hello
[15/12/2015 - 14:40:19] (::1|)  => 
[15/12/2015 - 14:40:21] (::1|)  => hello
[15/12/2015 - 14:40:21] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 14:40:21] (::1|)  => hello
[15/12/2015 - 14:40:21] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 14:40:22] (::1|)  => hello
[15/12/2015 - 14:40:22] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 14:40:22] (::1|)  => hello
[15/12/2015 - 14:40:22] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 14:40:22] (::1|)  => hello
[15/12/2015 - 14:40:22] (::1|)  => _CMD : 998a3516-7405-4310-91ea-cf640c5dee9f
stanford-parser : eab0cebc-d04f-461f-bda5-6e94d23cee18
pipeline-test : 33b85e3b-d9a5-44f4-a476-0e546f05f74b
pipeline-test : 34cc55db-73a8-4635-b5cb-160b55232317
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
pipeline-test : 366e661c-1747-4384-8282-e8328e36e4c1
pipeline-test : d350e7c2-7448-40be-983f-46a54eb0421b
pipeline-test : 244a3f68-13d0-4df2-8be4-11f8c91a431c
pipeline-test : 79468b25-1562-4618-91ee-70269095c24a
pipeline-test : 56648286-47fd-41d4-b856-86ce9833e04f
pipeline-test : 6eb2b4fb-29fd-4341-9480-f334a029d0bd
pipeline-test : 83f261b0-3959-40fe-b66f-9e313d8b3bdc
pipeline-test : d0ab9049-e963-4204-9c51-8540d5a648fb
pipeline-test : 9e50574b-afc7-4de3-8b37-2fc198e5763b
pipeline-test : 75a7a073-d7d4-40ae-90db-48db087c3022
pipeline-test : 7e312d6d-42e3-4441-b2ac-02a53a2bf188

[15/12/2015 - 14:40:22] (::1|)  => hello
[15/12/2015 - 14:40:22] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 15:0:39] (::1|)  => hello
[15/12/2015 - 15:0:39] (::1|)  => 
[15/12/2015 - 15:0:40] (::1|)  => hello
[15/12/2015 - 15:0:40] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 15:0:41] (::1|)  => hello
[15/12/2015 - 15:0:41] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 15:0:42] (::1|)  => hello
[15/12/2015 - 15:0:42] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 15:0:42] (::1|)  => hello
[15/12/2015 - 15:0:42] (::1|)  => _CMD : 998a3516-7405-4310-91ea-cf640c5dee9f
stanford-parser : eab0cebc-d04f-461f-bda5-6e94d23cee18
pipeline-test : 33b85e3b-d9a5-44f4-a476-0e546f05f74b
pipeline-test : 34cc55db-73a8-4635-b5cb-160b55232317
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
pipeline-test : 366e661c-1747-4384-8282-e8328e36e4c1
pipeline-test : d350e7c2-7448-40be-983f-46a54eb0421b
pipeline-test : 244a3f68-13d0-4df2-8be4-11f8c91a431c
pipeline-test : 79468b25-1562-4618-91ee-70269095c24a
pipeline-test : 56648286-47fd-41d4-b856-86ce9833e04f
pipeline-test : 6eb2b4fb-29fd-4341-9480-f334a029d0bd
pipeline-test : 83f261b0-3959-40fe-b66f-9e313d8b3bdc
pipeline-test : d0ab9049-e963-4204-9c51-8540d5a648fb
pipeline-test : 9e50574b-afc7-4de3-8b37-2fc198e5763b
pipeline-test : 75a7a073-d7d4-40ae-90db-48db087c3022
pipeline-test : 7e312d6d-42e3-4441-b2ac-02a53a2bf188

[15/12/2015 - 15:0:42] (::1|)  => hello
[15/12/2015 - 15:0:42] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 15:0:42] (::1|)  => hello
[15/12/2015 - 15:0:42] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 15:0:45] (::1|)  => hello
[15/12/2015 - 15:0:55] (::1|)  => ok
[15/12/2015 - 15:14:14] (::1|)  => hello
[15/12/2015 - 15:14:14] (::1|)  => 
[15/12/2015 - 15:14:15] (::1|)  => hello
[15/12/2015 - 15:14:15] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 15:14:16] (::1|)  => hello
[15/12/2015 - 15:14:16] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 15:14:16] (::1|)  => hello
[15/12/2015 - 15:14:16] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 15:14:16] (::1|)  => hello
[15/12/2015 - 15:14:16] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 15:14:16] (::1|)  => hello
[15/12/2015 - 15:14:16] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 15:14:16] (::1|)  => hello
[15/12/2015 - 15:14:16] (::1|)  => _CMD : 998a3516-7405-4310-91ea-cf640c5dee9f
stanford-parser : eab0cebc-d04f-461f-bda5-6e94d23cee18
pipeline-test : 33b85e3b-d9a5-44f4-a476-0e546f05f74b
pipeline-test : 34cc55db-73a8-4635-b5cb-160b55232317
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
pipeline-test : 366e661c-1747-4384-8282-e8328e36e4c1
pipeline-test : d350e7c2-7448-40be-983f-46a54eb0421b
pipeline-test : 244a3f68-13d0-4df2-8be4-11f8c91a431c
pipeline-test : 79468b25-1562-4618-91ee-70269095c24a
pipeline-test : 56648286-47fd-41d4-b856-86ce9833e04f
pipeline-test : 6eb2b4fb-29fd-4341-9480-f334a029d0bd
pipeline-test : 83f261b0-3959-40fe-b66f-9e313d8b3bdc
pipeline-test : d0ab9049-e963-4204-9c51-8540d5a648fb
pipeline-test : 9e50574b-afc7-4de3-8b37-2fc198e5763b
pipeline-test : 75a7a073-d7d4-40ae-90db-48db087c3022
pipeline-test : 7e312d6d-42e3-4441-b2ac-02a53a2bf188

[15/12/2015 - 15:14:20] (::1|)  => hello
[15/12/2015 - 15:14:30] (::1|)  => ok
[15/12/2015 - 15:15:14] (::1|)  => hello
[15/12/2015 - 15:15:14] (::1|)  => 
[15/12/2015 - 15:15:15] (::1|)  => hello
[15/12/2015 - 15:15:15] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 15:15:15] (::1|)  => hello
[15/12/2015 - 15:15:15] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 15:15:16] (::1|)  => hello
[15/12/2015 - 15:15:16] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 15:15:16] (::1|)  => hello
[15/12/2015 - 15:15:16] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 15:15:16] (::1|)  => hello
[15/12/2015 - 15:15:16] (::1|)  => _CMD : 998a3516-7405-4310-91ea-cf640c5dee9f
stanford-parser : eab0cebc-d04f-461f-bda5-6e94d23cee18
pipeline-test : 33b85e3b-d9a5-44f4-a476-0e546f05f74b
pipeline-test : 34cc55db-73a8-4635-b5cb-160b55232317
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
pipeline-test : 366e661c-1747-4384-8282-e8328e36e4c1
pipeline-test : d350e7c2-7448-40be-983f-46a54eb0421b
pipeline-test : 244a3f68-13d0-4df2-8be4-11f8c91a431c
pipeline-test : 79468b25-1562-4618-91ee-70269095c24a
pipeline-test : 56648286-47fd-41d4-b856-86ce9833e04f
pipeline-test : 6eb2b4fb-29fd-4341-9480-f334a029d0bd
pipeline-test : 83f261b0-3959-40fe-b66f-9e313d8b3bdc
pipeline-test : d0ab9049-e963-4204-9c51-8540d5a648fb
pipeline-test : 9e50574b-afc7-4de3-8b37-2fc198e5763b
pipeline-test : 75a7a073-d7d4-40ae-90db-48db087c3022
pipeline-test : 7e312d6d-42e3-4441-b2ac-02a53a2bf188

[15/12/2015 - 15:15:16] (::1|)  => hello
[15/12/2015 - 15:15:16] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 15:15:22] (::1|)  => hello
[15/12/2015 - 15:15:32] (::1|)  => ok
[15/12/2015 - 15:43:47] (::1|)  => hello
[15/12/2015 - 15:43:47] (::1|)  => 
[15/12/2015 - 15:43:49] (::1|)  => hello
[15/12/2015 - 15:43:49] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 15:43:49] (::1|)  => hello
[15/12/2015 - 15:43:49] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 15:43:50] (::1|)  => hello
[15/12/2015 - 15:43:50] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 15:43:50] (::1|)  => hello
[15/12/2015 - 15:43:50] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 15:43:50] (::1|)  => hello
[15/12/2015 - 15:43:50] (::1|)  => _CMD : 998a3516-7405-4310-91ea-cf640c5dee9f
stanford-parser : eab0cebc-d04f-461f-bda5-6e94d23cee18
pipeline-test : 33b85e3b-d9a5-44f4-a476-0e546f05f74b
pipeline-test : 34cc55db-73a8-4635-b5cb-160b55232317
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
pipeline-test : 366e661c-1747-4384-8282-e8328e36e4c1
pipeline-test : d350e7c2-7448-40be-983f-46a54eb0421b
pipeline-test : 244a3f68-13d0-4df2-8be4-11f8c91a431c
pipeline-test : 79468b25-1562-4618-91ee-70269095c24a
pipeline-test : 56648286-47fd-41d4-b856-86ce9833e04f
pipeline-test : 6eb2b4fb-29fd-4341-9480-f334a029d0bd
pipeline-test : 83f261b0-3959-40fe-b66f-9e313d8b3bdc
pipeline-test : d0ab9049-e963-4204-9c51-8540d5a648fb
pipeline-test : 9e50574b-afc7-4de3-8b37-2fc198e5763b
pipeline-test : 75a7a073-d7d4-40ae-90db-48db087c3022
pipeline-test : 7e312d6d-42e3-4441-b2ac-02a53a2bf188

[15/12/2015 - 15:43:50] (::1|)  => hello
[15/12/2015 - 15:43:50] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 15:43:55] (::1|)  => hello
[15/12/2015 - 15:44:5] (::1|)  => ok
[15/12/2015 - 15:50:2] (::1|)  => hello
[15/12/2015 - 15:50:2] (::1|)  => 
[15/12/2015 - 15:50:4] (::1|)  => hello
[15/12/2015 - 15:50:4] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 15:50:4] (::1|)  => hello
[15/12/2015 - 15:50:4] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 15:50:5] (::1|)  => hello
[15/12/2015 - 15:50:5] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 15:50:5] (::1|)  => hello
[15/12/2015 - 15:50:5] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 15:50:5] (::1|)  => hello
[15/12/2015 - 15:50:5] (::1|)  => _CMD : 998a3516-7405-4310-91ea-cf640c5dee9f
stanford-parser : eab0cebc-d04f-461f-bda5-6e94d23cee18
pipeline-test : 33b85e3b-d9a5-44f4-a476-0e546f05f74b
pipeline-test : 34cc55db-73a8-4635-b5cb-160b55232317
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
pipeline-test : 366e661c-1747-4384-8282-e8328e36e4c1
pipeline-test : d350e7c2-7448-40be-983f-46a54eb0421b
pipeline-test : 244a3f68-13d0-4df2-8be4-11f8c91a431c
pipeline-test : 79468b25-1562-4618-91ee-70269095c24a
pipeline-test : 56648286-47fd-41d4-b856-86ce9833e04f
pipeline-test : 6eb2b4fb-29fd-4341-9480-f334a029d0bd
pipeline-test : 83f261b0-3959-40fe-b66f-9e313d8b3bdc
pipeline-test : d0ab9049-e963-4204-9c51-8540d5a648fb
pipeline-test : 9e50574b-afc7-4de3-8b37-2fc198e5763b
pipeline-test : 75a7a073-d7d4-40ae-90db-48db087c3022
pipeline-test : 7e312d6d-42e3-4441-b2ac-02a53a2bf188

[15/12/2015 - 15:50:5] (::1|)  => hello
[15/12/2015 - 15:50:6] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 15:50:7] (::1|)  => hello
[15/12/2015 - 15:50:7] (::1|)  => 
[15/12/2015 - 15:50:8] (::1|)  => hello
[15/12/2015 - 15:50:8] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 15:50:9] (::1|)  => hello
[15/12/2015 - 15:50:9] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 15:50:9] (::1|)  => hello
[15/12/2015 - 15:50:9] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 15:50:9] (::1|)  => hello
[15/12/2015 - 15:50:9] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 15:50:9] (::1|)  => hello
[15/12/2015 - 15:50:10] (::1|)  => _CMD : 998a3516-7405-4310-91ea-cf640c5dee9f
stanford-parser : eab0cebc-d04f-461f-bda5-6e94d23cee18
pipeline-test : 33b85e3b-d9a5-44f4-a476-0e546f05f74b
pipeline-test : 34cc55db-73a8-4635-b5cb-160b55232317
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
pipeline-test : 366e661c-1747-4384-8282-e8328e36e4c1
pipeline-test : d350e7c2-7448-40be-983f-46a54eb0421b
pipeline-test : 244a3f68-13d0-4df2-8be4-11f8c91a431c
pipeline-test : 79468b25-1562-4618-91ee-70269095c24a
pipeline-test : 56648286-47fd-41d4-b856-86ce9833e04f
pipeline-test : 6eb2b4fb-29fd-4341-9480-f334a029d0bd
pipeline-test : 83f261b0-3959-40fe-b66f-9e313d8b3bdc
pipeline-test : d0ab9049-e963-4204-9c51-8540d5a648fb
pipeline-test : 9e50574b-afc7-4de3-8b37-2fc198e5763b
pipeline-test : 75a7a073-d7d4-40ae-90db-48db087c3022
pipeline-test : 7e312d6d-42e3-4441-b2ac-02a53a2bf188

[15/12/2015 - 15:50:10] (::1|)  => hello
[15/12/2015 - 15:50:10] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 15:50:13] (::1|)  => hello
[15/12/2015 - 15:50:23] (::1|)  => ok
[15/12/2015 - 15:59:28] (::1|)  => hello
[15/12/2015 - 15:59:28] (::1|)  => _CMD : 998a3516-7405-4310-91ea-cf640c5dee9f
stanford-parser : eab0cebc-d04f-461f-bda5-6e94d23cee18
pipeline-test : 33b85e3b-d9a5-44f4-a476-0e546f05f74b
pipeline-test : 34cc55db-73a8-4635-b5cb-160b55232317

[15/12/2015 - 15:59:40] (::1|)  => hello
[15/12/2015 - 15:59:40] (::1|)  =>  : Waiting
[15/12/2015 - 15:59:56] (::1|)  => hello
[15/12/2015 - 15:59:56] (::1|)  => _CMD : Exited(0)
[15/12/2015 - 16:0:6] (::1|)  => hello
[15/12/2015 - 16:0:6] (::1|)  => _CMD : 998a3516-7405-4310-91ea-cf640c5dee9f
stanford-parser : eab0cebc-d04f-461f-bda5-6e94d23cee18
pipeline-test : 33b85e3b-d9a5-44f4-a476-0e546f05f74b
pipeline-test : 34cc55db-73a8-4635-b5cb-160b55232317
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
pipeline-test : 366e661c-1747-4384-8282-e8328e36e4c1
pipeline-test : d350e7c2-7448-40be-983f-46a54eb0421b
pipeline-test : 244a3f68-13d0-4df2-8be4-11f8c91a431c
pipeline-test : 79468b25-1562-4618-91ee-70269095c24a
pipeline-test : 56648286-47fd-41d4-b856-86ce9833e04f
pipeline-test : 6eb2b4fb-29fd-4341-9480-f334a029d0bd
pipeline-test : 83f261b0-3959-40fe-b66f-9e313d8b3bdc
pipeline-test : d0ab9049-e963-4204-9c51-8540d5a648fb
pipeline-test : 9e50574b-afc7-4de3-8b37-2fc198e5763b
pipeline-test : 75a7a073-d7d4-40ae-90db-48db087c3022
pipeline-test : 7e312d6d-42e3-4441-b2ac-02a53a2bf188

[15/12/2015 - 16:0:10] (::1|)  => hello
[15/12/2015 - 16:0:10] (::1|)  => _CMD : 998a3516-7405-4310-91ea-cf640c5dee9f
stanford-parser : eab0cebc-d04f-461f-bda5-6e94d23cee18
pipeline-test : 33b85e3b-d9a5-44f4-a476-0e546f05f74b
pipeline-test : 34cc55db-73a8-4635-b5cb-160b55232317

[15/12/2015 - 16:0:13] (::1|)  => hello
[15/12/2015 - 16:0:13] (::1|)  => _CMD : 998a3516-7405-4310-91ea-cf640c5dee9f
stanford-parser : eab0cebc-d04f-461f-bda5-6e94d23cee18
pipeline-test : 33b85e3b-d9a5-44f4-a476-0e546f05f74b
pipeline-test : 34cc55db-73a8-4635-b5cb-160b55232317

[15/12/2015 - 16:1:6] (::1|)  => hello
[15/12/2015 - 16:1:7] (::1|)  => 1cc08738-f37d-429a-848a-4a04d04dfbb7
[15/12/2015 - 16:2:4] (::1|)  => hello
[15/12/2015 - 16:2:4] (::1|)  =>  : Waiting
[15/12/2015 - 16:2:15] (::1|)  => hello
[15/12/2015 - 16:2:15] (::1|)  =>  : Waiting
[15/12/2015 - 16:3:12] (::1|)  => hello
[15/12/2015 - 16:3:12] (::1|)  => _CMD : 2d2f12df-589c-4de4-b4e4-f7f38e796d5f
_CMD : 10a2fe23-fa5c-455d-aa21-aedb2ae5047f
pipeline-test : 1cc08738-f37d-429a-848a-4a04d04dfbb7

[15/12/2015 - 16:3:24] (::1|)  => hello
[15/12/2015 - 16:3:24] (::1|)  =>  : Waiting
[15/12/2015 - 16:4:5] (::1|)  => hello
[15/12/2015 - 16:4:25] (::1|)  => timeout
[15/12/2015 - 16:8:26] (::1|)  => hello
[15/12/2015 - 16:8:26] (::1|)  => 4ad76341-6e86-49a4-beb1-bc88d6f131a9
[15/12/2015 - 16:10:33] (::1|)  => hello
[15/12/2015 - 16:10:33] (::1|)  => _CMD : 2d2f12df-589c-4de4-b4e4-f7f38e796d5f
_CMD : 10a2fe23-fa5c-455d-aa21-aedb2ae5047f
pipeline-test : 1cc08738-f37d-429a-848a-4a04d04dfbb7

[15/12/2015 - 16:10:36] (::1|)  => hello
[15/12/2015 - 16:10:36] (::1|)  => _CMD : 2d2f12df-589c-4de4-b4e4-f7f38e796d5f
_CMD : 10a2fe23-fa5c-455d-aa21-aedb2ae5047f
pipeline-test : 1cc08738-f37d-429a-848a-4a04d04dfbb7
pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
pipeline-test : 366e661c-1747-4384-8282-e8328e36e4c1
pipeline-test : d350e7c2-7448-40be-983f-46a54eb0421b
pipeline-test : 244a3f68-13d0-4df2-8be4-11f8c91a431c
pipeline-test : 79468b25-1562-4618-91ee-70269095c24a
pipeline-test : 56648286-47fd-41d4-b856-86ce9833e04f
pipeline-test : 6eb2b4fb-29fd-4341-9480-f334a029d0bd
pipeline-test : 83f261b0-3959-40fe-b66f-9e313d8b3bdc
pipeline-test : d0ab9049-e963-4204-9c51-8540d5a648fb
pipeline-test : 9e50574b-afc7-4de3-8b37-2fc198e5763b
pipeline-test : 75a7a073-d7d4-40ae-90db-48db087c3022
pipeline-test : 7e312d6d-42e3-4441-b2ac-02a53a2bf188
pipeline-test : 34cc55db-73a8-4635-b5cb-160b55232317
pipeline-test : 33b85e3b-d9a5-44f4-a476-0e546f05f74b
pipeline-test : 4ad76341-6e86-49a4-beb1-bc88d6f131a9

[15/12/2015 - 16:10:48] (::1|)  => hello
[15/12/2015 - 16:10:48] (::1|)  =>  : Waiting
[15/12/2015 - 16:16:20] (::1|)  => hello
[15/12/2015 - 16:16:20] (::1|)  => _CMD : 2d2f12df-589c-4de4-b4e4-f7f38e796d5f
_CMD : 10a2fe23-fa5c-455d-aa21-aedb2ae5047f
pipeline-test : 4ad76341-6e86-49a4-beb1-bc88d6f131a9
pipeline-test : 1cc08738-f37d-429a-848a-4a04d04dfbb7

[15/12/2015 - 16:16:24] (::1|)  => hello
[15/12/2015 - 16:16:44] (::1|)  => timeout
[15/12/2015 - 16:22:45] (::1|)  => hello
[15/12/2015 - 16:22:45] (::1|)  => _CMD : 2d2f12df-589c-4de4-b4e4-f7f38e796d5f
_CMD : 10a2fe23-fa5c-455d-aa21-aedb2ae5047f
pipeline-test : 4ad76341-6e86-49a4-beb1-bc88d6f131a9
pipeline-test : 1cc08738-f37d-429a-848a-4a04d04dfbb7

[15/12/2015 - 16:24:6] (::1|)  => hello
[15/12/2015 - 16:24:7] (::1|)  => 0c32096f-9958-47df-9370-3892fc6c7b45
[15/12/2015 - 16:25:17] (::1|)  => hello
[15/12/2015 - 16:25:18] (::1|)  => 
[15/12/2015 - 16:25:22] (::1|)  => hello
[15/12/2015 - 16:25:22] (::1|)  => pipeline-test : 1c88156d-30dc-48ac-af3b-3f2d805f2f81
pipeline-test : 366e661c-1747-4384-8282-e8328e36e4c1
pipeline-test : d350e7c2-7448-40be-983f-46a54eb0421b
pipeline-test : 244a3f68-13d0-4df2-8be4-11f8c91a431c
pipeline-test : 79468b25-1562-4618-91ee-70269095c24a
pipeline-test : 56648286-47fd-41d4-b856-86ce9833e04f
pipeline-test : 6eb2b4fb-29fd-4341-9480-f334a029d0bd
pipeline-test : 83f261b0-3959-40fe-b66f-9e313d8b3bdc
pipeline-test : d0ab9049-e963-4204-9c51-8540d5a648fb
pipeline-test : 9e50574b-afc7-4de3-8b37-2fc198e5763b
pipeline-test : 75a7a073-d7d4-40ae-90db-48db087c3022
pipeline-test : 7e312d6d-42e3-4441-b2ac-02a53a2bf188
pipeline-test : 34cc55db-73a8-4635-b5cb-160b55232317
pipeline-test : 33b85e3b-d9a5-44f4-a476-0e546f05f74b
pipeline-test : 1cc08738-f37d-429a-848a-4a04d04dfbb7
pipeline-test : 4ad76341-6e86-49a4-beb1-bc88d6f131a9
pipeline-test : 0c32096f-9958-47df-9370-3892fc6c7b45

[15/12/2015 - 16:25:27] (::1|)  => hello
[15/12/2015 - 16:25:30] (::1|)  => Error :null
[15/12/2015 - 16:25:48] (::1|)  => hello
[15/12/2015 - 16:26:8] (::1|)  => timeout
[15/12/2015 - 16:26:23] (::1|)  => hello
[15/12/2015 - 16:26:43] (::1|)  => timeout
[15/12/2015 - 16:28:34] (::1|)  => hello
[15/12/2015 - 16:28:35] (::1|)  => 2c1b69cf-aa46-4c31-98b6-812a7107a96f
[15/12/2015 - 16:30:30] (::1|)  => hello
[15/12/2015 - 16:30:30] (::1|)  => No such method!
[15/12/2015 - 16:30:35] (::1|)  => hello
[15/12/2015 - 16:30:35] (::1|)  => _ANONYMOUS : 5bed8ac3-d72b-4507-8768-bd62f558c003
_CMD : 310d13f4-78cf-4c7e-9d76-2b0e58ef1325

[15/12/2015 - 16:31:14] (::1|)  => hello
[15/12/2015 - 16:31:18] (::1|)  =>  : Waiting
[15/12/2015 - 16:32:2] (::1|)  => hello
[15/12/2015 - 16:32:22] (::1|)  => timeout
[15/12/2015 - 16:34:28] (::1|)  => hello
[15/12/2015 - 16:34:28] (::1|)  => 
[15/12/2015 - 16:34:30] (::1|)  => hello
[15/12/2015 - 16:34:34] (::1|)  =>  : Waiting
[15/12/2015 - 16:34:37] (::1|)  => hello
[15/12/2015 - 16:34:37] (::1|)  =>  : Waiting
[15/12/2015 - 16:48:48] (::1|)  => hello
[15/12/2015 - 16:49:5] (::1|)  =>  : Waiting
[15/12/2015 - 16:49:24] (::1|)  => hello
[15/12/2015 - 16:49:24] (::1|)  => Error :no such process exist
[15/12/2015 - 16:49:31] (::1|)  => hello
[15/12/2015 - 16:49:31] (::1|)  => 26d4f27c-4cca-4baf-a105-72277a5fa0c3
[15/12/2015 - 16:50:29] (::1|)  => hello
[15/12/2015 - 16:50:29] (::1|)  =>  : Waiting
[15/12/2015 - 16:50:37] (::1|)  => hello
[15/12/2015 - 16:50:37] (::1|)  =>  : Waiting
[15/12/2015 - 16:50:51] (::1|)  => hello
[15/12/2015 - 16:51:11] (::1|)  => timeout
[15/12/2015 - 16:52:4] (::1|)  => hello
[15/12/2015 - 16:52:14] (::1|)  =>  : Waiting
[15/12/2015 - 16:52:18] (::1|)  => hello
[15/12/2015 - 16:52:18] (::1|)  =>  : Waiting
[15/12/2015 - 16:52:31] (::1|)  => hello
[15/12/2015 - 16:52:51] (::1|)  => timeout
[15/12/2015 - 16:54:41] (::1|)  => hello
[15/12/2015 - 16:55:1] (::1|)  => timeout
[15/12/2015 - 16:55:34] (::1|)  => hello
[15/12/2015 - 16:55:37] (::1|)  =>  : Exited((0))
[15/12/2015 - 16:55:37] (::1|)  => hello
[15/12/2015 - 16:55:37] (::1|)  =>  : Exited((0))
[15/12/2015 - 16:56:2] (::1|)  => hello
[15/12/2015 - 16:56:22] (::1|)  => timeout
[15/12/2015 - 17:6:51] (::1|)  => hello
[15/12/2015 - 17:6:53] (::1|)  => 
[15/12/2015 - 17:6:57] (::1|)  => hello
[15/12/2015 - 17:6:57] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3

[15/12/2015 - 17:7:7] (::1|)  => hello
[15/12/2015 - 17:7:8] (::1|)  => Error :null
[15/12/2015 - 17:7:41] (::1|)  => hello
[15/12/2015 - 17:7:49] (::1|)  => Error :null
[15/12/2015 - 17:7:52] (::1|)  => hello
[15/12/2015 - 17:8:12] (::1|)  => timeout
[15/12/2015 - 17:9:38] (::1|)  => hello
[15/12/2015 - 17:9:58] (::1|)  => timeout
[15/12/2015 - 17:11:30] (::1|)  => hello
[15/12/2015 - 17:11:50] (::1|)  => timeout
[15/12/2015 - 17:15:44] (::1|)  => hello
[15/12/2015 - 17:16:4] (::1|)  => f2446169-908c-4fe6-b42a-d301673343df
[15/12/2015 - 17:21:24] (::1|)  => hello
[15/12/2015 - 17:21:44] (::1|)  => timeout
[15/12/2015 - 17:23:28] (::1|)  => hello
[15/12/2015 - 17:23:47] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":"\n\"CORPUS\" : \n  type : VAL\n  value : >\n    /home/paul/projects/custom/cpm/data/corpus/testcorpus/\n\"_RUN_DIR\" : \n  type : DIR\n  value : >\n    /home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f\n\"_DEF_DIR\" : \n  type : DIR\n  value : >\n    /home/paul/projects/custom/cpm/modules/examples/modules","parentEnv":"\n\"CORPUS\" : \n  type : VAL\n  value : >\n    /home/paul/projects/custom/cpm/data/corpus/testcorpus/\n\"_RUN_DIR\" : \n  type : DIR\n  value : >\n    /home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f\n\"_DEF_DIR\" : \n  type : DIR\n  value : >\n    /home/paul/projects/custom/cpm/modules/examples/modules\n\"VOID\" : \n  type : VAL\n  value : >\n    /home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//merged.xml","ruid":"2c1b69cf-aa46-4c31-98b6-812a7107a96f","parentProcess":"None","env":"\n\"_CMD#merge.STDOUT\" : \n  type : VAL\n  value : >\n    \n\"_MAP._CMD#test.STDOUT\" : \n  type : VAL*\n  value : \n    \n      - \n      - \n\"_MAP.stanford-parser.OUT\" : \n  type : FILE*\n  value : \n    \n      - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/humanism.xml\n      - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/meaning_of_life.xml\n\"_CUR_MOD\" : \n  type : VAL\n  value : >\n    pipeline-test\n\"CORPUS\" : \n  type : DIR\n  value : >\n    /home/paul/projects/custom/cpm/data/corpus/testcorpus/\n\"_MAP.foo.OUT\" : \n  type : FILE**\n  value : \n    \n      - \n          - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo1\n          - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo2\n          - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo3\n      - \n          - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo1\n          - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo2\n          - /home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo3\n\"_DEF_DIR\" : \n  type : DIR\n  value : >\n    /home/paul/projects/custom/cpm/modules/examples/modules\n\"_MAP._CMD#test.STDERR\" : \n  type : VAL*\n  value : \n    \n      - \n      - \n\"_MOD_CONTEXT\" : \n  type : VAL\n  value : >\n    pipeline-test\n\"_RUN_DIR\" : \n  type : DIR\n  value : >\n    /home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f/\n\"_CMD#merge.STDERR\" : \n  type : VAL\n  value : >\n    ","processport":"10388","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 17:29:41] (::1|)  => hello
[15/12/2015 - 17:29:45] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//merged.xml"}},"ruid":"2c1b69cf-aa46-4c31-98b6-812a7107a96f","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/meaning_of_life.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"36395","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:2:28] (::1|)  => hello
[15/12/2015 - 18:2:28] (::1|)  => 
[15/12/2015 - 18:2:30] (::1|)  => hello
[15/12/2015 - 18:2:30] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:2:31] (::1|)  => hello
[15/12/2015 - 18:2:31] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:2:32] (::1|)  => hello
[15/12/2015 - 18:2:32] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:2:32] (::1|)  => hello
[15/12/2015 - 18:2:32] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:2:32] (::1|)  => hello
[15/12/2015 - 18:2:32] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df

[15/12/2015 - 18:2:32] (::1|)  => hello
[15/12/2015 - 18:2:32] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:3:25] (::1|)  => hello
[15/12/2015 - 18:3:25] (::1|)  => 
[15/12/2015 - 18:3:26] (::1|)  => hello
[15/12/2015 - 18:3:26] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:3:27] (::1|)  => hello
[15/12/2015 - 18:3:27] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:3:28] (::1|)  => hello
[15/12/2015 - 18:3:28] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:3:28] (::1|)  => hello
[15/12/2015 - 18:3:28] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:3:28] (::1|)  => hello
[15/12/2015 - 18:3:28] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df

[15/12/2015 - 18:3:28] (::1|)  => hello
[15/12/2015 - 18:3:28] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:5:34] (::1|)  => hello
[15/12/2015 - 18:5:34] (::1|)  => 
[15/12/2015 - 18:5:36] (::1|)  => hello
[15/12/2015 - 18:5:36] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:5:36] (::1|)  => hello
[15/12/2015 - 18:5:36] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:5:37] (::1|)  => hello
[15/12/2015 - 18:5:37] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:5:37] (::1|)  => hello
[15/12/2015 - 18:5:37] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:5:37] (::1|)  => hello
[15/12/2015 - 18:5:37] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df

[15/12/2015 - 18:5:37] (::1|)  => hello
[15/12/2015 - 18:5:37] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:5:55] (::1|)  => hello
[15/12/2015 - 18:5:55] (::1|)  => 
[15/12/2015 - 18:5:58] (::1|)  => hello
[15/12/2015 - 18:5:58] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:5:58] (::1|)  => hello
[15/12/2015 - 18:5:58] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:5:59] (::1|)  => hello
[15/12/2015 - 18:5:59] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:5:59] (::1|)  => hello
[15/12/2015 - 18:5:59] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:5:59] (::1|)  => hello
[15/12/2015 - 18:5:59] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df

[15/12/2015 - 18:5:59] (::1|)  => hello
[15/12/2015 - 18:5:59] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:6:29] (::1|)  => hello
[15/12/2015 - 18:6:29] (::1|)  => 
[15/12/2015 - 18:6:30] (::1|)  => hello
[15/12/2015 - 18:6:30] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:6:30] (::1|)  => hello
[15/12/2015 - 18:6:30] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:6:30] (::1|)  => hello
[15/12/2015 - 18:6:30] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:6:30] (::1|)  => hello
[15/12/2015 - 18:6:30] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:6:30] (::1|)  => hello
[15/12/2015 - 18:6:30] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df

[15/12/2015 - 18:6:30] (::1|)  => hello
[15/12/2015 - 18:6:30] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:8:44] (::1|)  => hello
[15/12/2015 - 18:8:44] (::1|)  => 
[15/12/2015 - 18:8:46] (::1|)  => hello
[15/12/2015 - 18:8:46] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:8:47] (::1|)  => hello
[15/12/2015 - 18:8:47] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:8:47] (::1|)  => hello
[15/12/2015 - 18:8:47] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:8:47] (::1|)  => hello
[15/12/2015 - 18:8:47] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:8:47] (::1|)  => hello
[15/12/2015 - 18:8:47] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df

[15/12/2015 - 18:8:47] (::1|)  => hello
[15/12/2015 - 18:8:47] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:8:52] (::1|)  => hello
[15/12/2015 - 18:8:52] (::1|)  => Error :Invalid UUID string: 
[15/12/2015 - 18:9:4] (::1|)  => hello
[15/12/2015 - 18:9:4] (::1|)  => Error :Invalid UUID string: 
[15/12/2015 - 18:9:28] (::1|)  => hello
[15/12/2015 - 18:9:28] (::1|)  => 
[15/12/2015 - 18:9:30] (::1|)  => hello
[15/12/2015 - 18:9:30] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:9:30] (::1|)  => hello
[15/12/2015 - 18:9:30] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:9:31] (::1|)  => hello
[15/12/2015 - 18:9:31] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:9:31] (::1|)  => hello
[15/12/2015 - 18:9:31] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:9:31] (::1|)  => hello
[15/12/2015 - 18:9:31] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:9:31] (::1|)  => hello
[15/12/2015 - 18:9:31] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df

[15/12/2015 - 18:9:40] (::1|)  => hello
[15/12/2015 - 18:9:40] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//merged.xml"}},"ruid":"f2446169-908c-4fe6-b42a-d301673343df","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/meaning_of_life_full.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/meaning_of_life.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"42387","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:25:20] (::1|)  => hello
[15/12/2015 - 18:25:20] (::1|)  => 
[15/12/2015 - 18:25:21] (::1|)  => hello
[15/12/2015 - 18:25:21] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:25:22] (::1|)  => hello
[15/12/2015 - 18:25:22] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:25:24] (::1|)  => hello
[15/12/2015 - 18:25:24] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:25:24] (::1|)  => hello
[15/12/2015 - 18:25:24] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:25:24] (::1|)  => hello
[15/12/2015 - 18:25:24] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:25:24] (::1|)  => hello
[15/12/2015 - 18:25:24] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df

[15/12/2015 - 18:25:28] (::1|)  => hello
[15/12/2015 - 18:25:28] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//merged.xml"}},"ruid":"2c1b69cf-aa46-4c31-98b6-812a7107a96f","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/meaning_of_life.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"15789","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:26:8] (::1|)  => hello
[15/12/2015 - 18:26:8] (::1|)  => 
[15/12/2015 - 18:26:10] (::1|)  => hello
[15/12/2015 - 18:26:10] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:26:10] (::1|)  => hello
[15/12/2015 - 18:26:10] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:26:11] (::1|)  => hello
[15/12/2015 - 18:26:11] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:26:11] (::1|)  => hello
[15/12/2015 - 18:26:11] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:26:11] (::1|)  => hello
[15/12/2015 - 18:26:11] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:26:11] (::1|)  => hello
[15/12/2015 - 18:26:11] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df

[15/12/2015 - 18:26:22] (::1|)  => hello
[15/12/2015 - 18:26:22] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//merged.xml"}},"ruid":"f2446169-908c-4fe6-b42a-d301673343df","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/meaning_of_life_full.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/meaning_of_life.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"15949","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:26:56] (::1|)  => hello
[15/12/2015 - 18:26:56] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3//merged.xml"}},"ruid":"26d4f27c-4cca-4baf-a105-72277a5fa0c3","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3//_MAP/_MAP.2/meaning_of_life_full.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3//_MAP/_MAP.2/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3//_MAP/_MAP.2/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3//_MAP/_MAP.2/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"59700","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:27:47] (::1|)  => hello
[15/12/2015 - 18:27:47] (::1|)  => 
[15/12/2015 - 18:27:49] (::1|)  => hello
[15/12/2015 - 18:27:49] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:27:50] (::1|)  => hello
[15/12/2015 - 18:27:50] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:27:50] (::1|)  => hello
[15/12/2015 - 18:27:50] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:27:50] (::1|)  => hello
[15/12/2015 - 18:27:50] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:27:50] (::1|)  => hello
[15/12/2015 - 18:27:50] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df

[15/12/2015 - 18:27:50] (::1|)  => hello
[15/12/2015 - 18:27:50] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:27:53] (::1|)  => hello
[15/12/2015 - 18:27:53] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//merged.xml"}},"ruid":"f2446169-908c-4fe6-b42a-d301673343df","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/meaning_of_life_full.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/meaning_of_life.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"1225","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:28:25] (::1|)  => hello
[15/12/2015 - 18:28:25] (::1|)  => 5256e20e-70c0-43f8-b796-58bea666e246
[15/12/2015 - 18:28:25] (::1|)  => hello
[15/12/2015 - 18:28:25] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"ruid":"5256e20e-70c0-43f8-b796-58bea666e246","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246/"},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"49979","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"5292","status":"Running"}
[15/12/2015 - 18:29:19] (::1|)  => hello
[15/12/2015 - 18:29:19] (::1|)  => 
[15/12/2015 - 18:29:22] (::1|)  => hello
[15/12/2015 - 18:29:22] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:29:22] (::1|)  => hello
[15/12/2015 - 18:29:22] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:29:23] (::1|)  => hello
[15/12/2015 - 18:29:23] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:29:23] (::1|)  => hello
[15/12/2015 - 18:29:23] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:29:23] (::1|)  => hello
[15/12/2015 - 18:29:23] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:29:23] (::1|)  => hello
[15/12/2015 - 18:29:23] (::1|)  => foo : 5a0e5f45-c3bb-4df5-afe9-6ab16f9a1af4
pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df
pipeline-test : 5256e20e-70c0-43f8-b796-58bea666e246

[15/12/2015 - 18:29:37] (::1|)  => hello
[15/12/2015 - 18:29:37] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module","runconf":{"REGEX":{"type":"VAL","value":".*?\\.txt"},"IN":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0"},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"},"CHUNK_SIZE":{"type":"VAL","value":"20"},"_":{"type":"FILE","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/meaning_of_life.txt"}},"parentEnv":{"_CMD#test.STDOUT":{"type":"VAL","value":""},"REGEX":{"type":"VAL","value":".*?\\.txt"},"IN":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_CMD#test.STDERR":{"type":"VAL","value":""},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"},"stanford-parser.OUT":{"type":"FILE","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0/meaning_of_life.xml"},"CHUNK_SIZE":{"type":"VAL","value":"20"},"foo.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0/foo/foo3"]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_":{"type":"FILE","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/meaning_of_life.txt"}},"ruid":"5a0e5f45-c3bb-4df5-afe9-6ab16f9a1af4","parentProcess":"4b23fe90-d1b7-4b98-a87a-893351e89e2d","env":{"_CMD.STDOUT":{"type":"VAL","value":""},"IN":{"type":"FILE","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/meaning_of_life.txt"},"_CUR_MOD":{"type":"VAL","value":"foo"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_CMD.STDERR":{"type":"VAL","value":""},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0/foo"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"},"_":{"type":"FILE","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/meaning_of_life.txt"}},"processport":"4936","master":false,"modvalconf":"{IN: $_}\n","modvalnamespace":"foo","children":"","resultnamespace":"_MAP.0","name":"foo","parentport":"22340","status":"Exited(0)"}
[15/12/2015 - 18:29:49] (::1|)  => hello
[15/12/2015 - 18:29:49] (::1|)  => 
[15/12/2015 - 18:29:51] (::1|)  => hello
[15/12/2015 - 18:29:51] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:29:51] (::1|)  => hello
[15/12/2015 - 18:29:51] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:29:53] (::1|)  => hello
[15/12/2015 - 18:29:53] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:29:53] (::1|)  => hello
[15/12/2015 - 18:29:53] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:29:53] (::1|)  => hello
[15/12/2015 - 18:29:53] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:29:53] (::1|)  => hello
[15/12/2015 - 18:29:53] (::1|)  => foo : 5a0e5f45-c3bb-4df5-afe9-6ab16f9a1af4
pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df
pipeline-test : 5256e20e-70c0-43f8-b796-58bea666e246

[15/12/2015 - 18:29:58] (::1|)  => hello
[15/12/2015 - 18:29:58] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//merged.xml"}},"ruid":"5256e20e-70c0-43f8-b796-58bea666e246","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.1/humanism.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"52724","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:30:2] (::1|)  => hello
[15/12/2015 - 18:30:2] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//merged.xml"}},"ruid":"f2446169-908c-4fe6-b42a-d301673343df","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/meaning_of_life_full.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/meaning_of_life.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.2/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.0/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-f2446169-908c-4fe6-b42a-d301673343df/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"54640","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:30:4] (::1|)  => hello
[15/12/2015 - 18:30:4] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3//merged.xml"}},"ruid":"26d4f27c-4cca-4baf-a105-72277a5fa0c3","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3//_MAP/_MAP.2/meaning_of_life_full.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3//_MAP/_MAP.2/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3//_MAP/_MAP.2/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3//_MAP/_MAP.2/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-26d4f27c-4cca-4baf-a105-72277a5fa0c3/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"3467","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:30:7] (::1|)  => hello
[15/12/2015 - 18:30:7] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//merged.xml"}},"ruid":"2c1b69cf-aa46-4c31-98b6-812a7107a96f","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/meaning_of_life.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"30146","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:30:9] (::1|)  => hello
[15/12/2015 - 18:30:9] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module","runconf":{"REGEX":{"type":"VAL","value":".*?\\.txt"},"IN":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0"},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"},"CHUNK_SIZE":{"type":"VAL","value":"20"},"_":{"type":"FILE","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/meaning_of_life.txt"}},"parentEnv":{"_CMD#test.STDOUT":{"type":"VAL","value":""},"REGEX":{"type":"VAL","value":".*?\\.txt"},"IN":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_CMD#test.STDERR":{"type":"VAL","value":""},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"},"stanford-parser.OUT":{"type":"FILE","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0/meaning_of_life.xml"},"CHUNK_SIZE":{"type":"VAL","value":"20"},"foo.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0/foo/foo3"]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_":{"type":"FILE","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/meaning_of_life.txt"}},"ruid":"5a0e5f45-c3bb-4df5-afe9-6ab16f9a1af4","parentProcess":"4b23fe90-d1b7-4b98-a87a-893351e89e2d","env":{"_CMD.STDOUT":{"type":"VAL","value":""},"IN":{"type":"FILE","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/meaning_of_life.txt"},"_CUR_MOD":{"type":"VAL","value":"foo"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_CMD.STDERR":{"type":"VAL","value":""},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.0/foo"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"},"_":{"type":"FILE","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/meaning_of_life.txt"}},"processport":"4936","master":false,"modvalconf":"{IN: $_}\n","modvalnamespace":"foo","children":"","resultnamespace":"_MAP.0","name":"foo","parentport":"22340","status":"Exited(0)"}
[15/12/2015 - 18:30:14] (::1|)  => hello
[15/12/2015 - 18:30:14] (::1|)  => 
[15/12/2015 - 18:30:17] (::1|)  => hello
[15/12/2015 - 18:30:17] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:30:17] (::1|)  => hello
[15/12/2015 - 18:30:17] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:30:18] (::1|)  => hello
[15/12/2015 - 18:30:18] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:30:18] (::1|)  => hello
[15/12/2015 - 18:30:19] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:30:19] (::1|)  => hello
[15/12/2015 - 18:30:19] (::1|)  => foo : 5a0e5f45-c3bb-4df5-afe9-6ab16f9a1af4
pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df
pipeline-test : 5256e20e-70c0-43f8-b796-58bea666e246

[15/12/2015 - 18:30:19] (::1|)  => hello
[15/12/2015 - 18:30:19] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:32:11] (::1|)  => hello
[15/12/2015 - 18:32:11] (::1|)  => 
[15/12/2015 - 18:32:15] (::1|)  => hello
[15/12/2015 - 18:32:15] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:32:16] (::1|)  => hello
[15/12/2015 - 18:32:16] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:32:17] (::1|)  => hello
[15/12/2015 - 18:32:37] (::1|)  => timeout
[15/12/2015 - 18:32:38] (::1|)  => hello
[15/12/2015 - 18:32:58] (::1|)  => timeout
[15/12/2015 - 18:32:58] (::1|)  => hello
[15/12/2015 - 18:33:8] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:33:8] (::1|)  => hello
[15/12/2015 - 18:33:9] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df
pipeline-test : 5256e20e-70c0-43f8-b796-58bea666e246

[15/12/2015 - 18:33:15] (::1|)  => hello
[15/12/2015 - 18:33:16] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//merged.xml"}},"ruid":"2c1b69cf-aa46-4c31-98b6-812a7107a96f","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/meaning_of_life.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"1735","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:33:25] (::1|)  => hello
[15/12/2015 - 18:33:25] (::1|)  => 
[15/12/2015 - 18:33:29] (::1|)  => hello
[15/12/2015 - 18:33:29] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:33:29] (::1|)  => hello
[15/12/2015 - 18:33:29] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:33:30] (::1|)  => hello
[15/12/2015 - 18:33:30] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:33:30] (::1|)  => hello
[15/12/2015 - 18:33:30] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:33:30] (::1|)  => hello
[15/12/2015 - 18:33:30] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df
pipeline-test : 5256e20e-70c0-43f8-b796-58bea666e246

[15/12/2015 - 18:33:30] (::1|)  => hello
[15/12/2015 - 18:33:30] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:33:41] (::1|)  => hello
[15/12/2015 - 18:33:41] (::1|)  => aea67215-b29e-4c7b-944a-81599375a17f
[15/12/2015 - 18:33:41] (::1|)  => hello
[15/12/2015 - 18:33:41] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"ruid":"aea67215-b29e-4c7b-944a-81599375a17f","parentProcess":"None","env":"","processport":"44014","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"50491","status":"Running"}
[15/12/2015 - 18:35:6] (::1|)  => hello
[15/12/2015 - 18:35:6] (::1|)  => 
[15/12/2015 - 18:35:8] (::1|)  => hello
[15/12/2015 - 18:35:8] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:35:9] (::1|)  => hello
[15/12/2015 - 18:35:9] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:35:9] (::1|)  => hello
[15/12/2015 - 18:35:9] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:35:9] (::1|)  => hello
[15/12/2015 - 18:35:9] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:35:10] (::1|)  => hello
[15/12/2015 - 18:35:10] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:35:10] (::1|)  => hello
[15/12/2015 - 18:35:10] (::1|)  => _ANONYMOUS : aec69cab-9fc5-490a-836b-35b3b998b9b8
stanford-parser : e7efe5e6-f1c2-4bd4-bef7-e3a9c33714e9
_CMD : 68f57d21-4e94-4190-84ab-6a1f9f2a1cbc
_CMD : 63ab834d-7ccc-41bb-a5d4-110d52d4433d
pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df
pipeline-test : 5256e20e-70c0-43f8-b796-58bea666e246
pipeline-test : aea67215-b29e-4c7b-944a-81599375a17f

[15/12/2015 - 18:35:23] (::1|)  => hello
[15/12/2015 - 18:35:23] (::1|)  => Error :mapping values are not allowed here
 in 'string', line 1, column 225:
     ... fe.txt Parsing [sent. 1 len. 20]: The meaning of life , or the a ... 
                                         ^

[15/12/2015 - 18:35:28] (::1|)  => hello
[15/12/2015 - 18:35:28] (::1|)  => 
[15/12/2015 - 18:35:30] (::1|)  => hello
[15/12/2015 - 18:35:30] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:35:31] (::1|)  => hello
[15/12/2015 - 18:35:31] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:35:32] (::1|)  => hello
[15/12/2015 - 18:35:32] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:35:32] (::1|)  => hello
[15/12/2015 - 18:35:32] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:35:32] (::1|)  => hello
[15/12/2015 - 18:35:32] (::1|)  => _ANONYMOUS : aec69cab-9fc5-490a-836b-35b3b998b9b8
stanford-parser : e7efe5e6-f1c2-4bd4-bef7-e3a9c33714e9
_CMD : 68f57d21-4e94-4190-84ab-6a1f9f2a1cbc
_CMD : 63ab834d-7ccc-41bb-a5d4-110d52d4433d
pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df
pipeline-test : 5256e20e-70c0-43f8-b796-58bea666e246
pipeline-test : aea67215-b29e-4c7b-944a-81599375a17f

[15/12/2015 - 18:35:32] (::1|)  => hello
[15/12/2015 - 18:35:32] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:39:9] (::1|)  => hello
[15/12/2015 - 18:39:9] (::1|)  => 
[15/12/2015 - 18:39:11] (::1|)  => hello
[15/12/2015 - 18:39:11] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:39:12] (::1|)  => hello
[15/12/2015 - 18:39:12] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:39:13] (::1|)  => hello
[15/12/2015 - 18:39:13] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:39:13] (::1|)  => hello
[15/12/2015 - 18:39:13] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:39:13] (::1|)  => hello
[15/12/2015 - 18:39:13] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:39:13] (::1|)  => hello
[15/12/2015 - 18:39:13] (::1|)  => _ANONYMOUS : aec69cab-9fc5-490a-836b-35b3b998b9b8
stanford-parser : e7efe5e6-f1c2-4bd4-bef7-e3a9c33714e9
_CMD : 68f57d21-4e94-4190-84ab-6a1f9f2a1cbc
_CMD : 63ab834d-7ccc-41bb-a5d4-110d52d4433d
pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df
pipeline-test : 5256e20e-70c0-43f8-b796-58bea666e246
pipeline-test : aea67215-b29e-4c7b-944a-81599375a17f

[15/12/2015 - 18:39:17] (::1|)  => hello
[15/12/2015 - 18:39:17] (::1|)  => Error :mapping values are not allowed here
 in 'string', line 1, column 225:
     ... fe.txt Parsing [sent. 1 len. 20]: The meaning of life , or the a ... 
                                         ^

[15/12/2015 - 18:40:7] (::1|)  => hello
[15/12/2015 - 18:40:7] (::1|)  => Error :mapping values are not allowed here
 in 'string', line 1, column 225:
     ... fe.txt Parsing [sent. 1 len. 20]: The meaning of life , or the a ... 
                                         ^

[15/12/2015 - 18:40:45] (::1|)  => hello
[15/12/2015 - 18:40:45] (::1|)  => Error :mapping values are not allowed here
 in 'string', line 1, column 225:
     ... fe.txt Parsing [sent. 1 len. 20]: The meaning of life , or the a ... 
                                         ^

[15/12/2015 - 18:40:45] (::1|)  => hello
[15/12/2015 - 18:40:46] (::1|)  => Error :mapping values are not allowed here
 in 'string', line 1, column 225:
     ... fe.txt Parsing [sent. 1 len. 20]: The meaning of life , or the a ... 
                                         ^

[15/12/2015 - 18:41:42] (::1|)  => hello
[15/12/2015 - 18:41:42] (::1|)  => 
[15/12/2015 - 18:41:48] (::1|)  => hello
[15/12/2015 - 18:41:48] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:41:50] (::1|)  => hello
[15/12/2015 - 18:41:50] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:41:50] (::1|)  => hello
[15/12/2015 - 18:41:51] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:41:51] (::1|)  => hello
[15/12/2015 - 18:41:51] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:41:51] (::1|)  => hello
[15/12/2015 - 18:41:53] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df
pipeline-test : 5256e20e-70c0-43f8-b796-58bea666e246
pipeline-test : aea67215-b29e-4c7b-944a-81599375a17f

[15/12/2015 - 18:41:53] (::1|)  => hello
[15/12/2015 - 18:41:53] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:45:11] (::1|)  => hello
[15/12/2015 - 18:45:12] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//merged.xml"}},"ruid":"aea67215-b29e-4c7b-944a-81599375a17f","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/meaning_of_life_full.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"53947","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:45:20] (::1|)  => hello
[15/12/2015 - 18:45:20] (::1|)  => 
[15/12/2015 - 18:45:23] (::1|)  => hello
[15/12/2015 - 18:45:23] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:45:24] (::1|)  => hello
[15/12/2015 - 18:45:24] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:45:25] (::1|)  => hello
[15/12/2015 - 18:45:25] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:45:25] (::1|)  => hello
[15/12/2015 - 18:45:25] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:45:25] (::1|)  => hello
[15/12/2015 - 18:45:25] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df
pipeline-test : 5256e20e-70c0-43f8-b796-58bea666e246
pipeline-test : aea67215-b29e-4c7b-944a-81599375a17f

[15/12/2015 - 18:45:25] (::1|)  => hello
[15/12/2015 - 18:45:25] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:45:29] (::1|)  => hello
[15/12/2015 - 18:45:29] (::1|)  => 
[15/12/2015 - 18:45:32] (::1|)  => hello
[15/12/2015 - 18:45:32] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:45:33] (::1|)  => hello
[15/12/2015 - 18:45:33] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:45:34] (::1|)  => hello
[15/12/2015 - 18:45:34] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:45:34] (::1|)  => hello
[15/12/2015 - 18:45:34] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:45:34] (::1|)  => hello
[15/12/2015 - 18:45:34] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df
pipeline-test : 5256e20e-70c0-43f8-b796-58bea666e246
pipeline-test : aea67215-b29e-4c7b-944a-81599375a17f

[15/12/2015 - 18:45:34] (::1|)  => hello
[15/12/2015 - 18:45:35] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:47:45] (::1|)  => hello
[15/12/2015 - 18:47:45] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//merged.xml"}},"ruid":"5256e20e-70c0-43f8-b796-58bea666e246","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.1/humanism.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-5256e20e-70c0-43f8-b796-58bea666e246/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"28049","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:49:21] (::1|)  => hello
[15/12/2015 - 18:49:21] (::1|)  => 
[15/12/2015 - 18:49:24] (::1|)  => hello
[15/12/2015 - 18:49:24] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:49:24] (::1|)  => hello
[15/12/2015 - 18:49:24] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:49:25] (::1|)  => hello
[15/12/2015 - 18:49:25] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:49:25] (::1|)  => hello
[15/12/2015 - 18:49:25] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:49:25] (::1|)  => hello
[15/12/2015 - 18:49:25] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df
pipeline-test : 5256e20e-70c0-43f8-b796-58bea666e246
pipeline-test : aea67215-b29e-4c7b-944a-81599375a17f

[15/12/2015 - 18:49:25] (::1|)  => hello
[15/12/2015 - 18:49:25] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:49:29] (::1|)  => hello
[15/12/2015 - 18:49:29] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//merged.xml"}},"ruid":"aea67215-b29e-4c7b-944a-81599375a17f","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/meaning_of_life_full.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"8823","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:49:30] (::1|)  => hello
[15/12/2015 - 18:49:30] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//merged.xml"}},"ruid":"aea67215-b29e-4c7b-944a-81599375a17f","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/meaning_of_life_full.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"22413","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:49:35] (::1|)  => hello
[15/12/2015 - 18:49:35] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//merged.xml"}},"ruid":"aea67215-b29e-4c7b-944a-81599375a17f","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/meaning_of_life_full.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"56848","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:49:42] (::1|)  => hello
[15/12/2015 - 18:49:42] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//merged.xml"}},"ruid":"aea67215-b29e-4c7b-944a-81599375a17f","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/meaning_of_life_full.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.2/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-aea67215-b29e-4c7b-944a-81599375a17f/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"14266","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:52:6] (::1|)  => hello
[15/12/2015 - 18:52:6] (::1|)  => 
[15/12/2015 - 18:52:8] (::1|)  => hello
[15/12/2015 - 18:52:8] (::1|)  => public/js/vendor/underscore-min.map
[15/12/2015 - 18:52:9] (::1|)  => hello
[15/12/2015 - 18:52:9] (::1|)  => public/js/vendor/backbone-min.map
[15/12/2015 - 18:52:10] (::1|)  => hello
[15/12/2015 - 18:52:10] (::1|)  => {"result_dir":"/home/paul/projects/custom/cpm/data/results","corpus_dir":"/home/paul/projects/custom/cpm/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[15/12/2015 - 18:52:10] (::1|)  => hello
[15/12/2015 - 18:52:10] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/home/paul/projects/custom/cpm","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/foo.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test2.module"},{"modulename":"error-test","source":"\nname : error-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - unexistent-module:\n              input :\n                IDONTEXIST : $_\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/error-test.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"$_RUN_DIR/merged.xml"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : $_RUN_DIR/merged.xml\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/home/paul/projects/custom/cpm/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]}]}]}]}]}]}
[15/12/2015 - 18:52:10] (::1|)  => hello
[15/12/2015 - 18:52:10] (::1|)  => {"corpus":[{"munshitest":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"origtweets":["t657172128467283968.txt","t657173461694042112.txt","t657173008570712065.txt","t657193970875940864.txt","t657180758394605571.txt","t657184806363602944.txt","t657197555273605120.txt","t657174847416619008.txt","t657175540823126016.txt","t657175974606479360.txt","t657175889537585152.txt","t657190775114104832.txt","t657191314228908032.txt","t657187535085531136.txt","t657189491719979008.txt","t657188636472029184.txt","t657179709739040768.txt","t657177970545664000.txt","t657179230409723904.txt","t657175242004176896.txt",{"...":"file"}]},"me.tweetaccount"]}
[15/12/2015 - 18:52:10] (::1|)  => hello
[15/12/2015 - 18:52:10] (::1|)  => pipeline-test : 2c1b69cf-aa46-4c31-98b6-812a7107a96f
pipeline-test : 26d4f27c-4cca-4baf-a105-72277a5fa0c3
pipeline-test : f2446169-908c-4fe6-b42a-d301673343df
pipeline-test : 5256e20e-70c0-43f8-b796-58bea666e246
pipeline-test : aea67215-b29e-4c7b-944a-81599375a17f

[15/12/2015 - 18:52:14] (::1|)  => hello
[15/12/2015 - 18:52:14] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//merged.xml"}},"ruid":"2c1b69cf-aa46-4c31-98b6-812a7107a96f","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/humanism.xml","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/meaning_of_life.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.0/foo/foo3"],["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-2c1b69cf-aa46-4c31-98b6-812a7107a96f/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus/testcorpus/"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"4016","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[15/12/2015 - 18:52:32] (::1|)  => hello
[15/12/2015 - 18:52:32] (::1|)  => 28c804c1-8d61-432c-a54a-7a648455f8ca
[15/12/2015 - 18:52:32] (::1|)  => hello
[15/12/2015 - 18:52:32] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"ruid":"28c804c1-8d61-432c-a54a-7a648455f8ca","parentProcess":"None","env":"","processport":"13062","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"20641","status":"Running"}
[15/12/2015 - 18:52:34] (::1|)  => hello
[15/12/2015 - 18:52:34] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"ruid":"28c804c1-8d61-432c-a54a-7a648455f8ca","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca/"},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"13062","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"20641","status":"Running"}
[15/12/2015 - 18:52:34] (::1|)  => hello
[15/12/2015 - 18:52:35] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"ruid":"28c804c1-8d61-432c-a54a-7a648455f8ca","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca/"},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"13062","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"20641","status":"Running"}
[15/12/2015 - 18:53:13] (::1|)  => hello
[15/12/2015 - 18:53:14] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"ruid":"28c804c1-8d61-432c-a54a-7a648455f8ca","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca/"},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"13062","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"20641","status":"Running"}
[15/12/2015 - 18:53:26] (::1|)  => hello
[15/12/2015 - 18:53:26] (::1|)  => {"def":"/home/paul/projects/custom/cpm/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca"},"CORPUS":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"VOID":{"type":"VAL","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca//merged.xml"}},"ruid":"28c804c1-8d61-432c-a54a-7a648455f8ca","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca//_MAP/_MAP.1/humanism.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca//_MAP/_MAP.1/foo/foo1","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca//_MAP/_MAP.1/foo/foo2","/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null]},"_RUN_DIR":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/results/pipeline-test/run-28c804c1-8d61-432c-a54a-7a648455f8ca/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null]},"CORPUS":{"type":"DIR","value":"/home/paul/projects/custom/cpm/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"40963","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","status":"Exited(0)"}
[16/12/2015 - 8:43:14] (::1|)  => hello
[16/12/2015 - 8:43:14] (::1|)  => 
[16/12/2015 - 8:43:15] (::1|)  => hello
[16/12/2015 - 8:43:35] (::1|)  => timeout
[16/12/2015 - 8:43:35] (::1|)  => hello
[16/12/2015 - 8:43:55] (::1|)  => timeout
[16/12/2015 - 8:43:55] (::1|)  => hello
[16/12/2015 - 8:44:15] (::1|)  => timeout
[16/12/2015 - 8:44:15] (::1|)  => hello
[16/12/2015 - 8:44:35] (::1|)  => timeout
[17/12/2015 - 22:20:9] (::1|)  => hello
[17/12/2015 - 22:20:9] (::1|)  => 
[17/12/2015 - 22:20:12] (::1|)  => hello
[17/12/2015 - 22:20:32] (::1|)  => timeout
[17/12/2015 - 22:20:32] (::1|)  => hello
[17/12/2015 - 22:20:52] (::1|)  => timeout
[17/12/2015 - 22:20:52] (::1|)  => hello
[17/12/2015 - 22:21:12] (::1|)  => timeout
[17/12/2015 - 22:21:12] (::1|)  => hello
[17/12/2015 - 22:21:32] (::1|)  => timeout
[20/12/2015 - 17:47:31] (::1|)  => hello
[20/12/2015 - 17:47:31] (::1|)  => 
[20/12/2015 - 17:47:32] (::1|)  => hello
[20/12/2015 - 17:47:52] (::1|)  => timeout
[20/12/2015 - 17:47:52] (::1|)  => hello
[20/12/2015 - 17:48:12] (::1|)  => timeout
[20/12/2015 - 17:48:12] (::1|)  => hello
[20/12/2015 - 17:48:32] (::1|)  => timeout
[20/12/2015 - 17:48:32] (::1|)  => hello
[20/12/2015 - 17:48:52] (::1|)  => timeout
[20/12/2015 - 19:3:42] (::1|)  => hello
[20/12/2015 - 19:3:42] (::1|)  => 
[20/12/2015 - 19:3:44] (::1|)  => hello
[20/12/2015 - 19:4:4] (::1|)  => timeout
[20/12/2015 - 19:4:4] (::1|)  => hello
[20/12/2015 - 19:4:24] (::1|)  => timeout
[20/12/2015 - 19:4:24] (::1|)  => hello
[20/12/2015 - 19:4:44] (::1|)  => timeout
[20/12/2015 - 19:4:44] (::1|)  => hello
[20/12/2015 - 19:5:4] (::1|)  => timeout
[21/12/2015 - 14:0:26] (::1|)  => hello
[21/12/2015 - 14:0:26] (::1|)  => 
[21/12/2015 - 14:0:29] (::1|)  => hello
[21/12/2015 - 14:0:49] (::1|)  => timeout
[21/12/2015 - 14:0:49] (::1|)  => hello
[21/12/2015 - 14:1:9] (::1|)  => timeout
[21/12/2015 - 14:1:9] (::1|)  => hello
[21/12/2015 - 14:1:29] (::1|)  => timeout
[21/12/2015 - 14:1:29] (::1|)  => hello
[21/12/2015 - 14:1:49] (::1|)  => timeout
=======
[16/12/2015 - 11:55:57] (10.0.2.2|)  => hello
[16/12/2015 - 11:56:13] (10.0.2.2|)  => ok
[16/12/2015 - 11:58:27] (10.0.2.2|)  => hello
[16/12/2015 - 11:58:27] (10.0.2.2|)  => 10664724-eda3-4626-a9eb-b3ce56dcfb76
[16/12/2015 - 11:58:27] (10.0.2.2|)  => hello
[16/12/2015 - 11:58:27] (10.0.2.2|)  => {"creationdate":"2015-12-16T11:58:27.472","def":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/bonsai_parser"},"IN_DIR":{"type":"VAL","value":"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-10664724-eda3-4626-a9eb-b3ce56dcfb76"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/bonsai_parser"},"IN_DIR":{"type":"VAL","value":"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-10664724-eda3-4626-a9eb-b3ce56dcfb76"}},"ruid":"10664724-eda3-4626-a9eb-b3ce56dcfb76","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"bonsai-parser@munshi"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/bonsai_parser"},"IN_DIR":{"type":"DIR","value":"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-10664724-eda3-4626-a9eb-b3ce56dcfb76/"},"_MOD_CONTEXT":{"type":"VAL","value":"bonsai-parser@munshi"}},"processport":"9841","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"bonsai-parser@munshi","parentport":"31081","completeddate":"","status":"Running"}
[16/12/2015 - 12:4:28] (10.0.2.2|)  => hello
[16/12/2015 - 12:4:28] (10.0.2.2|)  => {"creationdate":"2015-12-16T11:58:27.472","def":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/bonsai_parser"},"IN_DIR":{"type":"VAL","value":"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-10664724-eda3-4626-a9eb-b3ce56dcfb76"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/bonsai_parser"},"IN_DIR":{"type":"VAL","value":"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-10664724-eda3-4626-a9eb-b3ce56dcfb76"}},"ruid":"10664724-eda3-4626-a9eb-b3ce56dcfb76","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"bonsai-parser@munshi"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/bonsai_parser"},"IN_DIR":{"type":"DIR","value":"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-10664724-eda3-4626-a9eb-b3ce56dcfb76/"},"_MOD_CONTEXT":{"type":"VAL","value":"bonsai-parser@munshi"}},"processport":"9841","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"bonsai-parser@munshi","parentport":"31081","completeddate":"","status":"Running"}
[16/12/2015 - 12:23:49] (10.0.2.2|)  => hello
[16/12/2015 - 12:23:49] (10.0.2.2|)  => Error :while scanning a block scalar
 in 'string', line 1, column 1:
    >>> Processing cinq_semaines_en_ ... 
    ^
expected chomping or indentation indicators, but found >
 in 'string', line 1, column 2:
    >>> Processing cinq_semaines_en_b ... 
     ^

[16/12/2015 - 12:24:45] (10.0.2.2|)  => hello
[16/12/2015 - 12:24:45] (10.0.2.2|)  => 71208b25-ee55-41dc-bf1b-41001901ebeb
[16/12/2015 - 12:24:45] (10.0.2.2|)  => hello
[16/12/2015 - 12:24:45] (10.0.2.2|)  => {"creationdate":"2015-12-16T12:24:45.087","def":"/vagrant/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus"}},"ruid":"71208b25-ee55-41dc-bf1b-41001901ebeb","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb/"},"CORPUS":{"type":"DIR","value":"/vagrant/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"33295","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"14485","completeddate":"","status":"Running"}
[16/12/2015 - 12:27:8] (10.0.2.2|)  => hello
[16/12/2015 - 12:27:8] (10.0.2.2|)  => {"creationdate":"2015-12-16T12:24:45.087","def":"/vagrant/modules/examples/modules/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb"},"CORPUS":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus"},"VOID":{"type":"FILE*","value":["Error reading val value (should be a string)","/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.1/stanford-parser/humanism.xml","/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.2/stanford-parser/meaning_of_life_full.xml","/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.0/stanford-parser/meaning_of_life.xml"]}},"ruid":"71208b25-ee55-41dc-bf1b-41001901ebeb","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.1/stanford-parser/humanism.xml","/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.2/stanford-parser/meaning_of_life_full.xml","/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.0/stanford-parser/meaning_of_life.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules"},"_MAP.foo.OUT":{"type":"FILE**","value":[["/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.2/foo/foo1","/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.2/foo/foo2","/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.2/foo/foo3"],["/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.0/foo/foo1","/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.0/foo/foo2","/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.0/foo/foo3"],["/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.1/foo/foo1","/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.1/foo/foo2","/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null,null]},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/pipeline-test/run-71208b25-ee55-41dc-bf1b-41001901ebeb/"},"_CMD#merge.STDERR":{"type":"VAL","value":""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null,null]},"CORPUS":{"type":"DIR","value":"/vagrant/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"2720","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[16/12/2015 - 13:10:11] (10.0.2.2|)  => hello
[16/12/2015 - 13:10:11] (10.0.2.2|)  => d2325883-7eea-4365-a606-208f2932b844
[16/12/2015 - 13:10:12] (10.0.2.2|)  => hello
[16/12/2015 - 13:10:12] (10.0.2.2|)  => {"creationdate":"2015-12-16T13:10:11.981","def":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-d2325883-7eea-4365-a606-208f2932b844"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-d2325883-7eea-4365-a606-208f2932b844"}},"ruid":"d2325883-7eea-4365-a606-208f2932b844","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_CUR_MOD":{"type":"VAL","value":"corenlp-server"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-d2325883-7eea-4365-a606-208f2932b844/"},"_MOD_CONTEXT":{"type":"VAL","value":"corenlp-server"}},"processport":"49616","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"corenlp-server","parentport":"6230","completeddate":"","status":"Running"}
[16/12/2015 - 13:10:14] (10.0.2.2|)  => hello
[16/12/2015 - 13:10:14] (10.0.2.2|)  => {"creationdate":"2015-12-16T13:10:11.981","def":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-d2325883-7eea-4365-a606-208f2932b844"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-d2325883-7eea-4365-a606-208f2932b844"}},"ruid":"d2325883-7eea-4365-a606-208f2932b844","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_CUR_MOD":{"type":"VAL","value":"corenlp-server"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-d2325883-7eea-4365-a606-208f2932b844/"},"_MOD_CONTEXT":{"type":"VAL","value":"corenlp-server"}},"processport":"49616","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"corenlp-server","parentport":"6230","completeddate":"","status":"Running"}
[16/12/2015 - 13:10:22] (10.0.2.2|)  => hello
[16/12/2015 - 13:10:22] (10.0.2.2|)  => {"creationdate":"2015-12-16T13:10:11.981","def":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-d2325883-7eea-4365-a606-208f2932b844"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-d2325883-7eea-4365-a606-208f2932b844"}},"ruid":"d2325883-7eea-4365-a606-208f2932b844","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_CUR_MOD":{"type":"VAL","value":"corenlp-server"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-d2325883-7eea-4365-a606-208f2932b844/"},"_MOD_CONTEXT":{"type":"VAL","value":"corenlp-server"}},"processport":"49616","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"corenlp-server","parentport":"6230","completeddate":"","status":"Running"}
[16/12/2015 - 13:11:30] (10.0.2.2|)  => hello
[16/12/2015 - 13:11:45] (10.0.2.2|)  => ok
[16/12/2015 - 13:11:45] (10.0.2.2|)  => hello
[16/12/2015 - 13:11:45] (10.0.2.2|)  => 
[16/12/2015 - 13:11:45] (10.0.2.2|)  => hello
[16/12/2015 - 13:11:45] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 13:11:46] (10.0.2.2|)  => hello
[16/12/2015 - 13:11:46] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 13:11:46] (10.0.2.2|)  => hello
[16/12/2015 - 13:11:46] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 13:11:46] (10.0.2.2|)  => hello
[16/12/2015 - 13:11:46] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
corenlp-server : d2325883-7eea-4365-a606-208f2932b844
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4
pipeline-test : f7e2655c-1f32-46dd-a412-fba73691494e
bonsai-parser@munshi : 10664724-eda3-4626-a9eb-b3ce56dcfb76
pipeline-test : 71208b25-ee55-41dc-bf1b-41001901ebeb

[16/12/2015 - 13:11:46] (10.0.2.2|)  => hello
[16/12/2015 - 13:11:56] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 13:11:56] (10.0.2.2|)  => hello
[16/12/2015 - 13:11:56] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 13:11:57] (10.0.2.2|)  => hello
[16/12/2015 - 13:11:57] (10.0.2.2|)  => Error :while scanning a block scalar
 in 'string', line 1, column 1:
    >>> Processing cinq_semaines_en_ ... 
    ^
expected chomping or indentation indicators, but found >
 in 'string', line 1, column 2:
    >>> Processing cinq_semaines_en_b ... 
     ^

[16/12/2015 - 13:12:30] (10.0.2.2|)  => hello
[16/12/2015 - 13:12:30] (10.0.2.2|)  => f9b895ca-e56b-4675-85c3-6019b3db4aec
[16/12/2015 - 13:12:30] (10.0.2.2|)  => hello
[16/12/2015 - 13:12:30] (10.0.2.2|)  => {"creationdate":"2015-12-16T13:12:30.343","def":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-f9b895ca-e56b-4675-85c3-6019b3db4aec"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-f9b895ca-e56b-4675-85c3-6019b3db4aec"}},"ruid":"f9b895ca-e56b-4675-85c3-6019b3db4aec","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_CUR_MOD":{"type":"VAL","value":"corenlp-server"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-f9b895ca-e56b-4675-85c3-6019b3db4aec/"},"_MOD_CONTEXT":{"type":"VAL","value":"corenlp-server"}},"processport":"34990","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"corenlp-server","parentport":"53839","completeddate":"","status":"Running"}
[16/12/2015 - 13:12:56] (10.0.2.2|)  => hello
[16/12/2015 - 13:12:56] (10.0.2.2|)  => Error :while scanning a block scalar
 in 'string', line 1, column 1:
    >>> Processing cinq_semaines_en_ ... 
    ^
expected chomping or indentation indicators, but found >
 in 'string', line 1, column 2:
    >>> Processing cinq_semaines_en_b ... 
     ^

[16/12/2015 - 13:14:7] (10.0.2.2|)  => hello
[16/12/2015 - 13:14:7] (10.0.2.2|)  => Error :while scanning a block scalar
 in 'string', line 1, column 1:
    >>> Processing cinq_semaines_en_ ... 
    ^
expected chomping or indentation indicators, but found >
 in 'string', line 1, column 2:
    >>> Processing cinq_semaines_en_b ... 
     ^

[16/12/2015 - 13:14:38] (10.0.2.2|)  => hello
[16/12/2015 - 13:14:38] (10.0.2.2|)  => 
[16/12/2015 - 13:14:39] (10.0.2.2|)  => hello
[16/12/2015 - 13:14:39] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 13:14:39] (10.0.2.2|)  => hello
[16/12/2015 - 13:14:39] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 13:14:39] (10.0.2.2|)  => hello
[16/12/2015 - 13:14:39] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 13:14:39] (10.0.2.2|)  => hello
[16/12/2015 - 13:14:39] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 13:14:39] (10.0.2.2|)  => hello
[16/12/2015 - 13:14:49] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 13:14:49] (10.0.2.2|)  => hello
[16/12/2015 - 13:14:49] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
corenlp-server : d2325883-7eea-4365-a606-208f2932b844
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4
pipeline-test : f7e2655c-1f32-46dd-a412-fba73691494e
bonsai-parser@munshi : 10664724-eda3-4626-a9eb-b3ce56dcfb76
pipeline-test : 71208b25-ee55-41dc-bf1b-41001901ebeb
corenlp-server : f9b895ca-e56b-4675-85c3-6019b3db4aec

[16/12/2015 - 13:15:57] (10.0.2.2|)  => hello
[16/12/2015 - 13:15:57] (10.0.2.2|)  => {"creationdate":"2015-12-16T13:12:30.343","def":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-f9b895ca-e56b-4675-85c3-6019b3db4aec"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-f9b895ca-e56b-4675-85c3-6019b3db4aec"},"OUT":{"type":"FILE","value":"/vagrant/data/results/corenlp-server/run-f9b895ca-e56b-4675-85c3-6019b3db4aec//meaning_of_life_full.xml"}},"ruid":"f9b895ca-e56b-4675-85c3-6019b3db4aec","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":""},"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_CUR_MOD":{"type":"VAL","value":"corenlp-server"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/modules/corenlp-server"},"_CMD.STDERR":{"type":"VAL","value":""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-f9b895ca-e56b-4675-85c3-6019b3db4aec/"},"_MOD_CONTEXT":{"type":"VAL","value":"corenlp-server"}},"processport":"48567","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"corenlp-server","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[16/12/2015 - 13:16:6] (10.0.2.2|)  => hello
[16/12/2015 - 13:16:6] (10.0.2.2|)  => /vagrant/data/results/corenlp-server/run-f9b895ca-e56b-4675-85c3-6019b3db4aec//meaning_of_life_full.xml
[16/12/2015 - 13:16:6] (10.0.2.2|)  => Connecting to server...
Received reply [ <?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="CoreNLP-to-HTML.xsl" type="text/xsl"?>
<root>
  <document>
    <sentences>
      <sentence id="1">
        <tokens>
          <token id="1">
            <word>The</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>0</CharacterOffsetBegin>
            <CharacterOffsetEnd>3</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="2">
            <word>meaning</word>
            <lemma>meaning</lemma>
            <CharacterOffsetBegin>4</CharacterOffsetBegin>
            <CharacterOffsetEnd>11</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="3">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>12</CharacterOffsetBegin>
            <CharacterOffsetEnd>14</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="4">
            <word>life</word>
            <lemma>life</lemma>
            <CharacterOffsetBegin>15</CharacterOffsetBegin>
            <CharacterOffsetEnd>19</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="5">
            <word>as</word>
            <lemma>as</lemma>
            <CharacterOffsetBegin>20</CharacterOffsetBegin>
            <CharacterOffsetEnd>22</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="6">
            <word>we</word>
            <lemma>we</lemma>
            <CharacterOffsetBegin>23</CharacterOffsetBegin>
            <CharacterOffsetEnd>25</CharacterOffsetEnd>
            <POS>PRP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="7">
            <word>perceive</word>
            <lemma>perceive</lemma>
            <CharacterOffsetBegin>26</CharacterOffsetBegin>
            <CharacterOffsetEnd>34</CharacterOffsetEnd>
            <POS>VBP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="8">
            <word>it</word>
            <lemma>it</lemma>
            <CharacterOffsetBegin>35</CharacterOffsetBegin>
            <CharacterOffsetEnd>37</CharacterOffsetEnd>
            <POS>PRP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="9">
            <word>is</word>
            <lemma>be</lemma>
            <CharacterOffsetBegin>38</CharacterOffsetBegin>
            <CharacterOffsetEnd>40</CharacterOffsetEnd>
            <POS>VBZ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="10">
            <word>derived</word>
            <lemma>derive</lemma>
            <CharacterOffsetBegin>41</CharacterOffsetBegin>
            <CharacterOffsetEnd>48</CharacterOffsetEnd>
            <POS>VBN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="11">
            <word>from</word>
            <lemma>from</lemma>
            <CharacterOffsetBegin>49</CharacterOffsetBegin>
            <CharacterOffsetEnd>53</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="12">
            <word>our</word>
            <lemma>we</lemma>
            <CharacterOffsetBegin>54</CharacterOffsetBegin>
            <CharacterOffsetEnd>57</CharacterOffsetEnd>
            <POS>PRP$</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="13">
            <word>philosophical</word>
            <lemma>philosophical</lemma>
            <CharacterOffsetBegin>58</CharacterOffsetBegin>
            <CharacterOffsetEnd>71</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="14">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>72</CharacterOffsetBegin>
            <CharacterOffsetEnd>75</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="15">
            <word>religious</word>
            <lemma>religious</lemma>
            <CharacterOffsetBegin>76</CharacterOffsetBegin>
            <CharacterOffsetEnd>85</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="16">
            <word>contemplation</word>
            <lemma>contemplation</lemma>
            <CharacterOffsetBegin>86</CharacterOffsetBegin>
            <CharacterOffsetEnd>99</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="17">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>100</CharacterOffsetBegin>
            <CharacterOffsetEnd>102</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="18">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>102</CharacterOffsetBegin>
            <CharacterOffsetEnd>103</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="19">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>104</CharacterOffsetBegin>
            <CharacterOffsetEnd>107</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="20">
            <word>scientific</word>
            <lemma>scientific</lemma>
            <CharacterOffsetBegin>108</CharacterOffsetBegin>
            <CharacterOffsetEnd>118</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="21">
            <word>inquiries</word>
            <lemma>inquiry</lemma>
            <CharacterOffsetBegin>119</CharacterOffsetBegin>
            <CharacterOffsetEnd>128</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="22">
            <word>about</word>
            <lemma>about</lemma>
            <CharacterOffsetBegin>129</CharacterOffsetBegin>
            <CharacterOffsetEnd>134</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="23">
            <word>existence</word>
            <lemma>existence</lemma>
            <CharacterOffsetBegin>135</CharacterOffsetBegin>
            <CharacterOffsetEnd>144</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="24">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>144</CharacterOffsetBegin>
            <CharacterOffsetEnd>145</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="25">
            <word>social</word>
            <lemma>social</lemma>
            <CharacterOffsetBegin>146</CharacterOffsetBegin>
            <CharacterOffsetEnd>152</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="26">
            <word>ties</word>
            <lemma>tie</lemma>
            <CharacterOffsetBegin>153</CharacterOffsetBegin>
            <CharacterOffsetEnd>157</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="27">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>157</CharacterOffsetBegin>
            <CharacterOffsetEnd>158</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="28">
            <word>consciousness</word>
            <lemma>consciousness</lemma>
            <CharacterOffsetBegin>159</CharacterOffsetBegin>
            <CharacterOffsetEnd>172</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="29">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>172</CharacterOffsetBegin>
            <CharacterOffsetEnd>173</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="30">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>174</CharacterOffsetBegin>
            <CharacterOffsetEnd>177</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="31">
            <word>happiness</word>
            <lemma>happiness</lemma>
            <CharacterOffsetBegin>178</CharacterOffsetBegin>
            <CharacterOffsetEnd>187</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="32">
            <word>.</word>
            <lemma>.</lemma>
            <CharacterOffsetBegin>187</CharacterOffsetBegin>
            <CharacterOffsetEnd>188</CharacterOffsetEnd>
            <POS>.</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
        </tokens>
        <parse>(ROOT (S (NP (NP (DT The) (NN meaning)) (PP (IN of) (NP (NP (NN life)) (PP (IN as) (NP (PRP we)))))) (VP (VBP perceive) (SBAR (S (NP (PRP it)) (VP (VBZ is) (VP (VBN derived) (PP (IN from) (NP (NP (NP (PRP$ our) (ADJP (JJ philosophical) (CC and) (JJ religious)) (NN contemplation)) (PP (IN of))) (, ,) (CC and) (NP (NP (JJ scientific) (NNS inquiries)) (PP (IN about) (NP (NP (NN existence)) (, ,) (NP (JJ social) (NNS ties)) (, ,) (NP (NN consciousness)) (, ,) (CC and) (NP (NN happiness)))))))))))) (. .))) </parse>
        <dependencies type="basic-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="7">perceive</dependent>
          </dep>
          <dep type="det">
            <governor idx="2">meaning</governor>
            <dependent idx="1">The</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="7">perceive</governor>
            <dependent idx="2">meaning</dependent>
          </dep>
          <dep type="prep">
            <governor idx="2">meaning</governor>
            <dependent idx="3">of</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="3">of</governor>
            <dependent idx="4">life</dependent>
          </dep>
          <dep type="prep">
            <governor idx="4">life</governor>
            <dependent idx="5">as</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="5">as</governor>
            <dependent idx="6">we</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="10">derived</governor>
            <dependent idx="8">it</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="10">derived</governor>
            <dependent idx="9">is</dependent>
          </dep>
          <dep type="ccomp">
            <governor idx="7">perceive</governor>
            <dependent idx="10">derived</dependent>
          </dep>
          <dep type="prep">
            <governor idx="10">derived</governor>
            <dependent idx="11">from</dependent>
          </dep>
          <dep type="poss">
            <governor idx="16">contemplation</governor>
            <dependent idx="12">our</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">contemplation</governor>
            <dependent idx="13">philosophical</dependent>
          </dep>
          <dep type="cc">
            <governor idx="13">philosophical</governor>
            <dependent idx="14">and</dependent>
          </dep>
          <dep type="conj">
            <governor idx="13">philosophical</governor>
            <dependent idx="15">religious</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="11">from</governor>
            <dependent idx="16">contemplation</dependent>
          </dep>
          <dep type="prep">
            <governor idx="16">contemplation</governor>
            <dependent idx="17">of</dependent>
          </dep>
          <dep type="cc">
            <governor idx="16">contemplation</governor>
            <dependent idx="19">and</dependent>
          </dep>
          <dep type="amod">
            <governor idx="21">inquiries</governor>
            <dependent idx="20">scientific</dependent>
          </dep>
          <dep type="conj">
            <governor idx="16">contemplation</governor>
            <dependent idx="21">inquiries</dependent>
          </dep>
          <dep type="prep">
            <governor idx="21">inquiries</governor>
            <dependent idx="22">about</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="22">about</governor>
            <dependent idx="23">existence</dependent>
          </dep>
          <dep type="amod">
            <governor idx="26">ties</governor>
            <dependent idx="25">social</dependent>
          </dep>
          <dep type="conj">
            <governor idx="23">existence</governor>
            <dependent idx="26">ties</dependent>
          </dep>
          <dep type="conj">
            <governor idx="23">existence</governor>
            <dependent idx="28">consciousness</dependent>
          </dep>
          <dep type="cc">
            <governor idx="23">existence</governor>
            <dependent idx="30">and</dependent>
          </dep>
          <dep type="conj">
            <governor idx="23">existence</governor>
            <dependent idx="31">happiness</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="7">perceive</dependent>
          </dep>
          <dep type="det">
            <governor idx="2">meaning</governor>
            <dependent idx="1">The</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="7">perceive</governor>
            <dependent idx="2">meaning</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="2">meaning</governor>
            <dependent idx="4">life</dependent>
          </dep>
          <dep type="prep_as">
            <governor idx="4">life</governor>
            <dependent idx="6">we</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="10">derived</governor>
            <dependent idx="8">it</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="10">derived</governor>
            <dependent idx="9">is</dependent>
          </dep>
          <dep type="ccomp">
            <governor idx="7">perceive</governor>
            <dependent idx="10">derived</dependent>
          </dep>
          <dep type="poss">
            <governor idx="16">contemplation</governor>
            <dependent idx="12">our</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">contemplation</governor>
            <dependent idx="13">philosophical</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="13">philosophical</governor>
            <dependent idx="15">religious</dependent>
          </dep>
          <dep type="prep_from">
            <governor idx="10">derived</governor>
            <dependent idx="16">contemplation</dependent>
          </dep>
          <dep type="prep">
            <governor idx="16">contemplation</governor>
            <dependent idx="17">of</dependent>
          </dep>
          <dep type="amod">
            <governor idx="21">inquiries</governor>
            <dependent idx="20">scientific</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="16">contemplation</governor>
            <dependent idx="21">inquiries</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="21">inquiries</governor>
            <dependent idx="23">existence</dependent>
          </dep>
          <dep type="amod">
            <governor idx="26">ties</governor>
            <dependent idx="25">social</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="23">existence</governor>
            <dependent idx="26">ties</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="23">existence</governor>
            <dependent idx="28">consciousness</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="23">existence</governor>
            <dependent idx="31">happiness</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-ccprocessed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="7">perceive</dependent>
          </dep>
          <dep type="det">
            <governor idx="2">meaning</governor>
            <dependent idx="1">The</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="7">perceive</governor>
            <dependent idx="2">meaning</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="2">meaning</governor>
            <dependent idx="4">life</dependent>
          </dep>
          <dep type="prep_as">
            <governor idx="4">life</governor>
            <dependent idx="6">we</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="10">derived</governor>
            <dependent idx="8">it</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="10">derived</governor>
            <dependent idx="9">is</dependent>
          </dep>
          <dep type="ccomp">
            <governor idx="7">perceive</governor>
            <dependent idx="10">derived</dependent>
          </dep>
          <dep type="poss">
            <governor idx="16">contemplation</governor>
            <dependent idx="12">our</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">contemplation</governor>
            <dependent idx="13">philosophical</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="13">philosophical</governor>
            <dependent idx="15">religious</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">contemplation</governor>
            <dependent idx="15">religious</dependent>
          </dep>
          <dep type="prep_from">
            <governor idx="10">derived</governor>
            <dependent idx="16">contemplation</dependent>
          </dep>
          <dep type="prep">
            <governor idx="16">contemplation</governor>
            <dependent idx="17">of</dependent>
          </dep>
          <dep type="amod">
            <governor idx="21">inquiries</governor>
            <dependent idx="20">scientific</dependent>
          </dep>
          <dep type="prep_from">
            <governor idx="10">derived</governor>
            <dependent idx="21">inquiries</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="16">contemplation</governor>
            <dependent idx="21">inquiries</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="21">inquiries</governor>
            <dependent idx="23">existence</dependent>
          </dep>
          <dep type="amod">
            <governor idx="26">ties</governor>
            <dependent idx="25">social</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="21">inquiries</governor>
            <dependent idx="26">ties</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="23">existence</governor>
            <dependent idx="26">ties</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="21">inquiries</governor>
            <dependent idx="28">consciousness</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="23">existence</governor>
            <dependent idx="28">consciousness</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="21">inquiries</governor>
            <dependent idx="31">happiness</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="23">existence</governor>
            <dependent idx="31">happiness</dependent>
          </dep>
        </dependencies>
      </sentence>
      <sentence id="2">
        <tokens>
          <token id="1">
            <word>Many</word>
            <lemma>many</lemma>
            <CharacterOffsetBegin>189</CharacterOffsetBegin>
            <CharacterOffsetEnd>193</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="2">
            <word>other</word>
            <lemma>other</lemma>
            <CharacterOffsetBegin>194</CharacterOffsetBegin>
            <CharacterOffsetEnd>199</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="3">
            <word>issues</word>
            <lemma>issue</lemma>
            <CharacterOffsetBegin>200</CharacterOffsetBegin>
            <CharacterOffsetEnd>206</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="4">
            <word>are</word>
            <lemma>be</lemma>
            <CharacterOffsetBegin>207</CharacterOffsetBegin>
            <CharacterOffsetEnd>210</CharacterOffsetEnd>
            <POS>VBP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="5">
            <word>also</word>
            <lemma>also</lemma>
            <CharacterOffsetBegin>211</CharacterOffsetBegin>
            <CharacterOffsetEnd>215</CharacterOffsetEnd>
            <POS>RB</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="6">
            <word>involved</word>
            <lemma>involve</lemma>
            <CharacterOffsetBegin>216</CharacterOffsetBegin>
            <CharacterOffsetEnd>224</CharacterOffsetEnd>
            <POS>VBN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="7">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>224</CharacterOffsetBegin>
            <CharacterOffsetEnd>225</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="8">
            <word>such</word>
            <lemma>such</lemma>
            <CharacterOffsetBegin>226</CharacterOffsetBegin>
            <CharacterOffsetEnd>230</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="9">
            <word>as</word>
            <lemma>as</lemma>
            <CharacterOffsetBegin>231</CharacterOffsetBegin>
            <CharacterOffsetEnd>233</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="10">
            <word>symbolic</word>
            <lemma>symbolic</lemma>
            <CharacterOffsetBegin>234</CharacterOffsetBegin>
            <CharacterOffsetEnd>242</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="11">
            <word>meaning</word>
            <lemma>meaning</lemma>
            <CharacterOffsetBegin>243</CharacterOffsetBegin>
            <CharacterOffsetEnd>250</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="12">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>250</CharacterOffsetBegin>
            <CharacterOffsetEnd>251</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="13">
            <word>ontology</word>
            <lemma>ontology</lemma>
            <CharacterOffsetBegin>252</CharacterOffsetBegin>
            <CharacterOffsetEnd>260</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="14">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>260</CharacterOffsetBegin>
            <CharacterOffsetEnd>261</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="15">
            <word>value</word>
            <lemma>value</lemma>
            <CharacterOffsetBegin>262</CharacterOffsetBegin>
            <CharacterOffsetEnd>267</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="16">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>267</CharacterOffsetBegin>
            <CharacterOffsetEnd>268</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="17">
            <word>purpose</word>
            <lemma>purpose</lemma>
            <CharacterOffsetBegin>269</CharacterOffsetBegin>
            <CharacterOffsetEnd>276</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="18">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>276</CharacterOffsetBegin>
            <CharacterOffsetEnd>277</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="19">
            <word>ethics</word>
            <lemma>ethic</lemma>
            <CharacterOffsetBegin>278</CharacterOffsetBegin>
            <CharacterOffsetEnd>284</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="20">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>284</CharacterOffsetBegin>
            <CharacterOffsetEnd>285</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="21">
            <word>good</word>
            <lemma>good</lemma>
            <CharacterOffsetBegin>286</CharacterOffsetBegin>
            <CharacterOffsetEnd>290</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="22">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>291</CharacterOffsetBegin>
            <CharacterOffsetEnd>294</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="23">
            <word>evil</word>
            <lemma>evil</lemma>
            <CharacterOffsetBegin>295</CharacterOffsetBegin>
            <CharacterOffsetEnd>299</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="24">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>299</CharacterOffsetBegin>
            <CharacterOffsetEnd>300</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="25">
            <word>free</word>
            <lemma>free</lemma>
            <CharacterOffsetBegin>301</CharacterOffsetBegin>
            <CharacterOffsetEnd>305</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="26">
            <word>will</word>
            <lemma>will</lemma>
            <CharacterOffsetBegin>306</CharacterOffsetBegin>
            <CharacterOffsetEnd>310</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="27">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>310</CharacterOffsetBegin>
            <CharacterOffsetEnd>311</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="28">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>312</CharacterOffsetBegin>
            <CharacterOffsetEnd>315</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="29">
            <word>existence</word>
            <lemma>existence</lemma>
            <CharacterOffsetBegin>316</CharacterOffsetBegin>
            <CharacterOffsetEnd>325</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="30">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>326</CharacterOffsetBegin>
            <CharacterOffsetEnd>328</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="31">
            <word>one</word>
            <lemma>one</lemma>
            <CharacterOffsetBegin>329</CharacterOffsetBegin>
            <CharacterOffsetEnd>332</CharacterOffsetEnd>
            <POS>CD</POS>
            <NER>NUMBER</NER>
            <NormalizedNER>1.0</NormalizedNER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="32">
            <word>or</word>
            <lemma>or</lemma>
            <CharacterOffsetBegin>333</CharacterOffsetBegin>
            <CharacterOffsetEnd>335</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="33">
            <word>multiple</word>
            <lemma>multiple</lemma>
            <CharacterOffsetBegin>336</CharacterOffsetBegin>
            <CharacterOffsetEnd>344</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="34">
            <word>gods</word>
            <lemma>god</lemma>
            <CharacterOffsetBegin>345</CharacterOffsetBegin>
            <CharacterOffsetEnd>349</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="35">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>349</CharacterOffsetBegin>
            <CharacterOffsetEnd>350</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="36">
            <word>conceptions</word>
            <lemma>conception</lemma>
            <CharacterOffsetBegin>351</CharacterOffsetBegin>
            <CharacterOffsetEnd>362</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="37">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>363</CharacterOffsetBegin>
            <CharacterOffsetEnd>365</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="38">
            <word>God</word>
            <lemma>God</lemma>
            <CharacterOffsetBegin>366</CharacterOffsetBegin>
            <CharacterOffsetEnd>369</CharacterOffsetEnd>
            <POS>NNP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="39">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>369</CharacterOffsetBegin>
            <CharacterOffsetEnd>370</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="40">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>371</CharacterOffsetBegin>
            <CharacterOffsetEnd>374</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="41">
            <word>soul</word>
            <lemma>soul</lemma>
            <CharacterOffsetBegin>375</CharacterOffsetBegin>
            <CharacterOffsetEnd>379</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="42">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>379</CharacterOffsetBegin>
            <CharacterOffsetEnd>380</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="43">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>381</CharacterOffsetBegin>
            <CharacterOffsetEnd>384</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="44">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>385</CharacterOffsetBegin>
            <CharacterOffsetEnd>388</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="45">
            <word>afterlife</word>
            <lemma>afterlife</lemma>
            <CharacterOffsetBegin>389</CharacterOffsetBegin>
            <CharacterOffsetEnd>398</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="46">
            <word>.</word>
            <lemma>.</lemma>
            <CharacterOffsetBegin>398</CharacterOffsetBegin>
            <CharacterOffsetEnd>399</CharacterOffsetEnd>
            <POS>.</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
        </tokens>
        <parse>(ROOT (S (NP (JJ Many) (JJ other) (NNS issues)) (VP (VBP are) (ADVP (RB also)) (VP (VBN involved) (, ,) (PP (JJ such) (IN as) (NP (NP (JJ symbolic) (NN meaning)) (, ,) (NP (NN ontology)) (, ,) (NP (NN value)) (, ,) (NP (NN purpose)) (, ,) (NP (NNS ethics)) (, ,) (ADJP (JJ good) (CC and) (JJ evil)) (, ,) (NP (JJ free) (NN will)) (, ,) (NP (NP (DT the) (NN existence)) (PP (IN of) (NP (CD one) (CC or) (JJ multiple) (NNS gods)))) (, ,) (NP (NP (NNS conceptions)) (PP (IN of) (NP (NP (NNP God)) (, ,) (NP (DT the) (NN soul))))) (, ,) (CC and) (NP (DT the) (NN afterlife)))))) (. .))) </parse>
        <dependencies type="basic-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">involved</dependent>
          </dep>
          <dep type="amod">
            <governor idx="3">issues</governor>
            <dependent idx="1">Many</dependent>
          </dep>
          <dep type="amod">
            <governor idx="3">issues</governor>
            <dependent idx="2">other</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="6">involved</governor>
            <dependent idx="3">issues</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="6">involved</governor>
            <dependent idx="4">are</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="6">involved</governor>
            <dependent idx="5">also</dependent>
          </dep>
          <dep type="mwe">
            <governor idx="9">as</governor>
            <dependent idx="8">such</dependent>
          </dep>
          <dep type="prep">
            <governor idx="6">involved</governor>
            <dependent idx="9">as</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="10">symbolic</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="9">as</governor>
            <dependent idx="11">meaning</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="13">ontology</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="15">value</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="17">purpose</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="19">ethics</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="21">good</dependent>
          </dep>
          <dep type="cc">
            <governor idx="21">good</governor>
            <dependent idx="22">and</dependent>
          </dep>
          <dep type="conj">
            <governor idx="21">good</governor>
            <dependent idx="23">evil</dependent>
          </dep>
          <dep type="amod">
            <governor idx="26">will</governor>
            <dependent idx="25">free</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="26">will</dependent>
          </dep>
          <dep type="det">
            <governor idx="29">existence</governor>
            <dependent idx="28">the</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="29">existence</dependent>
          </dep>
          <dep type="prep">
            <governor idx="29">existence</governor>
            <dependent idx="30">of</dependent>
          </dep>
          <dep type="nn">
            <governor idx="34">gods</governor>
            <dependent idx="31">one</dependent>
          </dep>
          <dep type="cc">
            <governor idx="31">one</governor>
            <dependent idx="32">or</dependent>
          </dep>
          <dep type="conj">
            <governor idx="31">one</governor>
            <dependent idx="33">multiple</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="30">of</governor>
            <dependent idx="34">gods</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="36">conceptions</dependent>
          </dep>
          <dep type="prep">
            <governor idx="36">conceptions</governor>
            <dependent idx="37">of</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="37">of</governor>
            <dependent idx="38">God</dependent>
          </dep>
          <dep type="det">
            <governor idx="41">soul</governor>
            <dependent idx="40">the</dependent>
          </dep>
          <dep type="appos">
            <governor idx="38">God</governor>
            <dependent idx="41">soul</dependent>
          </dep>
          <dep type="cc">
            <governor idx="11">meaning</governor>
            <dependent idx="43">and</dependent>
          </dep>
          <dep type="det">
            <governor idx="45">afterlife</governor>
            <dependent idx="44">the</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="45">afterlife</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">involved</dependent>
          </dep>
          <dep type="amod">
            <governor idx="3">issues</governor>
            <dependent idx="1">Many</dependent>
          </dep>
          <dep type="amod">
            <governor idx="3">issues</governor>
            <dependent idx="2">other</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="6">involved</governor>
            <dependent idx="3">issues</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="6">involved</governor>
            <dependent idx="4">are</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="6">involved</governor>
            <dependent idx="5">also</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="10">symbolic</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="11">meaning</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="13">ontology</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="15">value</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="17">purpose</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="19">ethics</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="21">good</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="21">good</governor>
            <dependent idx="23">evil</dependent>
          </dep>
          <dep type="amod">
            <governor idx="26">will</governor>
            <dependent idx="25">free</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="26">will</dependent>
          </dep>
          <dep type="det">
            <governor idx="29">existence</governor>
            <dependent idx="28">the</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="29">existence</dependent>
          </dep>
          <dep type="nn">
            <governor idx="34">gods</governor>
            <dependent idx="31">one</dependent>
          </dep>
          <dep type="conj_or">
            <governor idx="31">one</governor>
            <dependent idx="33">multiple</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="29">existence</governor>
            <dependent idx="34">gods</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="36">conceptions</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="36">conceptions</governor>
            <dependent idx="38">God</dependent>
          </dep>
          <dep type="det">
            <governor idx="41">soul</governor>
            <dependent idx="40">the</dependent>
          </dep>
          <dep type="appos">
            <governor idx="38">God</governor>
            <dependent idx="41">soul</dependent>
          </dep>
          <dep type="det">
            <governor idx="45">afterlife</governor>
            <dependent idx="44">the</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="45">afterlife</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-ccprocessed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">involved</dependent>
          </dep>
          <dep type="amod">
            <governor idx="3">issues</governor>
            <dependent idx="1">Many</dependent>
          </dep>
          <dep type="amod">
            <governor idx="3">issues</governor>
            <dependent idx="2">other</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="6">involved</governor>
            <dependent idx="3">issues</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="6">involved</governor>
            <dependent idx="4">are</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="6">involved</governor>
            <dependent idx="5">also</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="10">symbolic</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="11">meaning</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="13">ontology</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="13">ontology</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="15">value</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="15">value</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="17">purpose</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="17">purpose</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="19">ethics</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="19">ethics</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="21">good</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="23">evil</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="21">good</governor>
            <dependent idx="23">evil</dependent>
          </dep>
          <dep type="amod">
            <governor idx="26">will</governor>
            <dependent idx="25">free</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="26">will</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="26">will</dependent>
          </dep>
          <dep type="det">
            <governor idx="29">existence</governor>
            <dependent idx="28">the</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="29">existence</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="29">existence</dependent>
          </dep>
          <dep type="nn">
            <governor idx="34">gods</governor>
            <dependent idx="31">one</dependent>
          </dep>
          <dep type="conj_or">
            <governor idx="31">one</governor>
            <dependent idx="33">multiple</dependent>
          </dep>
          <dep type="nn">
            <governor idx="34">gods</governor>
            <dependent idx="33">multiple</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="29">existence</governor>
            <dependent idx="34">gods</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="36">conceptions</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="36">conceptions</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="36">conceptions</governor>
            <dependent idx="38">God</dependent>
          </dep>
          <dep type="det">
            <governor idx="41">soul</governor>
            <dependent idx="40">the</dependent>
          </dep>
          <dep type="appos">
            <governor idx="38">God</governor>
            <dependent idx="41">soul</dependent>
          </dep>
          <dep type="det">
            <governor idx="45">afterlife</governor>
            <dependent idx="44">the</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="45">afterlife</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="45">afterlife</dependent>
          </dep>
        </dependencies>
      </sentence>
      <sentence id="3">
        <tokens>
          <token id="1">
            <word>Scientific</word>
            <lemma>Scientific</lemma>
            <CharacterOffsetBegin>400</CharacterOffsetBegin>
            <CharacterOffsetEnd>410</CharacterOffsetEnd>
            <POS>NNP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="2">
            <word>contributions</word>
            <lemma>contribution</lemma>
            <CharacterOffsetBegin>411</CharacterOffsetBegin>
            <CharacterOffsetEnd>424</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="3">
            <word>focus</word>
            <lemma>focus</lemma>
            <CharacterOffsetBegin>425</CharacterOffsetBegin>
            <CharacterOffsetEnd>430</CharacterOffsetEnd>
            <POS>VBP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="4">
            <word>primarily</word>
            <lemma>primarily</lemma>
            <CharacterOffsetBegin>431</CharacterOffsetBegin>
            <CharacterOffsetEnd>440</CharacterOffsetEnd>
            <POS>RB</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="5">
            <word>on</word>
            <lemma>on</lemma>
            <CharacterOffsetBegin>441</CharacterOffsetBegin>
            <CharacterOffsetEnd>443</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="6">
            <word>describing</word>
            <lemma>describe</lemma>
            <CharacterOffsetBegin>444</CharacterOffsetBegin>
            <CharacterOffsetEnd>454</CharacterOffsetEnd>
            <POS>VBG</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="7">
            <word>related</word>
            <lemma>related</lemma>
            <CharacterOffsetBegin>455</CharacterOffsetBegin>
            <CharacterOffsetEnd>462</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="8">
            <word>empirical</word>
            <lemma>empirical</lemma>
            <CharacterOffsetBegin>463</CharacterOffsetBegin>
            <CharacterOffsetEnd>472</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="9">
            <word>facts</word>
            <lemma>fact</lemma>
            <CharacterOffsetBegin>473</CharacterOffsetBegin>
            <CharacterOffsetEnd>478</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="10">
            <word>about</word>
            <lemma>about</lemma>
            <CharacterOffsetBegin>479</CharacterOffsetBegin>
            <CharacterOffsetEnd>484</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="11">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>485</CharacterOffsetBegin>
            <CharacterOffsetEnd>488</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="12">
            <word>universe</word>
            <lemma>universe</lemma>
            <CharacterOffsetBegin>489</CharacterOffsetBegin>
            <CharacterOffsetEnd>497</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="13">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>497</CharacterOffsetBegin>
            <CharacterOffsetEnd>498</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="14">
            <word>exploring</word>
            <lemma>explore</lemma>
            <CharacterOffsetBegin>499</CharacterOffsetBegin>
            <CharacterOffsetEnd>508</CharacterOffsetEnd>
            <POS>VBG</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="15">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>509</CharacterOffsetBegin>
            <CharacterOffsetEnd>512</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="16">
            <word>context</word>
            <lemma>context</lemma>
            <CharacterOffsetBegin>513</CharacterOffsetBegin>
            <CharacterOffsetEnd>520</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="17">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>521</CharacterOffsetBegin>
            <CharacterOffsetEnd>524</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="18">
            <word>parameters</word>
            <lemma>parameter</lemma>
            <CharacterOffsetBegin>525</CharacterOffsetBegin>
            <CharacterOffsetEnd>535</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="19">
            <word>concerning</word>
            <lemma>concern</lemma>
            <CharacterOffsetBegin>536</CharacterOffsetBegin>
            <CharacterOffsetEnd>546</CharacterOffsetEnd>
            <POS>VBG</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="20">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>547</CharacterOffsetBegin>
            <CharacterOffsetEnd>550</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="21">
            <word>`</word>
            <lemma>`</lemma>
            <CharacterOffsetBegin>551</CharacterOffsetBegin>
            <CharacterOffsetEnd>552</CharacterOffsetEnd>
            <POS>``</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="22">
            <word>how</word>
            <lemma>how</lemma>
            <CharacterOffsetBegin>552</CharacterOffsetBegin>
            <CharacterOffsetEnd>555</CharacterOffsetEnd>
            <POS>WRB</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="23">
            <word>'</word>
            <lemma>'</lemma>
            <CharacterOffsetBegin>555</CharacterOffsetBegin>
            <CharacterOffsetEnd>556</CharacterOffsetEnd>
            <POS>''</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="24">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>557</CharacterOffsetBegin>
            <CharacterOffsetEnd>559</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="25">
            <word>life</word>
            <lemma>life</lemma>
            <CharacterOffsetBegin>560</CharacterOffsetBegin>
            <CharacterOffsetEnd>564</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="26">
            <word>.</word>
            <lemma>.</lemma>
            <CharacterOffsetBegin>564</CharacterOffsetBegin>
            <CharacterOffsetEnd>565</CharacterOffsetEnd>
            <POS>.</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
        </tokens>
        <parse>(ROOT (S (NP (NNP Scientific) (NNS contributions)) (VP (VBP focus) (ADVP (RB primarily)) (PP (IN on) (S (VP (VBG describing) (NP (JJ related) (JJ empirical) (NNS facts)) (PP (IN about) (NP (NP (NP (DT the) (NN universe)) (, ,) (VP (VBG exploring) (NP (DT the) (NN context) (CC and) (NNS parameters)) (S (VP (VBG concerning) (NP (DT the)) (`` `) (NP (WRB how)))))) ('' ') (PP (IN of) (NP (NN life))))))))) (. .))) </parse>
        <dependencies type="basic-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="3">focus</dependent>
          </dep>
          <dep type="nn">
            <governor idx="2">contributions</governor>
            <dependent idx="1">Scientific</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="3">focus</governor>
            <dependent idx="2">contributions</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">focus</governor>
            <dependent idx="4">primarily</dependent>
          </dep>
          <dep type="prep">
            <governor idx="3">focus</governor>
            <dependent idx="5">on</dependent>
          </dep>
          <dep type="pcomp">
            <governor idx="5">on</governor>
            <dependent idx="6">describing</dependent>
          </dep>
          <dep type="amod">
            <governor idx="9">facts</governor>
            <dependent idx="7">related</dependent>
          </dep>
          <dep type="amod">
            <governor idx="9">facts</governor>
            <dependent idx="8">empirical</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">describing</governor>
            <dependent idx="9">facts</dependent>
          </dep>
          <dep type="prep">
            <governor idx="6">describing</governor>
            <dependent idx="10">about</dependent>
          </dep>
          <dep type="det">
            <governor idx="12">universe</governor>
            <dependent idx="11">the</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="10">about</governor>
            <dependent idx="12">universe</dependent>
          </dep>
          <dep type="vmod">
            <governor idx="12">universe</governor>
            <dependent idx="14">exploring</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">context</governor>
            <dependent idx="15">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="14">exploring</governor>
            <dependent idx="16">context</dependent>
          </dep>
          <dep type="cc">
            <governor idx="16">context</governor>
            <dependent idx="17">and</dependent>
          </dep>
          <dep type="conj">
            <governor idx="16">context</governor>
            <dependent idx="18">parameters</dependent>
          </dep>
          <dep type="vmod">
            <governor idx="14">exploring</governor>
            <dependent idx="19">concerning</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="19">concerning</governor>
            <dependent idx="20">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="19">concerning</governor>
            <dependent idx="22">how</dependent>
          </dep>
          <dep type="prep">
            <governor idx="12">universe</governor>
            <dependent idx="24">of</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="24">of</governor>
            <dependent idx="25">life</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="3">focus</dependent>
          </dep>
          <dep type="nn">
            <governor idx="2">contributions</governor>
            <dependent idx="1">Scientific</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="3">focus</governor>
            <dependent idx="2">contributions</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">focus</governor>
            <dependent idx="4">primarily</dependent>
          </dep>
          <dep type="prepc_on">
            <governor idx="3">focus</governor>
            <dependent idx="6">describing</dependent>
          </dep>
          <dep type="amod">
            <governor idx="9">facts</governor>
            <dependent idx="7">related</dependent>
          </dep>
          <dep type="amod">
            <governor idx="9">facts</governor>
            <dependent idx="8">empirical</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">describing</governor>
            <dependent idx="9">facts</dependent>
          </dep>
          <dep type="det">
            <governor idx="12">universe</governor>
            <dependent idx="11">the</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="6">describing</governor>
            <dependent idx="12">universe</dependent>
          </dep>
          <dep type="vmod">
            <governor idx="12">universe</governor>
            <dependent idx="14">exploring</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">context</governor>
            <dependent idx="15">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="14">exploring</governor>
            <dependent idx="16">context</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="16">context</governor>
            <dependent idx="18">parameters</dependent>
          </dep>
          <dep type="vmod">
            <governor idx="14">exploring</governor>
            <dependent idx="19">concerning</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="19">concerning</governor>
            <dependent idx="20">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="19">concerning</governor>
            <dependent idx="22">how</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="12">universe</governor>
            <dependent idx="25">life</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-ccprocessed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="3">focus</dependent>
          </dep>
          <dep type="nn">
            <governor idx="2">contributions</governor>
            <dependent idx="1">Scientific</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="3">focus</governor>
            <dependent idx="2">contributions</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">focus</governor>
            <dependent idx="4">primarily</dependent>
          </dep>
          <dep type="prepc_on">
            <governor idx="3">focus</governor>
            <dependent idx="6">describing</dependent>
          </dep>
          <dep type="amod">
            <governor idx="9">facts</governor>
            <dependent idx="7">related</dependent>
          </dep>
          <dep type="amod">
            <governor idx="9">facts</governor>
            <dependent idx="8">empirical</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">describing</governor>
            <dependent idx="9">facts</dependent>
          </dep>
          <dep type="det">
            <governor idx="12">universe</governor>
            <dependent idx="11">the</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="6">describing</governor>
            <dependent idx="12">universe</dependent>
          </dep>
          <dep type="vmod">
            <governor idx="12">universe</governor>
            <dependent idx="14">exploring</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">context</governor>
            <dependent idx="15">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="14">exploring</governor>
            <dependent idx="16">context</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="14">exploring</governor>
            <dependent idx="18">parameters</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="16">context</governor>
            <dependent idx="18">parameters</dependent>
          </dep>
          <dep type="vmod">
            <governor idx="14">exploring</governor>
            <dependent idx="19">concerning</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="19">concerning</governor>
            <dependent idx="20">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="19">concerning</governor>
            <dependent idx="22">how</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="12">universe</governor>
            <dependent idx="25">life</dependent>
          </dep>
        </dependencies>
      </sentence>
      <sentence id="4">
        <tokens>
          <token id="1">
            <word>Science</word>
            <lemma>Science</lemma>
            <CharacterOffsetBegin>566</CharacterOffsetBegin>
            <CharacterOffsetEnd>573</CharacterOffsetEnd>
            <POS>NNP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="2">
            <word>also</word>
            <lemma>also</lemma>
            <CharacterOffsetBegin>574</CharacterOffsetBegin>
            <CharacterOffsetEnd>578</CharacterOffsetEnd>
            <POS>RB</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="3">
            <word>studies</word>
            <lemma>study</lemma>
            <CharacterOffsetBegin>579</CharacterOffsetBegin>
            <CharacterOffsetEnd>586</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="4">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>587</CharacterOffsetBegin>
            <CharacterOffsetEnd>590</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="5">
            <word>can</word>
            <lemma>can</lemma>
            <CharacterOffsetBegin>591</CharacterOffsetBegin>
            <CharacterOffsetEnd>594</CharacterOffsetEnd>
            <POS>MD</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="6">
            <word>provide</word>
            <lemma>provide</lemma>
            <CharacterOffsetBegin>595</CharacterOffsetBegin>
            <CharacterOffsetEnd>602</CharacterOffsetEnd>
            <POS>VB</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="7">
            <word>recommendations</word>
            <lemma>recommendation</lemma>
            <CharacterOffsetBegin>603</CharacterOffsetBegin>
            <CharacterOffsetEnd>618</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="8">
            <word>for</word>
            <lemma>for</lemma>
            <CharacterOffsetBegin>619</CharacterOffsetBegin>
            <CharacterOffsetEnd>622</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="9">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>623</CharacterOffsetBegin>
            <CharacterOffsetEnd>626</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="10">
            <word>pursuit</word>
            <lemma>pursuit</lemma>
            <CharacterOffsetBegin>627</CharacterOffsetBegin>
            <CharacterOffsetEnd>634</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="11">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>635</CharacterOffsetBegin>
            <CharacterOffsetEnd>637</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="12">
            <word>well-being</word>
            <lemma>well-being</lemma>
            <CharacterOffsetBegin>638</CharacterOffsetBegin>
            <CharacterOffsetEnd>648</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="13">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>649</CharacterOffsetBegin>
            <CharacterOffsetEnd>652</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="14">
            <word>a</word>
            <lemma>a</lemma>
            <CharacterOffsetBegin>653</CharacterOffsetBegin>
            <CharacterOffsetEnd>654</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="15">
            <word>related</word>
            <lemma>related</lemma>
            <CharacterOffsetBegin>655</CharacterOffsetBegin>
            <CharacterOffsetEnd>662</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="16">
            <word>conception</word>
            <lemma>conception</lemma>
            <CharacterOffsetBegin>663</CharacterOffsetBegin>
            <CharacterOffsetEnd>673</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="17">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>674</CharacterOffsetBegin>
            <CharacterOffsetEnd>676</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="18">
            <word>morality</word>
            <lemma>morality</lemma>
            <CharacterOffsetBegin>677</CharacterOffsetBegin>
            <CharacterOffsetEnd>685</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="19">
            <word>.</word>
            <lemma>.</lemma>
            <CharacterOffsetBegin>685</CharacterOffsetBegin>
            <CharacterOffsetEnd>686</CharacterOffsetEnd>
            <POS>.</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
        </tokens>
        <parse>(ROOT (S (NP (NNP Science)) (VP (VP (ADVP (RB also)) (NP (NNS studies))) (CC and) (VP (MD can) (VP (VB provide) (NP (NNS recommendations)) (PP (IN for) (NP (NP (NP (DT the) (NN pursuit)) (PP (IN of) (NP (NN well-being)))) (CC and) (NP (NP (DT a) (JJ related) (NN conception)) (PP (IN of) (NP (NN morality))))))))) (. .))) </parse>
        <dependencies type="basic-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="3">studies</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="3">studies</governor>
            <dependent idx="1">Science</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">studies</governor>
            <dependent idx="2">also</dependent>
          </dep>
          <dep type="cc">
            <governor idx="3">studies</governor>
            <dependent idx="4">and</dependent>
          </dep>
          <dep type="aux">
            <governor idx="6">provide</governor>
            <dependent idx="5">can</dependent>
          </dep>
          <dep type="conj">
            <governor idx="3">studies</governor>
            <dependent idx="6">provide</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">provide</governor>
            <dependent idx="7">recommendations</dependent>
          </dep>
          <dep type="prep">
            <governor idx="6">provide</governor>
            <dependent idx="8">for</dependent>
          </dep>
          <dep type="det">
            <governor idx="10">pursuit</governor>
            <dependent idx="9">the</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="8">for</governor>
            <dependent idx="10">pursuit</dependent>
          </dep>
          <dep type="prep">
            <governor idx="10">pursuit</governor>
            <dependent idx="11">of</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="11">of</governor>
            <dependent idx="12">well-being</dependent>
          </dep>
          <dep type="cc">
            <governor idx="10">pursuit</governor>
            <dependent idx="13">and</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">conception</governor>
            <dependent idx="14">a</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">conception</governor>
            <dependent idx="15">related</dependent>
          </dep>
          <dep type="conj">
            <governor idx="10">pursuit</governor>
            <dependent idx="16">conception</dependent>
          </dep>
          <dep type="prep">
            <governor idx="16">conception</governor>
            <dependent idx="17">of</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="17">of</governor>
            <dependent idx="18">morality</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="3">studies</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="3">studies</governor>
            <dependent idx="1">Science</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">studies</governor>
            <dependent idx="2">also</dependent>
          </dep>
          <dep type="aux">
            <governor idx="6">provide</governor>
            <dependent idx="5">can</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="3">studies</governor>
            <dependent idx="6">provide</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">provide</governor>
            <dependent idx="7">recommendations</dependent>
          </dep>
          <dep type="det">
            <governor idx="10">pursuit</governor>
            <dependent idx="9">the</dependent>
          </dep>
          <dep type="prep_for">
            <governor idx="6">provide</governor>
            <dependent idx="10">pursuit</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="10">pursuit</governor>
            <dependent idx="12">well-being</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">conception</governor>
            <dependent idx="14">a</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">conception</governor>
            <dependent idx="15">related</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="10">pursuit</governor>
            <dependent idx="16">conception</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="16">conception</governor>
            <dependent idx="18">morality</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-ccprocessed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="3">studies</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="3">studies</governor>
            <dependent idx="1">Science</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="6">provide</governor>
            <dependent idx="1">Science</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">studies</governor>
            <dependent idx="2">also</dependent>
          </dep>
          <dep type="aux">
            <governor idx="6">provide</governor>
            <dependent idx="5">can</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="3">studies</governor>
            <dependent idx="6">provide</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">provide</governor>
            <dependent idx="7">recommendations</dependent>
          </dep>
          <dep type="det">
            <governor idx="10">pursuit</governor>
            <dependent idx="9">the</dependent>
          </dep>
          <dep type="prep_for">
            <governor idx="6">provide</governor>
            <dependent idx="10">pursuit</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="10">pursuit</governor>
            <dependent idx="12">well-being</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">conception</governor>
            <dependent idx="14">a</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">conception</governor>
            <dependent idx="15">related</dependent>
          </dep>
          <dep type="prep_for">
            <governor idx="6">provide</governor>
            <dependent idx="16">conception</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="10">pursuit</governor>
            <dependent idx="16">conception</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="16">conception</governor>
            <dependent idx="18">morality</dependent>
          </dep>
        </dependencies>
      </sentence>
      <sentence id="5">
        <tokens>
          <token id="1">
            <word>An</word>
            <lemma>a</lemma>
            <CharacterOffsetBegin>687</CharacterOffsetBegin>
            <CharacterOffsetEnd>689</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="2">
            <word>alternative</word>
            <lemma>alternative</lemma>
            <CharacterOffsetBegin>690</CharacterOffsetBegin>
            <CharacterOffsetEnd>701</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="3">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>701</CharacterOffsetBegin>
            <CharacterOffsetEnd>702</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="4">
            <word>humanistic</word>
            <lemma>humanistic</lemma>
            <CharacterOffsetBegin>703</CharacterOffsetBegin>
            <CharacterOffsetEnd>713</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="5">
            <word>approach</word>
            <lemma>approach</lemma>
            <CharacterOffsetBegin>714</CharacterOffsetBegin>
            <CharacterOffsetEnd>722</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="6">
            <word>poses</word>
            <lemma>pose</lemma>
            <CharacterOffsetBegin>723</CharacterOffsetBegin>
            <CharacterOffsetEnd>728</CharacterOffsetEnd>
            <POS>VBZ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="7">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>729</CharacterOffsetBegin>
            <CharacterOffsetEnd>732</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="8">
            <word>question</word>
            <lemma>question</lemma>
            <CharacterOffsetBegin>733</CharacterOffsetBegin>
            <CharacterOffsetEnd>741</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="9">
            <word>``</word>
            <lemma>``</lemma>
            <CharacterOffsetBegin>742</CharacterOffsetBegin>
            <CharacterOffsetEnd>743</CharacterOffsetEnd>
            <POS>``</POS>
            <NER>O</NER>
          </token>
          <token id="10">
            <word>What</word>
            <lemma>what</lemma>
            <CharacterOffsetBegin>743</CharacterOffsetBegin>
            <CharacterOffsetEnd>747</CharacterOffsetEnd>
            <POS>WP</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="11">
            <word>is</word>
            <lemma>be</lemma>
            <CharacterOffsetBegin>748</CharacterOffsetBegin>
            <CharacterOffsetEnd>750</CharacterOffsetEnd>
            <POS>VBZ</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="12">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>751</CharacterOffsetBegin>
            <CharacterOffsetEnd>754</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="13">
            <word>meaning</word>
            <lemma>meaning</lemma>
            <CharacterOffsetBegin>755</CharacterOffsetBegin>
            <CharacterOffsetEnd>762</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="14">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>763</CharacterOffsetBegin>
            <CharacterOffsetEnd>765</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="15">
            <word>my</word>
            <lemma>my</lemma>
            <CharacterOffsetBegin>766</CharacterOffsetBegin>
            <CharacterOffsetEnd>768</CharacterOffsetEnd>
            <POS>PRP$</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="16">
            <word>life</word>
            <lemma>life</lemma>
            <CharacterOffsetBegin>769</CharacterOffsetBegin>
            <CharacterOffsetEnd>773</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="17">
            <word>?</word>
            <lemma>?</lemma>
            <CharacterOffsetBegin>773</CharacterOffsetBegin>
            <CharacterOffsetEnd>774</CharacterOffsetEnd>
            <POS>.</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="18">
            <word>''</word>
            <lemma>''</lemma>
            <CharacterOffsetBegin>774</CharacterOffsetBegin>
            <CharacterOffsetEnd>775</CharacterOffsetEnd>
            <POS>''</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
        </tokens>
        <parse>(ROOT (S (NP (DT An) (NN alternative) (, ,) (JJ humanistic) (NN approach)) (VP (VBZ poses) (NP (NP (DT the) (NN question)) (`` ``) (SBAR (WHNP (WP What)) (S (VP (VBZ is) (NP (NP (DT the) (NN meaning)) (PP (IN of) (NP (PRP$ my) (NN life))))))))) (. ?) ('' ''))) </parse>
        <dependencies type="basic-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">poses</dependent>
          </dep>
          <dep type="det">
            <governor idx="5">approach</governor>
            <dependent idx="1">An</dependent>
          </dep>
          <dep type="nn">
            <governor idx="5">approach</governor>
            <dependent idx="2">alternative</dependent>
          </dep>
          <dep type="amod">
            <governor idx="5">approach</governor>
            <dependent idx="4">humanistic</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="6">poses</governor>
            <dependent idx="5">approach</dependent>
          </dep>
          <dep type="det">
            <governor idx="8">question</governor>
            <dependent idx="7">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">poses</governor>
            <dependent idx="8">question</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="13">meaning</governor>
            <dependent idx="10">What</dependent>
          </dep>
          <dep type="cop">
            <governor idx="13">meaning</governor>
            <dependent idx="11">is</dependent>
          </dep>
          <dep type="det">
            <governor idx="13">meaning</governor>
            <dependent idx="12">the</dependent>
          </dep>
          <dep type="rcmod">
            <governor idx="8">question</governor>
            <dependent idx="13">meaning</dependent>
          </dep>
          <dep type="prep">
            <governor idx="13">meaning</governor>
            <dependent idx="14">of</dependent>
          </dep>
          <dep type="poss">
            <governor idx="16">life</governor>
            <dependent idx="15">my</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="14">of</governor>
            <dependent idx="16">life</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">poses</dependent>
          </dep>
          <dep type="det">
            <governor idx="5">approach</governor>
            <dependent idx="1">An</dependent>
          </dep>
          <dep type="nn">
            <governor idx="5">approach</governor>
            <dependent idx="2">alternative</dependent>
          </dep>
          <dep type="amod">
            <governor idx="5">approach</governor>
            <dependent idx="4">humanistic</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="6">poses</governor>
            <dependent idx="5">approach</dependent>
          </dep>
          <dep type="det">
            <governor idx="8">question</governor>
            <dependent idx="7">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">poses</governor>
            <dependent idx="8">question</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="13">meaning</governor>
            <dependent idx="10">What</dependent>
          </dep>
          <dep type="cop">
            <governor idx="13">meaning</governor>
            <dependent idx="11">is</dependent>
          </dep>
          <dep type="det">
            <governor idx="13">meaning</governor>
            <dependent idx="12">the</dependent>
          </dep>
          <dep type="rcmod">
            <governor idx="8">question</governor>
            <dependent idx="13">meaning</dependent>
          </dep>
          <dep type="poss">
            <governor idx="16">life</governor>
            <dependent idx="15">my</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="13">meaning</governor>
            <dependent idx="16">life</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-ccprocessed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">poses</dependent>
          </dep>
          <dep type="det">
            <governor idx="5">approach</governor>
            <dependent idx="1">An</dependent>
          </dep>
          <dep type="nn">
            <governor idx="5">approach</governor>
            <dependent idx="2">alternative</dependent>
          </dep>
          <dep type="amod">
            <governor idx="5">approach</governor>
            <dependent idx="4">humanistic</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="6">poses</governor>
            <dependent idx="5">approach</dependent>
          </dep>
          <dep type="det">
            <governor idx="8">question</governor>
            <dependent idx="7">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">poses</governor>
            <dependent idx="8">question</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="13">meaning</governor>
            <dependent idx="10">What</dependent>
          </dep>
          <dep type="cop">
            <governor idx="13">meaning</governor>
            <dependent idx="11">is</dependent>
          </dep>
          <dep type="det">
            <governor idx="13">meaning</governor>
            <dependent idx="12">the</dependent>
          </dep>
          <dep type="rcmod">
            <governor idx="8">question</governor>
            <dependent idx="13">meaning</dependent>
          </dep>
          <dep type="poss">
            <governor idx="16">life</governor>
            <dependent idx="15">my</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="13">meaning</governor>
            <dependent idx="16">life</dependent>
          </dep>
        </dependencies>
      </sentence>
    </sentences>
    <coreference>
      <coreference>
        <mention representative="true">
          <sentence>1</sentence>
          <start>1</start>
          <end>7</end>
          <head>2</head>
          <text>The meaning of life as we</text>
        </mention>
        <mention>
          <sentence>1</sentence>
          <start>8</start>
          <end>9</end>
          <head>8</head>
          <text>it</text>
        </mention>
        <mention>
          <sentence>5</sentence>
          <start>12</start>
          <end>17</end>
          <head>13</head>
          <text>the meaning of my life</text>
        </mention>
      </coreference>
      <coreference>
        <mention representative="true">
          <sentence>5</sentence>
          <start>15</start>
          <end>17</end>
          <head>16</head>
          <text>my life</text>
        </mention>
        <mention>
          <sentence>1</sentence>
          <start>4</start>
          <end>7</end>
          <head>4</head>
          <text>life as we</text>
        </mention>
      </coreference>
      <coreference>
        <mention representative="true">
          <sentence>1</sentence>
          <start>6</start>
          <end>7</end>
          <head>6</head>
          <text>we</text>
        </mention>
        <mention>
          <sentence>1</sentence>
          <start>12</start>
          <end>13</end>
          <head>12</head>
          <text>our</text>
        </mention>
      </coreference>
      <coreference>
        <mention representative="true">
          <sentence>1</sentence>
          <start>12</start>
          <end>18</end>
          <head>16</head>
          <text>our philosophical and religious contemplation of</text>
        </mention>
        <mention>
          <sentence>1</sentence>
          <start>20</start>
          <end>32</end>
          <head>21</head>
          <text>scientific inquiries about existence , social ties , consciousness , and happiness</text>
        </mention>
      </coreference>
      <coreference>
        <mention representative="true">
          <sentence>2</sentence>
          <start>36</start>
          <end>42</end>
          <head>36</head>
          <text>conceptions of God , the soul</text>
        </mention>
        <mention>
          <sentence>2</sentence>
          <start>19</start>
          <end>20</end>
          <head>19</head>
          <text>ethics</text>
        </mention>
      </coreference>
      <coreference>
        <mention representative="true">
          <sentence>2</sentence>
          <start>28</start>
          <end>35</end>
          <head>29</head>
          <text>the existence of one or multiple gods</text>
        </mention>
        <mention>
          <sentence>2</sentence>
          <start>44</start>
          <end>46</end>
          <head>45</head>
          <text>the afterlife</text>
        </mention>
      </coreference>
      <coreference>
        <mention representative="true">
          <sentence>3</sentence>
          <start>20</start>
          <end>21</end>
          <head>20</head>
          <text>the</text>
        </mention>
        <mention>
          <sentence>5</sentence>
          <start>15</start>
          <end>16</end>
          <head>15</head>
          <text>my</text>
        </mention>
      </coreference>
    </coreference>
  </document>
</root>
 ]

[16/12/2015 - 13:21:10] (10.0.2.2|)  => hello
[16/12/2015 - 13:21:10] (10.0.2.2|)  => Error :while scanning a block scalar
 in 'string', line 1, column 1:
    >>> Processing cinq_semaines_en_ ... 
    ^
expected chomping or indentation indicators, but found >
 in 'string', line 1, column 2:
    >>> Processing cinq_semaines_en_b ... 
     ^

[16/12/2015 - 13:21:17] (10.0.2.2|)  => hello
[16/12/2015 - 13:21:17] (10.0.2.2|)  => /vagrant/data/results/corenlp-server/run-f9b895ca-e56b-4675-85c3-6019b3db4aec//meaning_of_life_full.xml
[16/12/2015 - 13:21:17] (10.0.2.2|)  => Connecting to server...
Received reply [ <?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="CoreNLP-to-HTML.xsl" type="text/xsl"?>
<root>
  <document>
    <sentences>
      <sentence id="1">
        <tokens>
          <token id="1">
            <word>The</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>0</CharacterOffsetBegin>
            <CharacterOffsetEnd>3</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="2">
            <word>meaning</word>
            <lemma>meaning</lemma>
            <CharacterOffsetBegin>4</CharacterOffsetBegin>
            <CharacterOffsetEnd>11</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="3">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>12</CharacterOffsetBegin>
            <CharacterOffsetEnd>14</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="4">
            <word>life</word>
            <lemma>life</lemma>
            <CharacterOffsetBegin>15</CharacterOffsetBegin>
            <CharacterOffsetEnd>19</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="5">
            <word>as</word>
            <lemma>as</lemma>
            <CharacterOffsetBegin>20</CharacterOffsetBegin>
            <CharacterOffsetEnd>22</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="6">
            <word>we</word>
            <lemma>we</lemma>
            <CharacterOffsetBegin>23</CharacterOffsetBegin>
            <CharacterOffsetEnd>25</CharacterOffsetEnd>
            <POS>PRP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="7">
            <word>perceive</word>
            <lemma>perceive</lemma>
            <CharacterOffsetBegin>26</CharacterOffsetBegin>
            <CharacterOffsetEnd>34</CharacterOffsetEnd>
            <POS>VBP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="8">
            <word>it</word>
            <lemma>it</lemma>
            <CharacterOffsetBegin>35</CharacterOffsetBegin>
            <CharacterOffsetEnd>37</CharacterOffsetEnd>
            <POS>PRP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="9">
            <word>is</word>
            <lemma>be</lemma>
            <CharacterOffsetBegin>38</CharacterOffsetBegin>
            <CharacterOffsetEnd>40</CharacterOffsetEnd>
            <POS>VBZ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="10">
            <word>derived</word>
            <lemma>derive</lemma>
            <CharacterOffsetBegin>41</CharacterOffsetBegin>
            <CharacterOffsetEnd>48</CharacterOffsetEnd>
            <POS>VBN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="11">
            <word>from</word>
            <lemma>from</lemma>
            <CharacterOffsetBegin>49</CharacterOffsetBegin>
            <CharacterOffsetEnd>53</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="12">
            <word>our</word>
            <lemma>we</lemma>
            <CharacterOffsetBegin>54</CharacterOffsetBegin>
            <CharacterOffsetEnd>57</CharacterOffsetEnd>
            <POS>PRP$</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="13">
            <word>philosophical</word>
            <lemma>philosophical</lemma>
            <CharacterOffsetBegin>58</CharacterOffsetBegin>
            <CharacterOffsetEnd>71</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="14">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>72</CharacterOffsetBegin>
            <CharacterOffsetEnd>75</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="15">
            <word>religious</word>
            <lemma>religious</lemma>
            <CharacterOffsetBegin>76</CharacterOffsetBegin>
            <CharacterOffsetEnd>85</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="16">
            <word>contemplation</word>
            <lemma>contemplation</lemma>
            <CharacterOffsetBegin>86</CharacterOffsetBegin>
            <CharacterOffsetEnd>99</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="17">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>100</CharacterOffsetBegin>
            <CharacterOffsetEnd>102</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="18">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>102</CharacterOffsetBegin>
            <CharacterOffsetEnd>103</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="19">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>104</CharacterOffsetBegin>
            <CharacterOffsetEnd>107</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="20">
            <word>scientific</word>
            <lemma>scientific</lemma>
            <CharacterOffsetBegin>108</CharacterOffsetBegin>
            <CharacterOffsetEnd>118</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="21">
            <word>inquiries</word>
            <lemma>inquiry</lemma>
            <CharacterOffsetBegin>119</CharacterOffsetBegin>
            <CharacterOffsetEnd>128</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="22">
            <word>about</word>
            <lemma>about</lemma>
            <CharacterOffsetBegin>129</CharacterOffsetBegin>
            <CharacterOffsetEnd>134</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="23">
            <word>existence</word>
            <lemma>existence</lemma>
            <CharacterOffsetBegin>135</CharacterOffsetBegin>
            <CharacterOffsetEnd>144</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="24">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>144</CharacterOffsetBegin>
            <CharacterOffsetEnd>145</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="25">
            <word>social</word>
            <lemma>social</lemma>
            <CharacterOffsetBegin>146</CharacterOffsetBegin>
            <CharacterOffsetEnd>152</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="26">
            <word>ties</word>
            <lemma>tie</lemma>
            <CharacterOffsetBegin>153</CharacterOffsetBegin>
            <CharacterOffsetEnd>157</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="27">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>157</CharacterOffsetBegin>
            <CharacterOffsetEnd>158</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="28">
            <word>consciousness</word>
            <lemma>consciousness</lemma>
            <CharacterOffsetBegin>159</CharacterOffsetBegin>
            <CharacterOffsetEnd>172</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="29">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>172</CharacterOffsetBegin>
            <CharacterOffsetEnd>173</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="30">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>174</CharacterOffsetBegin>
            <CharacterOffsetEnd>177</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="31">
            <word>happiness</word>
            <lemma>happiness</lemma>
            <CharacterOffsetBegin>178</CharacterOffsetBegin>
            <CharacterOffsetEnd>187</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="32">
            <word>.</word>
            <lemma>.</lemma>
            <CharacterOffsetBegin>187</CharacterOffsetBegin>
            <CharacterOffsetEnd>188</CharacterOffsetEnd>
            <POS>.</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
        </tokens>
        <parse>(ROOT (S (NP (NP (DT The) (NN meaning)) (PP (IN of) (NP (NP (NN life)) (PP (IN as) (NP (PRP we)))))) (VP (VBP perceive) (SBAR (S (NP (PRP it)) (VP (VBZ is) (VP (VBN derived) (PP (IN from) (NP (NP (NP (PRP$ our) (ADJP (JJ philosophical) (CC and) (JJ religious)) (NN contemplation)) (PP (IN of))) (, ,) (CC and) (NP (NP (JJ scientific) (NNS inquiries)) (PP (IN about) (NP (NP (NN existence)) (, ,) (NP (JJ social) (NNS ties)) (, ,) (NP (NN consciousness)) (, ,) (CC and) (NP (NN happiness)))))))))))) (. .))) </parse>
        <dependencies type="basic-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="7">perceive</dependent>
          </dep>
          <dep type="det">
            <governor idx="2">meaning</governor>
            <dependent idx="1">The</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="7">perceive</governor>
            <dependent idx="2">meaning</dependent>
          </dep>
          <dep type="prep">
            <governor idx="2">meaning</governor>
            <dependent idx="3">of</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="3">of</governor>
            <dependent idx="4">life</dependent>
          </dep>
          <dep type="prep">
            <governor idx="4">life</governor>
            <dependent idx="5">as</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="5">as</governor>
            <dependent idx="6">we</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="10">derived</governor>
            <dependent idx="8">it</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="10">derived</governor>
            <dependent idx="9">is</dependent>
          </dep>
          <dep type="ccomp">
            <governor idx="7">perceive</governor>
            <dependent idx="10">derived</dependent>
          </dep>
          <dep type="prep">
            <governor idx="10">derived</governor>
            <dependent idx="11">from</dependent>
          </dep>
          <dep type="poss">
            <governor idx="16">contemplation</governor>
            <dependent idx="12">our</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">contemplation</governor>
            <dependent idx="13">philosophical</dependent>
          </dep>
          <dep type="cc">
            <governor idx="13">philosophical</governor>
            <dependent idx="14">and</dependent>
          </dep>
          <dep type="conj">
            <governor idx="13">philosophical</governor>
            <dependent idx="15">religious</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="11">from</governor>
            <dependent idx="16">contemplation</dependent>
          </dep>
          <dep type="prep">
            <governor idx="16">contemplation</governor>
            <dependent idx="17">of</dependent>
          </dep>
          <dep type="cc">
            <governor idx="16">contemplation</governor>
            <dependent idx="19">and</dependent>
          </dep>
          <dep type="amod">
            <governor idx="21">inquiries</governor>
            <dependent idx="20">scientific</dependent>
          </dep>
          <dep type="conj">
            <governor idx="16">contemplation</governor>
            <dependent idx="21">inquiries</dependent>
          </dep>
          <dep type="prep">
            <governor idx="21">inquiries</governor>
            <dependent idx="22">about</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="22">about</governor>
            <dependent idx="23">existence</dependent>
          </dep>
          <dep type="amod">
            <governor idx="26">ties</governor>
            <dependent idx="25">social</dependent>
          </dep>
          <dep type="conj">
            <governor idx="23">existence</governor>
            <dependent idx="26">ties</dependent>
          </dep>
          <dep type="conj">
            <governor idx="23">existence</governor>
            <dependent idx="28">consciousness</dependent>
          </dep>
          <dep type="cc">
            <governor idx="23">existence</governor>
            <dependent idx="30">and</dependent>
          </dep>
          <dep type="conj">
            <governor idx="23">existence</governor>
            <dependent idx="31">happiness</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="7">perceive</dependent>
          </dep>
          <dep type="det">
            <governor idx="2">meaning</governor>
            <dependent idx="1">The</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="7">perceive</governor>
            <dependent idx="2">meaning</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="2">meaning</governor>
            <dependent idx="4">life</dependent>
          </dep>
          <dep type="prep_as">
            <governor idx="4">life</governor>
            <dependent idx="6">we</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="10">derived</governor>
            <dependent idx="8">it</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="10">derived</governor>
            <dependent idx="9">is</dependent>
          </dep>
          <dep type="ccomp">
            <governor idx="7">perceive</governor>
            <dependent idx="10">derived</dependent>
          </dep>
          <dep type="poss">
            <governor idx="16">contemplation</governor>
            <dependent idx="12">our</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">contemplation</governor>
            <dependent idx="13">philosophical</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="13">philosophical</governor>
            <dependent idx="15">religious</dependent>
          </dep>
          <dep type="prep_from">
            <governor idx="10">derived</governor>
            <dependent idx="16">contemplation</dependent>
          </dep>
          <dep type="prep">
            <governor idx="16">contemplation</governor>
            <dependent idx="17">of</dependent>
          </dep>
          <dep type="amod">
            <governor idx="21">inquiries</governor>
            <dependent idx="20">scientific</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="16">contemplation</governor>
            <dependent idx="21">inquiries</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="21">inquiries</governor>
            <dependent idx="23">existence</dependent>
          </dep>
          <dep type="amod">
            <governor idx="26">ties</governor>
            <dependent idx="25">social</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="23">existence</governor>
            <dependent idx="26">ties</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="23">existence</governor>
            <dependent idx="28">consciousness</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="23">existence</governor>
            <dependent idx="31">happiness</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-ccprocessed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="7">perceive</dependent>
          </dep>
          <dep type="det">
            <governor idx="2">meaning</governor>
            <dependent idx="1">The</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="7">perceive</governor>
            <dependent idx="2">meaning</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="2">meaning</governor>
            <dependent idx="4">life</dependent>
          </dep>
          <dep type="prep_as">
            <governor idx="4">life</governor>
            <dependent idx="6">we</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="10">derived</governor>
            <dependent idx="8">it</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="10">derived</governor>
            <dependent idx="9">is</dependent>
          </dep>
          <dep type="ccomp">
            <governor idx="7">perceive</governor>
            <dependent idx="10">derived</dependent>
          </dep>
          <dep type="poss">
            <governor idx="16">contemplation</governor>
            <dependent idx="12">our</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">contemplation</governor>
            <dependent idx="13">philosophical</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="13">philosophical</governor>
            <dependent idx="15">religious</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">contemplation</governor>
            <dependent idx="15">religious</dependent>
          </dep>
          <dep type="prep_from">
            <governor idx="10">derived</governor>
            <dependent idx="16">contemplation</dependent>
          </dep>
          <dep type="prep">
            <governor idx="16">contemplation</governor>
            <dependent idx="17">of</dependent>
          </dep>
          <dep type="amod">
            <governor idx="21">inquiries</governor>
            <dependent idx="20">scientific</dependent>
          </dep>
          <dep type="prep_from">
            <governor idx="10">derived</governor>
            <dependent idx="21">inquiries</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="16">contemplation</governor>
            <dependent idx="21">inquiries</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="21">inquiries</governor>
            <dependent idx="23">existence</dependent>
          </dep>
          <dep type="amod">
            <governor idx="26">ties</governor>
            <dependent idx="25">social</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="21">inquiries</governor>
            <dependent idx="26">ties</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="23">existence</governor>
            <dependent idx="26">ties</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="21">inquiries</governor>
            <dependent idx="28">consciousness</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="23">existence</governor>
            <dependent idx="28">consciousness</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="21">inquiries</governor>
            <dependent idx="31">happiness</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="23">existence</governor>
            <dependent idx="31">happiness</dependent>
          </dep>
        </dependencies>
      </sentence>
      <sentence id="2">
        <tokens>
          <token id="1">
            <word>Many</word>
            <lemma>many</lemma>
            <CharacterOffsetBegin>189</CharacterOffsetBegin>
            <CharacterOffsetEnd>193</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="2">
            <word>other</word>
            <lemma>other</lemma>
            <CharacterOffsetBegin>194</CharacterOffsetBegin>
            <CharacterOffsetEnd>199</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="3">
            <word>issues</word>
            <lemma>issue</lemma>
            <CharacterOffsetBegin>200</CharacterOffsetBegin>
            <CharacterOffsetEnd>206</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="4">
            <word>are</word>
            <lemma>be</lemma>
            <CharacterOffsetBegin>207</CharacterOffsetBegin>
            <CharacterOffsetEnd>210</CharacterOffsetEnd>
            <POS>VBP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="5">
            <word>also</word>
            <lemma>also</lemma>
            <CharacterOffsetBegin>211</CharacterOffsetBegin>
            <CharacterOffsetEnd>215</CharacterOffsetEnd>
            <POS>RB</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="6">
            <word>involved</word>
            <lemma>involve</lemma>
            <CharacterOffsetBegin>216</CharacterOffsetBegin>
            <CharacterOffsetEnd>224</CharacterOffsetEnd>
            <POS>VBN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="7">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>224</CharacterOffsetBegin>
            <CharacterOffsetEnd>225</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="8">
            <word>such</word>
            <lemma>such</lemma>
            <CharacterOffsetBegin>226</CharacterOffsetBegin>
            <CharacterOffsetEnd>230</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="9">
            <word>as</word>
            <lemma>as</lemma>
            <CharacterOffsetBegin>231</CharacterOffsetBegin>
            <CharacterOffsetEnd>233</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="10">
            <word>symbolic</word>
            <lemma>symbolic</lemma>
            <CharacterOffsetBegin>234</CharacterOffsetBegin>
            <CharacterOffsetEnd>242</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="11">
            <word>meaning</word>
            <lemma>meaning</lemma>
            <CharacterOffsetBegin>243</CharacterOffsetBegin>
            <CharacterOffsetEnd>250</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="12">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>250</CharacterOffsetBegin>
            <CharacterOffsetEnd>251</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="13">
            <word>ontology</word>
            <lemma>ontology</lemma>
            <CharacterOffsetBegin>252</CharacterOffsetBegin>
            <CharacterOffsetEnd>260</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="14">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>260</CharacterOffsetBegin>
            <CharacterOffsetEnd>261</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="15">
            <word>value</word>
            <lemma>value</lemma>
            <CharacterOffsetBegin>262</CharacterOffsetBegin>
            <CharacterOffsetEnd>267</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="16">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>267</CharacterOffsetBegin>
            <CharacterOffsetEnd>268</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="17">
            <word>purpose</word>
            <lemma>purpose</lemma>
            <CharacterOffsetBegin>269</CharacterOffsetBegin>
            <CharacterOffsetEnd>276</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="18">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>276</CharacterOffsetBegin>
            <CharacterOffsetEnd>277</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="19">
            <word>ethics</word>
            <lemma>ethic</lemma>
            <CharacterOffsetBegin>278</CharacterOffsetBegin>
            <CharacterOffsetEnd>284</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="20">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>284</CharacterOffsetBegin>
            <CharacterOffsetEnd>285</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="21">
            <word>good</word>
            <lemma>good</lemma>
            <CharacterOffsetBegin>286</CharacterOffsetBegin>
            <CharacterOffsetEnd>290</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="22">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>291</CharacterOffsetBegin>
            <CharacterOffsetEnd>294</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="23">
            <word>evil</word>
            <lemma>evil</lemma>
            <CharacterOffsetBegin>295</CharacterOffsetBegin>
            <CharacterOffsetEnd>299</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="24">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>299</CharacterOffsetBegin>
            <CharacterOffsetEnd>300</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="25">
            <word>free</word>
            <lemma>free</lemma>
            <CharacterOffsetBegin>301</CharacterOffsetBegin>
            <CharacterOffsetEnd>305</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="26">
            <word>will</word>
            <lemma>will</lemma>
            <CharacterOffsetBegin>306</CharacterOffsetBegin>
            <CharacterOffsetEnd>310</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="27">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>310</CharacterOffsetBegin>
            <CharacterOffsetEnd>311</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="28">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>312</CharacterOffsetBegin>
            <CharacterOffsetEnd>315</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="29">
            <word>existence</word>
            <lemma>existence</lemma>
            <CharacterOffsetBegin>316</CharacterOffsetBegin>
            <CharacterOffsetEnd>325</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="30">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>326</CharacterOffsetBegin>
            <CharacterOffsetEnd>328</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="31">
            <word>one</word>
            <lemma>one</lemma>
            <CharacterOffsetBegin>329</CharacterOffsetBegin>
            <CharacterOffsetEnd>332</CharacterOffsetEnd>
            <POS>CD</POS>
            <NER>NUMBER</NER>
            <NormalizedNER>1.0</NormalizedNER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="32">
            <word>or</word>
            <lemma>or</lemma>
            <CharacterOffsetBegin>333</CharacterOffsetBegin>
            <CharacterOffsetEnd>335</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="33">
            <word>multiple</word>
            <lemma>multiple</lemma>
            <CharacterOffsetBegin>336</CharacterOffsetBegin>
            <CharacterOffsetEnd>344</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="34">
            <word>gods</word>
            <lemma>god</lemma>
            <CharacterOffsetBegin>345</CharacterOffsetBegin>
            <CharacterOffsetEnd>349</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="35">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>349</CharacterOffsetBegin>
            <CharacterOffsetEnd>350</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="36">
            <word>conceptions</word>
            <lemma>conception</lemma>
            <CharacterOffsetBegin>351</CharacterOffsetBegin>
            <CharacterOffsetEnd>362</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="37">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>363</CharacterOffsetBegin>
            <CharacterOffsetEnd>365</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="38">
            <word>God</word>
            <lemma>God</lemma>
            <CharacterOffsetBegin>366</CharacterOffsetBegin>
            <CharacterOffsetEnd>369</CharacterOffsetEnd>
            <POS>NNP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="39">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>369</CharacterOffsetBegin>
            <CharacterOffsetEnd>370</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="40">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>371</CharacterOffsetBegin>
            <CharacterOffsetEnd>374</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="41">
            <word>soul</word>
            <lemma>soul</lemma>
            <CharacterOffsetBegin>375</CharacterOffsetBegin>
            <CharacterOffsetEnd>379</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="42">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>379</CharacterOffsetBegin>
            <CharacterOffsetEnd>380</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="43">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>381</CharacterOffsetBegin>
            <CharacterOffsetEnd>384</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="44">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>385</CharacterOffsetBegin>
            <CharacterOffsetEnd>388</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="45">
            <word>afterlife</word>
            <lemma>afterlife</lemma>
            <CharacterOffsetBegin>389</CharacterOffsetBegin>
            <CharacterOffsetEnd>398</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="46">
            <word>.</word>
            <lemma>.</lemma>
            <CharacterOffsetBegin>398</CharacterOffsetBegin>
            <CharacterOffsetEnd>399</CharacterOffsetEnd>
            <POS>.</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
        </tokens>
        <parse>(ROOT (S (NP (JJ Many) (JJ other) (NNS issues)) (VP (VBP are) (ADVP (RB also)) (VP (VBN involved) (, ,) (PP (JJ such) (IN as) (NP (NP (JJ symbolic) (NN meaning)) (, ,) (NP (NN ontology)) (, ,) (NP (NN value)) (, ,) (NP (NN purpose)) (, ,) (NP (NNS ethics)) (, ,) (ADJP (JJ good) (CC and) (JJ evil)) (, ,) (NP (JJ free) (NN will)) (, ,) (NP (NP (DT the) (NN existence)) (PP (IN of) (NP (CD one) (CC or) (JJ multiple) (NNS gods)))) (, ,) (NP (NP (NNS conceptions)) (PP (IN of) (NP (NP (NNP God)) (, ,) (NP (DT the) (NN soul))))) (, ,) (CC and) (NP (DT the) (NN afterlife)))))) (. .))) </parse>
        <dependencies type="basic-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">involved</dependent>
          </dep>
          <dep type="amod">
            <governor idx="3">issues</governor>
            <dependent idx="1">Many</dependent>
          </dep>
          <dep type="amod">
            <governor idx="3">issues</governor>
            <dependent idx="2">other</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="6">involved</governor>
            <dependent idx="3">issues</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="6">involved</governor>
            <dependent idx="4">are</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="6">involved</governor>
            <dependent idx="5">also</dependent>
          </dep>
          <dep type="mwe">
            <governor idx="9">as</governor>
            <dependent idx="8">such</dependent>
          </dep>
          <dep type="prep">
            <governor idx="6">involved</governor>
            <dependent idx="9">as</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="10">symbolic</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="9">as</governor>
            <dependent idx="11">meaning</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="13">ontology</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="15">value</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="17">purpose</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="19">ethics</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="21">good</dependent>
          </dep>
          <dep type="cc">
            <governor idx="21">good</governor>
            <dependent idx="22">and</dependent>
          </dep>
          <dep type="conj">
            <governor idx="21">good</governor>
            <dependent idx="23">evil</dependent>
          </dep>
          <dep type="amod">
            <governor idx="26">will</governor>
            <dependent idx="25">free</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="26">will</dependent>
          </dep>
          <dep type="det">
            <governor idx="29">existence</governor>
            <dependent idx="28">the</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="29">existence</dependent>
          </dep>
          <dep type="prep">
            <governor idx="29">existence</governor>
            <dependent idx="30">of</dependent>
          </dep>
          <dep type="nn">
            <governor idx="34">gods</governor>
            <dependent idx="31">one</dependent>
          </dep>
          <dep type="cc">
            <governor idx="31">one</governor>
            <dependent idx="32">or</dependent>
          </dep>
          <dep type="conj">
            <governor idx="31">one</governor>
            <dependent idx="33">multiple</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="30">of</governor>
            <dependent idx="34">gods</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="36">conceptions</dependent>
          </dep>
          <dep type="prep">
            <governor idx="36">conceptions</governor>
            <dependent idx="37">of</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="37">of</governor>
            <dependent idx="38">God</dependent>
          </dep>
          <dep type="det">
            <governor idx="41">soul</governor>
            <dependent idx="40">the</dependent>
          </dep>
          <dep type="appos">
            <governor idx="38">God</governor>
            <dependent idx="41">soul</dependent>
          </dep>
          <dep type="cc">
            <governor idx="11">meaning</governor>
            <dependent idx="43">and</dependent>
          </dep>
          <dep type="det">
            <governor idx="45">afterlife</governor>
            <dependent idx="44">the</dependent>
          </dep>
          <dep type="conj">
            <governor idx="11">meaning</governor>
            <dependent idx="45">afterlife</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">involved</dependent>
          </dep>
          <dep type="amod">
            <governor idx="3">issues</governor>
            <dependent idx="1">Many</dependent>
          </dep>
          <dep type="amod">
            <governor idx="3">issues</governor>
            <dependent idx="2">other</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="6">involved</governor>
            <dependent idx="3">issues</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="6">involved</governor>
            <dependent idx="4">are</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="6">involved</governor>
            <dependent idx="5">also</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="10">symbolic</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="11">meaning</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="13">ontology</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="15">value</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="17">purpose</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="19">ethics</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="21">good</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="21">good</governor>
            <dependent idx="23">evil</dependent>
          </dep>
          <dep type="amod">
            <governor idx="26">will</governor>
            <dependent idx="25">free</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="26">will</dependent>
          </dep>
          <dep type="det">
            <governor idx="29">existence</governor>
            <dependent idx="28">the</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="29">existence</dependent>
          </dep>
          <dep type="nn">
            <governor idx="34">gods</governor>
            <dependent idx="31">one</dependent>
          </dep>
          <dep type="conj_or">
            <governor idx="31">one</governor>
            <dependent idx="33">multiple</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="29">existence</governor>
            <dependent idx="34">gods</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="36">conceptions</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="36">conceptions</governor>
            <dependent idx="38">God</dependent>
          </dep>
          <dep type="det">
            <governor idx="41">soul</governor>
            <dependent idx="40">the</dependent>
          </dep>
          <dep type="appos">
            <governor idx="38">God</governor>
            <dependent idx="41">soul</dependent>
          </dep>
          <dep type="det">
            <governor idx="45">afterlife</governor>
            <dependent idx="44">the</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="45">afterlife</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-ccprocessed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">involved</dependent>
          </dep>
          <dep type="amod">
            <governor idx="3">issues</governor>
            <dependent idx="1">Many</dependent>
          </dep>
          <dep type="amod">
            <governor idx="3">issues</governor>
            <dependent idx="2">other</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="6">involved</governor>
            <dependent idx="3">issues</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="6">involved</governor>
            <dependent idx="4">are</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="6">involved</governor>
            <dependent idx="5">also</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="10">symbolic</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="11">meaning</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="13">ontology</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="13">ontology</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="15">value</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="15">value</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="17">purpose</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="17">purpose</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="19">ethics</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="19">ethics</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="21">good</dependent>
          </dep>
          <dep type="amod">
            <governor idx="11">meaning</governor>
            <dependent idx="23">evil</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="21">good</governor>
            <dependent idx="23">evil</dependent>
          </dep>
          <dep type="amod">
            <governor idx="26">will</governor>
            <dependent idx="25">free</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="26">will</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="26">will</dependent>
          </dep>
          <dep type="det">
            <governor idx="29">existence</governor>
            <dependent idx="28">the</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="29">existence</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="29">existence</dependent>
          </dep>
          <dep type="nn">
            <governor idx="34">gods</governor>
            <dependent idx="31">one</dependent>
          </dep>
          <dep type="conj_or">
            <governor idx="31">one</governor>
            <dependent idx="33">multiple</dependent>
          </dep>
          <dep type="nn">
            <governor idx="34">gods</governor>
            <dependent idx="33">multiple</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="29">existence</governor>
            <dependent idx="34">gods</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="36">conceptions</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="36">conceptions</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="36">conceptions</governor>
            <dependent idx="38">God</dependent>
          </dep>
          <dep type="det">
            <governor idx="41">soul</governor>
            <dependent idx="40">the</dependent>
          </dep>
          <dep type="appos">
            <governor idx="38">God</governor>
            <dependent idx="41">soul</dependent>
          </dep>
          <dep type="det">
            <governor idx="45">afterlife</governor>
            <dependent idx="44">the</dependent>
          </dep>
          <dep type="prep_such_as">
            <governor idx="6">involved</governor>
            <dependent idx="45">afterlife</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="11">meaning</governor>
            <dependent idx="45">afterlife</dependent>
          </dep>
        </dependencies>
      </sentence>
      <sentence id="3">
        <tokens>
          <token id="1">
            <word>Scientific</word>
            <lemma>Scientific</lemma>
            <CharacterOffsetBegin>400</CharacterOffsetBegin>
            <CharacterOffsetEnd>410</CharacterOffsetEnd>
            <POS>NNP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="2">
            <word>contributions</word>
            <lemma>contribution</lemma>
            <CharacterOffsetBegin>411</CharacterOffsetBegin>
            <CharacterOffsetEnd>424</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="3">
            <word>focus</word>
            <lemma>focus</lemma>
            <CharacterOffsetBegin>425</CharacterOffsetBegin>
            <CharacterOffsetEnd>430</CharacterOffsetEnd>
            <POS>VBP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="4">
            <word>primarily</word>
            <lemma>primarily</lemma>
            <CharacterOffsetBegin>431</CharacterOffsetBegin>
            <CharacterOffsetEnd>440</CharacterOffsetEnd>
            <POS>RB</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="5">
            <word>on</word>
            <lemma>on</lemma>
            <CharacterOffsetBegin>441</CharacterOffsetBegin>
            <CharacterOffsetEnd>443</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="6">
            <word>describing</word>
            <lemma>describe</lemma>
            <CharacterOffsetBegin>444</CharacterOffsetBegin>
            <CharacterOffsetEnd>454</CharacterOffsetEnd>
            <POS>VBG</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="7">
            <word>related</word>
            <lemma>related</lemma>
            <CharacterOffsetBegin>455</CharacterOffsetBegin>
            <CharacterOffsetEnd>462</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="8">
            <word>empirical</word>
            <lemma>empirical</lemma>
            <CharacterOffsetBegin>463</CharacterOffsetBegin>
            <CharacterOffsetEnd>472</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="9">
            <word>facts</word>
            <lemma>fact</lemma>
            <CharacterOffsetBegin>473</CharacterOffsetBegin>
            <CharacterOffsetEnd>478</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="10">
            <word>about</word>
            <lemma>about</lemma>
            <CharacterOffsetBegin>479</CharacterOffsetBegin>
            <CharacterOffsetEnd>484</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="11">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>485</CharacterOffsetBegin>
            <CharacterOffsetEnd>488</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="12">
            <word>universe</word>
            <lemma>universe</lemma>
            <CharacterOffsetBegin>489</CharacterOffsetBegin>
            <CharacterOffsetEnd>497</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="13">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>497</CharacterOffsetBegin>
            <CharacterOffsetEnd>498</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="14">
            <word>exploring</word>
            <lemma>explore</lemma>
            <CharacterOffsetBegin>499</CharacterOffsetBegin>
            <CharacterOffsetEnd>508</CharacterOffsetEnd>
            <POS>VBG</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="15">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>509</CharacterOffsetBegin>
            <CharacterOffsetEnd>512</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="16">
            <word>context</word>
            <lemma>context</lemma>
            <CharacterOffsetBegin>513</CharacterOffsetBegin>
            <CharacterOffsetEnd>520</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="17">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>521</CharacterOffsetBegin>
            <CharacterOffsetEnd>524</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="18">
            <word>parameters</word>
            <lemma>parameter</lemma>
            <CharacterOffsetBegin>525</CharacterOffsetBegin>
            <CharacterOffsetEnd>535</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="19">
            <word>concerning</word>
            <lemma>concern</lemma>
            <CharacterOffsetBegin>536</CharacterOffsetBegin>
            <CharacterOffsetEnd>546</CharacterOffsetEnd>
            <POS>VBG</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="20">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>547</CharacterOffsetBegin>
            <CharacterOffsetEnd>550</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="21">
            <word>`</word>
            <lemma>`</lemma>
            <CharacterOffsetBegin>551</CharacterOffsetBegin>
            <CharacterOffsetEnd>552</CharacterOffsetEnd>
            <POS>``</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="22">
            <word>how</word>
            <lemma>how</lemma>
            <CharacterOffsetBegin>552</CharacterOffsetBegin>
            <CharacterOffsetEnd>555</CharacterOffsetEnd>
            <POS>WRB</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="23">
            <word>'</word>
            <lemma>'</lemma>
            <CharacterOffsetBegin>555</CharacterOffsetBegin>
            <CharacterOffsetEnd>556</CharacterOffsetEnd>
            <POS>''</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="24">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>557</CharacterOffsetBegin>
            <CharacterOffsetEnd>559</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="25">
            <word>life</word>
            <lemma>life</lemma>
            <CharacterOffsetBegin>560</CharacterOffsetBegin>
            <CharacterOffsetEnd>564</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="26">
            <word>.</word>
            <lemma>.</lemma>
            <CharacterOffsetBegin>564</CharacterOffsetBegin>
            <CharacterOffsetEnd>565</CharacterOffsetEnd>
            <POS>.</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
        </tokens>
        <parse>(ROOT (S (NP (NNP Scientific) (NNS contributions)) (VP (VBP focus) (ADVP (RB primarily)) (PP (IN on) (S (VP (VBG describing) (NP (JJ related) (JJ empirical) (NNS facts)) (PP (IN about) (NP (NP (NP (DT the) (NN universe)) (, ,) (VP (VBG exploring) (NP (DT the) (NN context) (CC and) (NNS parameters)) (S (VP (VBG concerning) (NP (DT the)) (`` `) (NP (WRB how)))))) ('' ') (PP (IN of) (NP (NN life))))))))) (. .))) </parse>
        <dependencies type="basic-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="3">focus</dependent>
          </dep>
          <dep type="nn">
            <governor idx="2">contributions</governor>
            <dependent idx="1">Scientific</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="3">focus</governor>
            <dependent idx="2">contributions</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">focus</governor>
            <dependent idx="4">primarily</dependent>
          </dep>
          <dep type="prep">
            <governor idx="3">focus</governor>
            <dependent idx="5">on</dependent>
          </dep>
          <dep type="pcomp">
            <governor idx="5">on</governor>
            <dependent idx="6">describing</dependent>
          </dep>
          <dep type="amod">
            <governor idx="9">facts</governor>
            <dependent idx="7">related</dependent>
          </dep>
          <dep type="amod">
            <governor idx="9">facts</governor>
            <dependent idx="8">empirical</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">describing</governor>
            <dependent idx="9">facts</dependent>
          </dep>
          <dep type="prep">
            <governor idx="6">describing</governor>
            <dependent idx="10">about</dependent>
          </dep>
          <dep type="det">
            <governor idx="12">universe</governor>
            <dependent idx="11">the</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="10">about</governor>
            <dependent idx="12">universe</dependent>
          </dep>
          <dep type="vmod">
            <governor idx="12">universe</governor>
            <dependent idx="14">exploring</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">context</governor>
            <dependent idx="15">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="14">exploring</governor>
            <dependent idx="16">context</dependent>
          </dep>
          <dep type="cc">
            <governor idx="16">context</governor>
            <dependent idx="17">and</dependent>
          </dep>
          <dep type="conj">
            <governor idx="16">context</governor>
            <dependent idx="18">parameters</dependent>
          </dep>
          <dep type="vmod">
            <governor idx="14">exploring</governor>
            <dependent idx="19">concerning</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="19">concerning</governor>
            <dependent idx="20">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="19">concerning</governor>
            <dependent idx="22">how</dependent>
          </dep>
          <dep type="prep">
            <governor idx="12">universe</governor>
            <dependent idx="24">of</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="24">of</governor>
            <dependent idx="25">life</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="3">focus</dependent>
          </dep>
          <dep type="nn">
            <governor idx="2">contributions</governor>
            <dependent idx="1">Scientific</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="3">focus</governor>
            <dependent idx="2">contributions</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">focus</governor>
            <dependent idx="4">primarily</dependent>
          </dep>
          <dep type="prepc_on">
            <governor idx="3">focus</governor>
            <dependent idx="6">describing</dependent>
          </dep>
          <dep type="amod">
            <governor idx="9">facts</governor>
            <dependent idx="7">related</dependent>
          </dep>
          <dep type="amod">
            <governor idx="9">facts</governor>
            <dependent idx="8">empirical</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">describing</governor>
            <dependent idx="9">facts</dependent>
          </dep>
          <dep type="det">
            <governor idx="12">universe</governor>
            <dependent idx="11">the</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="6">describing</governor>
            <dependent idx="12">universe</dependent>
          </dep>
          <dep type="vmod">
            <governor idx="12">universe</governor>
            <dependent idx="14">exploring</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">context</governor>
            <dependent idx="15">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="14">exploring</governor>
            <dependent idx="16">context</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="16">context</governor>
            <dependent idx="18">parameters</dependent>
          </dep>
          <dep type="vmod">
            <governor idx="14">exploring</governor>
            <dependent idx="19">concerning</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="19">concerning</governor>
            <dependent idx="20">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="19">concerning</governor>
            <dependent idx="22">how</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="12">universe</governor>
            <dependent idx="25">life</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-ccprocessed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="3">focus</dependent>
          </dep>
          <dep type="nn">
            <governor idx="2">contributions</governor>
            <dependent idx="1">Scientific</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="3">focus</governor>
            <dependent idx="2">contributions</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">focus</governor>
            <dependent idx="4">primarily</dependent>
          </dep>
          <dep type="prepc_on">
            <governor idx="3">focus</governor>
            <dependent idx="6">describing</dependent>
          </dep>
          <dep type="amod">
            <governor idx="9">facts</governor>
            <dependent idx="7">related</dependent>
          </dep>
          <dep type="amod">
            <governor idx="9">facts</governor>
            <dependent idx="8">empirical</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">describing</governor>
            <dependent idx="9">facts</dependent>
          </dep>
          <dep type="det">
            <governor idx="12">universe</governor>
            <dependent idx="11">the</dependent>
          </dep>
          <dep type="prep_about">
            <governor idx="6">describing</governor>
            <dependent idx="12">universe</dependent>
          </dep>
          <dep type="vmod">
            <governor idx="12">universe</governor>
            <dependent idx="14">exploring</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">context</governor>
            <dependent idx="15">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="14">exploring</governor>
            <dependent idx="16">context</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="14">exploring</governor>
            <dependent idx="18">parameters</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="16">context</governor>
            <dependent idx="18">parameters</dependent>
          </dep>
          <dep type="vmod">
            <governor idx="14">exploring</governor>
            <dependent idx="19">concerning</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="19">concerning</governor>
            <dependent idx="20">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="19">concerning</governor>
            <dependent idx="22">how</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="12">universe</governor>
            <dependent idx="25">life</dependent>
          </dep>
        </dependencies>
      </sentence>
      <sentence id="4">
        <tokens>
          <token id="1">
            <word>Science</word>
            <lemma>Science</lemma>
            <CharacterOffsetBegin>566</CharacterOffsetBegin>
            <CharacterOffsetEnd>573</CharacterOffsetEnd>
            <POS>NNP</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="2">
            <word>also</word>
            <lemma>also</lemma>
            <CharacterOffsetBegin>574</CharacterOffsetBegin>
            <CharacterOffsetEnd>578</CharacterOffsetEnd>
            <POS>RB</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="3">
            <word>studies</word>
            <lemma>study</lemma>
            <CharacterOffsetBegin>579</CharacterOffsetBegin>
            <CharacterOffsetEnd>586</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="4">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>587</CharacterOffsetBegin>
            <CharacterOffsetEnd>590</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="5">
            <word>can</word>
            <lemma>can</lemma>
            <CharacterOffsetBegin>591</CharacterOffsetBegin>
            <CharacterOffsetEnd>594</CharacterOffsetEnd>
            <POS>MD</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="6">
            <word>provide</word>
            <lemma>provide</lemma>
            <CharacterOffsetBegin>595</CharacterOffsetBegin>
            <CharacterOffsetEnd>602</CharacterOffsetEnd>
            <POS>VB</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="7">
            <word>recommendations</word>
            <lemma>recommendation</lemma>
            <CharacterOffsetBegin>603</CharacterOffsetBegin>
            <CharacterOffsetEnd>618</CharacterOffsetEnd>
            <POS>NNS</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="8">
            <word>for</word>
            <lemma>for</lemma>
            <CharacterOffsetBegin>619</CharacterOffsetBegin>
            <CharacterOffsetEnd>622</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="9">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>623</CharacterOffsetBegin>
            <CharacterOffsetEnd>626</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="10">
            <word>pursuit</word>
            <lemma>pursuit</lemma>
            <CharacterOffsetBegin>627</CharacterOffsetBegin>
            <CharacterOffsetEnd>634</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="11">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>635</CharacterOffsetBegin>
            <CharacterOffsetEnd>637</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="12">
            <word>well-being</word>
            <lemma>well-being</lemma>
            <CharacterOffsetBegin>638</CharacterOffsetBegin>
            <CharacterOffsetEnd>648</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="13">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>649</CharacterOffsetBegin>
            <CharacterOffsetEnd>652</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="14">
            <word>a</word>
            <lemma>a</lemma>
            <CharacterOffsetBegin>653</CharacterOffsetBegin>
            <CharacterOffsetEnd>654</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="15">
            <word>related</word>
            <lemma>related</lemma>
            <CharacterOffsetBegin>655</CharacterOffsetBegin>
            <CharacterOffsetEnd>662</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="16">
            <word>conception</word>
            <lemma>conception</lemma>
            <CharacterOffsetBegin>663</CharacterOffsetBegin>
            <CharacterOffsetEnd>673</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="17">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>674</CharacterOffsetBegin>
            <CharacterOffsetEnd>676</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="18">
            <word>morality</word>
            <lemma>morality</lemma>
            <CharacterOffsetBegin>677</CharacterOffsetBegin>
            <CharacterOffsetEnd>685</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="19">
            <word>.</word>
            <lemma>.</lemma>
            <CharacterOffsetBegin>685</CharacterOffsetBegin>
            <CharacterOffsetEnd>686</CharacterOffsetEnd>
            <POS>.</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
        </tokens>
        <parse>(ROOT (S (NP (NNP Science)) (VP (VP (ADVP (RB also)) (NP (NNS studies))) (CC and) (VP (MD can) (VP (VB provide) (NP (NNS recommendations)) (PP (IN for) (NP (NP (NP (DT the) (NN pursuit)) (PP (IN of) (NP (NN well-being)))) (CC and) (NP (NP (DT a) (JJ related) (NN conception)) (PP (IN of) (NP (NN morality))))))))) (. .))) </parse>
        <dependencies type="basic-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="3">studies</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="3">studies</governor>
            <dependent idx="1">Science</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">studies</governor>
            <dependent idx="2">also</dependent>
          </dep>
          <dep type="cc">
            <governor idx="3">studies</governor>
            <dependent idx="4">and</dependent>
          </dep>
          <dep type="aux">
            <governor idx="6">provide</governor>
            <dependent idx="5">can</dependent>
          </dep>
          <dep type="conj">
            <governor idx="3">studies</governor>
            <dependent idx="6">provide</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">provide</governor>
            <dependent idx="7">recommendations</dependent>
          </dep>
          <dep type="prep">
            <governor idx="6">provide</governor>
            <dependent idx="8">for</dependent>
          </dep>
          <dep type="det">
            <governor idx="10">pursuit</governor>
            <dependent idx="9">the</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="8">for</governor>
            <dependent idx="10">pursuit</dependent>
          </dep>
          <dep type="prep">
            <governor idx="10">pursuit</governor>
            <dependent idx="11">of</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="11">of</governor>
            <dependent idx="12">well-being</dependent>
          </dep>
          <dep type="cc">
            <governor idx="10">pursuit</governor>
            <dependent idx="13">and</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">conception</governor>
            <dependent idx="14">a</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">conception</governor>
            <dependent idx="15">related</dependent>
          </dep>
          <dep type="conj">
            <governor idx="10">pursuit</governor>
            <dependent idx="16">conception</dependent>
          </dep>
          <dep type="prep">
            <governor idx="16">conception</governor>
            <dependent idx="17">of</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="17">of</governor>
            <dependent idx="18">morality</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="3">studies</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="3">studies</governor>
            <dependent idx="1">Science</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">studies</governor>
            <dependent idx="2">also</dependent>
          </dep>
          <dep type="aux">
            <governor idx="6">provide</governor>
            <dependent idx="5">can</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="3">studies</governor>
            <dependent idx="6">provide</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">provide</governor>
            <dependent idx="7">recommendations</dependent>
          </dep>
          <dep type="det">
            <governor idx="10">pursuit</governor>
            <dependent idx="9">the</dependent>
          </dep>
          <dep type="prep_for">
            <governor idx="6">provide</governor>
            <dependent idx="10">pursuit</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="10">pursuit</governor>
            <dependent idx="12">well-being</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">conception</governor>
            <dependent idx="14">a</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">conception</governor>
            <dependent idx="15">related</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="10">pursuit</governor>
            <dependent idx="16">conception</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="16">conception</governor>
            <dependent idx="18">morality</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-ccprocessed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="3">studies</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="3">studies</governor>
            <dependent idx="1">Science</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="6">provide</governor>
            <dependent idx="1">Science</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">studies</governor>
            <dependent idx="2">also</dependent>
          </dep>
          <dep type="aux">
            <governor idx="6">provide</governor>
            <dependent idx="5">can</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="3">studies</governor>
            <dependent idx="6">provide</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">provide</governor>
            <dependent idx="7">recommendations</dependent>
          </dep>
          <dep type="det">
            <governor idx="10">pursuit</governor>
            <dependent idx="9">the</dependent>
          </dep>
          <dep type="prep_for">
            <governor idx="6">provide</governor>
            <dependent idx="10">pursuit</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="10">pursuit</governor>
            <dependent idx="12">well-being</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">conception</governor>
            <dependent idx="14">a</dependent>
          </dep>
          <dep type="amod">
            <governor idx="16">conception</governor>
            <dependent idx="15">related</dependent>
          </dep>
          <dep type="prep_for">
            <governor idx="6">provide</governor>
            <dependent idx="16">conception</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="10">pursuit</governor>
            <dependent idx="16">conception</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="16">conception</governor>
            <dependent idx="18">morality</dependent>
          </dep>
        </dependencies>
      </sentence>
      <sentence id="5">
        <tokens>
          <token id="1">
            <word>An</word>
            <lemma>a</lemma>
            <CharacterOffsetBegin>687</CharacterOffsetBegin>
            <CharacterOffsetEnd>689</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="2">
            <word>alternative</word>
            <lemma>alternative</lemma>
            <CharacterOffsetBegin>690</CharacterOffsetBegin>
            <CharacterOffsetEnd>701</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="3">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>701</CharacterOffsetBegin>
            <CharacterOffsetEnd>702</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="4">
            <word>humanistic</word>
            <lemma>humanistic</lemma>
            <CharacterOffsetBegin>703</CharacterOffsetBegin>
            <CharacterOffsetEnd>713</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="5">
            <word>approach</word>
            <lemma>approach</lemma>
            <CharacterOffsetBegin>714</CharacterOffsetBegin>
            <CharacterOffsetEnd>722</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="6">
            <word>poses</word>
            <lemma>pose</lemma>
            <CharacterOffsetBegin>723</CharacterOffsetBegin>
            <CharacterOffsetEnd>728</CharacterOffsetEnd>
            <POS>VBZ</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="7">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>729</CharacterOffsetBegin>
            <CharacterOffsetEnd>732</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="8">
            <word>question</word>
            <lemma>question</lemma>
            <CharacterOffsetBegin>733</CharacterOffsetBegin>
            <CharacterOffsetEnd>741</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
          <token id="9">
            <word>``</word>
            <lemma>``</lemma>
            <CharacterOffsetBegin>742</CharacterOffsetBegin>
            <CharacterOffsetEnd>743</CharacterOffsetEnd>
            <POS>``</POS>
            <NER>O</NER>
          </token>
          <token id="10">
            <word>What</word>
            <lemma>what</lemma>
            <CharacterOffsetBegin>743</CharacterOffsetBegin>
            <CharacterOffsetEnd>747</CharacterOffsetEnd>
            <POS>WP</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="11">
            <word>is</word>
            <lemma>be</lemma>
            <CharacterOffsetBegin>748</CharacterOffsetBegin>
            <CharacterOffsetEnd>750</CharacterOffsetEnd>
            <POS>VBZ</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="12">
            <word>the</word>
            <lemma>the</lemma>
            <CharacterOffsetBegin>751</CharacterOffsetBegin>
            <CharacterOffsetEnd>754</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="13">
            <word>meaning</word>
            <lemma>meaning</lemma>
            <CharacterOffsetBegin>755</CharacterOffsetBegin>
            <CharacterOffsetEnd>762</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="14">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>763</CharacterOffsetBegin>
            <CharacterOffsetEnd>765</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="15">
            <word>my</word>
            <lemma>my</lemma>
            <CharacterOffsetBegin>766</CharacterOffsetBegin>
            <CharacterOffsetEnd>768</CharacterOffsetEnd>
            <POS>PRP$</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="16">
            <word>life</word>
            <lemma>life</lemma>
            <CharacterOffsetBegin>769</CharacterOffsetBegin>
            <CharacterOffsetEnd>773</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="17">
            <word>?</word>
            <lemma>?</lemma>
            <CharacterOffsetBegin>773</CharacterOffsetBegin>
            <CharacterOffsetEnd>774</CharacterOffsetEnd>
            <POS>.</POS>
            <NER>O</NER>
            <Speaker>PER1</Speaker>
          </token>
          <token id="18">
            <word>''</word>
            <lemma>''</lemma>
            <CharacterOffsetBegin>774</CharacterOffsetBegin>
            <CharacterOffsetEnd>775</CharacterOffsetEnd>
            <POS>''</POS>
            <NER>O</NER>
            <Speaker>PER0</Speaker>
          </token>
        </tokens>
        <parse>(ROOT (S (NP (DT An) (NN alternative) (, ,) (JJ humanistic) (NN approach)) (VP (VBZ poses) (NP (NP (DT the) (NN question)) (`` ``) (SBAR (WHNP (WP What)) (S (VP (VBZ is) (NP (NP (DT the) (NN meaning)) (PP (IN of) (NP (PRP$ my) (NN life))))))))) (. ?) ('' ''))) </parse>
        <dependencies type="basic-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">poses</dependent>
          </dep>
          <dep type="det">
            <governor idx="5">approach</governor>
            <dependent idx="1">An</dependent>
          </dep>
          <dep type="nn">
            <governor idx="5">approach</governor>
            <dependent idx="2">alternative</dependent>
          </dep>
          <dep type="amod">
            <governor idx="5">approach</governor>
            <dependent idx="4">humanistic</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="6">poses</governor>
            <dependent idx="5">approach</dependent>
          </dep>
          <dep type="det">
            <governor idx="8">question</governor>
            <dependent idx="7">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">poses</governor>
            <dependent idx="8">question</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="13">meaning</governor>
            <dependent idx="10">What</dependent>
          </dep>
          <dep type="cop">
            <governor idx="13">meaning</governor>
            <dependent idx="11">is</dependent>
          </dep>
          <dep type="det">
            <governor idx="13">meaning</governor>
            <dependent idx="12">the</dependent>
          </dep>
          <dep type="rcmod">
            <governor idx="8">question</governor>
            <dependent idx="13">meaning</dependent>
          </dep>
          <dep type="prep">
            <governor idx="13">meaning</governor>
            <dependent idx="14">of</dependent>
          </dep>
          <dep type="poss">
            <governor idx="16">life</governor>
            <dependent idx="15">my</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="14">of</governor>
            <dependent idx="16">life</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">poses</dependent>
          </dep>
          <dep type="det">
            <governor idx="5">approach</governor>
            <dependent idx="1">An</dependent>
          </dep>
          <dep type="nn">
            <governor idx="5">approach</governor>
            <dependent idx="2">alternative</dependent>
          </dep>
          <dep type="amod">
            <governor idx="5">approach</governor>
            <dependent idx="4">humanistic</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="6">poses</governor>
            <dependent idx="5">approach</dependent>
          </dep>
          <dep type="det">
            <governor idx="8">question</governor>
            <dependent idx="7">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">poses</governor>
            <dependent idx="8">question</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="13">meaning</governor>
            <dependent idx="10">What</dependent>
          </dep>
          <dep type="cop">
            <governor idx="13">meaning</governor>
            <dependent idx="11">is</dependent>
          </dep>
          <dep type="det">
            <governor idx="13">meaning</governor>
            <dependent idx="12">the</dependent>
          </dep>
          <dep type="rcmod">
            <governor idx="8">question</governor>
            <dependent idx="13">meaning</dependent>
          </dep>
          <dep type="poss">
            <governor idx="16">life</governor>
            <dependent idx="15">my</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="13">meaning</governor>
            <dependent idx="16">life</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-ccprocessed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">poses</dependent>
          </dep>
          <dep type="det">
            <governor idx="5">approach</governor>
            <dependent idx="1">An</dependent>
          </dep>
          <dep type="nn">
            <governor idx="5">approach</governor>
            <dependent idx="2">alternative</dependent>
          </dep>
          <dep type="amod">
            <governor idx="5">approach</governor>
            <dependent idx="4">humanistic</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="6">poses</governor>
            <dependent idx="5">approach</dependent>
          </dep>
          <dep type="det">
            <governor idx="8">question</governor>
            <dependent idx="7">the</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="6">poses</governor>
            <dependent idx="8">question</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="13">meaning</governor>
            <dependent idx="10">What</dependent>
          </dep>
          <dep type="cop">
            <governor idx="13">meaning</governor>
            <dependent idx="11">is</dependent>
          </dep>
          <dep type="det">
            <governor idx="13">meaning</governor>
            <dependent idx="12">the</dependent>
          </dep>
          <dep type="rcmod">
            <governor idx="8">question</governor>
            <dependent idx="13">meaning</dependent>
          </dep>
          <dep type="poss">
            <governor idx="16">life</governor>
            <dependent idx="15">my</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="13">meaning</governor>
            <dependent idx="16">life</dependent>
          </dep>
        </dependencies>
      </sentence>
    </sentences>
    <coreference>
      <coreference>
        <mention representative="true">
          <sentence>1</sentence>
          <start>1</start>
          <end>7</end>
          <head>2</head>
          <text>The meaning of life as we</text>
        </mention>
        <mention>
          <sentence>1</sentence>
          <start>8</start>
          <end>9</end>
          <head>8</head>
          <text>it</text>
        </mention>
        <mention>
          <sentence>5</sentence>
          <start>12</start>
          <end>17</end>
          <head>13</head>
          <text>the meaning of my life</text>
        </mention>
      </coreference>
      <coreference>
        <mention representative="true">
          <sentence>5</sentence>
          <start>15</start>
          <end>17</end>
          <head>16</head>
          <text>my life</text>
        </mention>
        <mention>
          <sentence>1</sentence>
          <start>4</start>
          <end>7</end>
          <head>4</head>
          <text>life as we</text>
        </mention>
      </coreference>
      <coreference>
        <mention representative="true">
          <sentence>1</sentence>
          <start>6</start>
          <end>7</end>
          <head>6</head>
          <text>we</text>
        </mention>
        <mention>
          <sentence>1</sentence>
          <start>12</start>
          <end>13</end>
          <head>12</head>
          <text>our</text>
        </mention>
      </coreference>
      <coreference>
        <mention representative="true">
          <sentence>1</sentence>
          <start>12</start>
          <end>18</end>
          <head>16</head>
          <text>our philosophical and religious contemplation of</text>
        </mention>
        <mention>
          <sentence>1</sentence>
          <start>20</start>
          <end>32</end>
          <head>21</head>
          <text>scientific inquiries about existence , social ties , consciousness , and happiness</text>
        </mention>
      </coreference>
      <coreference>
        <mention representative="true">
          <sentence>2</sentence>
          <start>36</start>
          <end>42</end>
          <head>36</head>
          <text>conceptions of God , the soul</text>
        </mention>
        <mention>
          <sentence>2</sentence>
          <start>19</start>
          <end>20</end>
          <head>19</head>
          <text>ethics</text>
        </mention>
      </coreference>
      <coreference>
        <mention representative="true">
          <sentence>2</sentence>
          <start>28</start>
          <end>35</end>
          <head>29</head>
          <text>the existence of one or multiple gods</text>
        </mention>
        <mention>
          <sentence>2</sentence>
          <start>44</start>
          <end>46</end>
          <head>45</head>
          <text>the afterlife</text>
        </mention>
      </coreference>
      <coreference>
        <mention representative="true">
          <sentence>3</sentence>
          <start>20</start>
          <end>21</end>
          <head>20</head>
          <text>the</text>
        </mention>
        <mention>
          <sentence>5</sentence>
          <start>15</start>
          <end>16</end>
          <head>15</head>
          <text>my</text>
        </mention>
      </coreference>
    </coreference>
  </document>
</root>
 ]

[16/12/2015 - 13:21:19] (10.0.2.2|)  => hello
[16/12/2015 - 13:21:19] (10.0.2.2|)  => Error :while scanning a block scalar
 in 'string', line 1, column 1:
    >>> Processing cinq_semaines_en_ ... 
    ^
expected chomping or indentation indicators, but found >
 in 'string', line 1, column 2:
    >>> Processing cinq_semaines_en_b ... 
     ^

[16/12/2015 - 13:24:8] (10.0.2.2|)  => hello
[16/12/2015 - 13:24:8] (10.0.2.2|)  => {"creationdate":"2015-12-16T11:58:27.472","def":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/bonsai_parser"},"IN_DIR":{"type":"VAL","value":"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-10664724-eda3-4626-a9eb-b3ce56dcfb76"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/bonsai_parser"},"OUT_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-10664724-eda3-4626-a9eb-b3ce56dcfb76/"},"IN_DIR":{"type":"VAL","value":"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-10664724-eda3-4626-a9eb-b3ce56dcfb76"}},"ruid":"10664724-eda3-4626-a9eb-b3ce56dcfb76","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":""},"_CUR_MOD":{"type":"VAL","value":"bonsai-parser@munshi"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/bonsai_parser"},"_CMD.STDERR":{"type":"VAL","value":">>> Processing cinq_semaines_en_ballon.xml ... + Extracting Text ... * Parsing ... Don3 * Element Repetition Detection and Removal ... Don3 * Identification of List Markings ... Don3 * Cleaning Content ... Don3 * Normalizing Sub-Blocks ... Don3 * Normalizing Using Brackets ... Don3 * Merging Blocks ... Don3 * Improbable Block Removal ... Don3 * Generating Token Definition ... Don3 * Writing Output ... Don3 + Parsing ... + Unifying ... + Completed Successfully. >>> Processing comte_chanteleine.xml ... + Extracting Text ... * Parsing ... Don3 * Element Repetition Detection and Removal ... Don3 * Identification of List Markings ... Don3 * Cleaning Content ... Don3 * Normalizing Sub-Blocks ... Don3 * Normalizing Using Brackets ... Don3 * Merging Blocks ... Don3 * Improbable Block Removal ... Don3 * Generating Token Definition ... Don3 * Writing Output ... Don3 + Parsing ... + Unifying ... + Completed Successfully."},"IN_DIR":{"type":"DIR","value":"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-10664724-eda3-4626-a9eb-b3ce56dcfb76/"},"_MOD_CONTEXT":{"type":"VAL","value":"bonsai-parser@munshi"}},"processport":"53118","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"bonsai-parser@munshi","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[16/12/2015 - 13:29:48] (10.0.2.2|)  => hello
[16/12/2015 - 13:29:48] (10.0.2.2|)  => 
[16/12/2015 - 13:29:48] (10.0.2.2|)  => hello
[16/12/2015 - 13:29:48] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 13:29:48] (10.0.2.2|)  => hello
[16/12/2015 - 13:29:48] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 13:29:49] (10.0.2.2|)  => hello
[16/12/2015 - 13:29:49] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 13:29:49] (10.0.2.2|)  => hello
[16/12/2015 - 13:29:59] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 13:29:59] (10.0.2.2|)  => hello
[16/12/2015 - 13:30:0] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4
pipeline-test : f7e2655c-1f32-46dd-a412-fba73691494e
bonsai-parser@munshi : 10664724-eda3-4626-a9eb-b3ce56dcfb76
pipeline-test : 71208b25-ee55-41dc-bf1b-41001901ebeb
corenlp-server : f9b895ca-e56b-4675-85c3-6019b3db4aec
corenlp-server : d2325883-7eea-4365-a606-208f2932b844

[16/12/2015 - 13:30:0] (10.0.2.2|)  => hello
[16/12/2015 - 13:30:0] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[16/12/2015 - 13:31:19] (10.0.2.2|)  => hello
[16/12/2015 - 13:31:20] (10.0.2.2|)  => 7c660c25-8d5e-4106-867b-9e7f4877c608
[16/12/2015 - 13:31:20] (10.0.2.2|)  => hello
[16/12/2015 - 13:31:20] (10.0.2.2|)  => {"creationdate":"2015-12-16T13:31:20.071","def":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples/modules/corenlp-server\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-7c660c25-8d5e-4106-867b-9e7f4877c608"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples/modules/corenlp-server\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/corenlp-server/run-7c660c25-8d5e-4106-867b-9e7f4877c608"}},"ruid":"7c660c25-8d5e-4106-867b-9e7f4877c608","parentProcess":"None","env":"","processport":"51516","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"corenlp-server","parentport":"13847","completeddate":"","status":"Running"}
[16/12/2015 - 13:31:39] (10.0.2.2|)  => hello
[16/12/2015 - 13:31:39] (10.0.2.2|)  => 58117de8-2a3a-406d-b6a4-f556c3b96464
[16/12/2015 - 13:31:39] (10.0.2.2|)  => hello
[16/12/2015 - 13:31:39] (10.0.2.2|)  => {"creationdate":"2015-12-16T13:31:39.021","def":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/bonsai_parser\""},"IN_DIR":{"type":"VAL","value":"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-58117de8-2a3a-406d-b6a4-f556c3b96464"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/bonsai_parser\""},"IN_DIR":{"type":"VAL","value":"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-58117de8-2a3a-406d-b6a4-f556c3b96464"}},"ruid":"58117de8-2a3a-406d-b6a4-f556c3b96464","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"bonsai-parser@munshi"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/bonsai_parser"},"IN_DIR":{"type":"DIR","value":"\"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-58117de8-2a3a-406d-b6a4-f556c3b96464/"},"_MOD_CONTEXT":{"type":"VAL","value":"bonsai-parser@munshi"}},"processport":"8304","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"bonsai-parser@munshi","parentport":"36549","completeddate":"","status":"Running"}
[16/12/2015 - 13:31:44] (10.0.2.2|)  => hello
[16/12/2015 - 13:31:44] (10.0.2.2|)  => {"creationdate":"2015-12-16T13:31:20.071","def":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module","runconf":{"IN":{"type":"VAL","value":"\"/vagrant/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/examples/modules/corenlp-server\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/corenlp-server/run-7c660c25-8d5e-4106-867b-9e7f4877c608\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/vagrant/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples/modules/corenlp-server\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/corenlp-server/run-7c660c25-8d5e-4106-867b-9e7f4877c608\""},"OUT":{"type":"FILE","value":"\"\\\"/vagrant/data/results/corenlp-server/run-7c660c25-8d5e-4106-867b-9e7f4877c608//humanism.xml\\\"\""}},"ruid":"7c660c25-8d5e-4106-867b-9e7f4877c608","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/vagrant/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"corenlp-server\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples/modules/corenlp-server\""},"_CMD.STDERR":{"type":"VAL","value":"\"\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/corenlp-server/run-7c660c25-8d5e-4106-867b-9e7f4877c608/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"corenlp-server\""}},"processport":"25703","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"corenlp-server","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[16/12/2015 - 13:33:15] (10.0.2.2|)  => hello
[16/12/2015 - 13:33:15] (10.0.2.2|)  => {"creationdate":"2015-12-16T13:31:39.021","def":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/bonsai_parser\""},"IN_DIR":{"type":"VAL","value":"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-58117de8-2a3a-406d-b6a4-f556c3b96464"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/bonsai_parser\""},"IN_DIR":{"type":"VAL","value":"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox"},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-58117de8-2a3a-406d-b6a4-f556c3b96464"}},"ruid":"58117de8-2a3a-406d-b6a4-f556c3b96464","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"bonsai-parser@munshi"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/bonsai_parser"},"IN_DIR":{"type":"DIR","value":"\"/vagrant/data/corpus//munshitest/munshidatatest/pdfbox\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/bonsai-parser@munshi/run-58117de8-2a3a-406d-b6a4-f556c3b96464/"},"_MOD_CONTEXT":{"type":"VAL","value":"bonsai-parser@munshi"}},"processport":"8304","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"bonsai-parser@munshi","parentport":"36549","completeddate":"","status":"Running"}
[16/12/2015 - 14:9:21] (10.0.2.2|)  => hello
[16/12/2015 - 14:9:31] (10.0.2.2|)  => ok
[16/12/2015 - 14:9:31] (10.0.2.2|)  => hello
[16/12/2015 - 14:9:31] (10.0.2.2|)  => 
[16/12/2015 - 14:9:32] (10.0.2.2|)  => hello
[16/12/2015 - 14:9:32] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 14:9:32] (10.0.2.2|)  => hello
[16/12/2015 - 14:9:32] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 14:9:32] (10.0.2.2|)  => hello
[16/12/2015 - 14:9:32] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 14:9:32] (10.0.2.2|)  => hello
[16/12/2015 - 14:9:32] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputDirectory $_RUN_DIR -file $IN"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:filename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputDirectory $_RUN_DIR -file $IN","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[16/12/2015 - 14:9:32] (10.0.2.2|)  => hello
[16/12/2015 - 14:9:43] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 14:9:43] (10.0.2.2|)  => hello
[16/12/2015 - 14:9:43] (10.0.2.2|)  => stanford-parser : 651bf344-a639-427a-8a6d-2a79bc2d067d
stanford-parser : 501e7b76-5e8b-4973-924a-77ac3134a566
pipeline-test : d0ffe9a4-1476-499b-9e54-e3dccbf2cad4
pipeline-test : f7e2655c-1f32-46dd-a412-fba73691494e
bonsai-parser@munshi : 10664724-eda3-4626-a9eb-b3ce56dcfb76
pipeline-test : 71208b25-ee55-41dc-bf1b-41001901ebeb
bonsai-parser@munshi : 58117de8-2a3a-406d-b6a4-f556c3b96464
corenlp-server : f9b895ca-e56b-4675-85c3-6019b3db4aec
corenlp-server : d2325883-7eea-4365-a606-208f2932b844
corenlp-server : 7c660c25-8d5e-4106-867b-9e7f4877c608

[16/12/2015 - 14:10:4] (10.0.2.2|)  => hello
[16/12/2015 - 14:10:4] (10.0.2.2|)  => a92afe77-3242-4dee-8c3e-e6b47145136e
[16/12/2015 - 14:10:4] (10.0.2.2|)  => hello
[16/12/2015 - 14:10:4] (10.0.2.2|)  => Error :while scanning a block scalar
 in 'string', line 4, column 11:
      value : >\n    "/vagrant/data/corpus//te ... 
              ^
expected chomping or indentation indicators, but found \
 in 'string', line 4, column 12:
      value : >\n    "/vagrant/data/corpus//tes ... 
               ^

[16/12/2015 - 14:10:29] (10.0.2.2|)  => hello
[16/12/2015 - 14:10:29] (10.0.2.2|)  => 83257259-1b49-4112-bb9f-6f114b88f924
[16/12/2015 - 14:10:29] (10.0.2.2|)  => hello
[16/12/2015 - 14:10:29] (10.0.2.2|)  => Error :while scanning a block scalar
 in 'string', line 4, column 11:
      value : >\n    "/vagrant/data/corpus/tes ... 
              ^
expected chomping or indentation indicators, but found \
 in 'string', line 4, column 12:
      value : >\n    "/vagrant/data/corpus/test ... 
               ^

[16/12/2015 - 14:10:45] (10.0.2.2|)  => hello
[16/12/2015 - 14:10:45] (10.0.2.2|)  => Error :while scanning a block scalar
 in 'string', line 4, column 11:
      value : >\n    "/vagrant/data/corpus/tes ... 
              ^
expected chomping or indentation indicators, but found \
 in 'string', line 4, column 12:
      value : >\n    "/vagrant/data/corpus/test ... 
               ^

[16/12/2015 - 14:15:18] (10.0.2.2|)  => hello
[16/12/2015 - 14:15:18] (10.0.2.2|)  => 
[16/12/2015 - 14:15:18] (10.0.2.2|)  => hello
[16/12/2015 - 14:15:18] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 14:15:18] (10.0.2.2|)  => hello
[16/12/2015 - 14:15:18] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 14:15:19] (10.0.2.2|)  => hello
[16/12/2015 - 14:15:19] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 14:15:19] (10.0.2.2|)  => hello
[16/12/2015 - 14:15:29] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 14:15:29] (10.0.2.2|)  => hello
[16/12/2015 - 14:15:30] (10.0.2.2|)  => 
[16/12/2015 - 14:15:30] (10.0.2.2|)  => hello
[16/12/2015 - 14:15:30] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension xml -outputDirectory $_RUN_DIR -file $IN"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:filename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension xml -outputDirectory $_RUN_DIR -file $IN","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[16/12/2015 - 14:16:46] (10.0.2.2|)  => hello
[16/12/2015 - 14:16:46] (10.0.2.2|)  => 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
[16/12/2015 - 14:16:46] (10.0.2.2|)  => hello
[16/12/2015 - 14:16:46] (10.0.2.2|)  => {"creationdate":"2015-12-16T14:16:46.372","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":"","parentEnv":"","ruid":"3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91","parentProcess":"None","env":"","processport":"53647","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Waiting"}
[16/12/2015 - 14:16:49] (10.0.2.2|)  => hello
[16/12/2015 - 14:16:49] (10.0.2.2|)  => {"creationdate":"2015-12-16T14:16:46.372","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91"}},"ruid":"3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-core-nlp"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/custom/jose_moreno"},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91/\""},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-core-nlp"}},"processport":"53647","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-core-nlp","parentport":"20595","completeddate":"","status":"Running"}
[16/12/2015 - 14:16:50] (10.0.2.2|)  => hello
[16/12/2015 - 14:16:50] (10.0.2.2|)  => {"creationdate":"2015-12-16T14:16:46.372","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91"}},"ruid":"3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-core-nlp"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/custom/jose_moreno"},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91/\""},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-core-nlp"}},"processport":"53647","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-core-nlp","parentport":"20595","completeddate":"","status":"Running"}
[16/12/2015 - 14:17:0] (10.0.2.2|)  => hello
[16/12/2015 - 14:17:0] (10.0.2.2|)  => {"creationdate":"2015-12-16T14:16:46.372","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91"}},"ruid":"3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/humanism.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-core-nlp"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/custom/jose_moreno"},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91/\""},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-core-nlp"}},"processport":"53647","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-core-nlp","parentport":"20595","completeddate":"","status":"Running"}
[16/12/2015 - 14:23:34] (10.0.2.2|)  => hello
[16/12/2015 - 14:23:34] (10.0.2.2|)  => {"creationdate":"2015-12-16T14:16:46.372","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/vagrant/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/vagrant/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91\""},"OUT":{"type":"FILE","value":"\"\\\"/vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91//humanism.txt.xml\\\"\""}},"ruid":"3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/vagrant/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.3 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [4.0 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [2.6 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [2.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 16, 2015 2:17:00 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 16, 2015 2:17:00 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 16, 2015 2:17:00 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /vagrant/data/corpus/testcorpus/humanism.txt ... writing to /vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91/humanism.txtxml Annotating file /vagrant/data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.0 sec. MorphaAnnotator: 0.0 sec. NERCombinerAnnotator: 0.4 sec. ParserAnnotator: 3.9 sec. DeterministicCorefAnnotator: 0.1 sec. TOTAL: 4.6 sec. for 132 tokens at 28.8 tokens/sec. Pipeline setup: 16.2 sec. Total time for StanfordCoreNLP pipeline: 20.9 sec.\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/stanford-core-nlp/run-3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"43450","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[16/12/2015 - 14:24:30] (10.0.2.2|)  => hello
[16/12/2015 - 14:24:30] (10.0.2.2|)  => f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
[16/12/2015 - 14:24:30] (10.0.2.2|)  => hello
[16/12/2015 - 14:24:30] (10.0.2.2|)  => {"creationdate":"2015-12-16T14:24:30.309","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-core-nlp/run-f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-core-nlp/run-f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e"}},"ruid":"f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-core-nlp"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/custom/jose_moreno"},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-core-nlp/run-f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e/\""},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-core-nlp"}},"processport":"39671","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-core-nlp","parentport":"19508","completeddate":"","status":"Running"}
[16/12/2015 - 14:24:56] (10.0.2.2|)  => hello
[16/12/2015 - 14:24:56] (10.0.2.2|)  => {"creationdate":"2015-12-16T14:24:30.309","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-core-nlp/run-f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-core-nlp/run-f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e\""},"OUT":{"type":"FILE","value":"\"\\\"/vagrant/data/results/stanford-core-nlp/run-f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e//meaning_of_life_full.txt.xml\\\"\""}},"ruid":"f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.3 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [3.9 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [2.4 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [2.1 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 16, 2015 2:24:41 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 16, 2015 2:24:43 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 16, 2015 2:24:43 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /vagrant/data/corpus/testcorpus/meaning_of_life_full.txt ... writing to /vagrant/data/results/stanford-core-nlp/run-f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e/meaning_of_life_full.txtxml Annotating file /vagrant/data/corpus/testcorpus/meaning_of_life_full.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.0 sec. MorphaAnnotator: 0.0 sec. NERCombinerAnnotator: 0.3 sec. ParserAnnotator: 3.5 sec. DeterministicCorefAnnotator: 0.3 sec. TOTAL: 4.3 sec. for 141 tokens at 33.0 tokens/sec. Pipeline setup: 15.5 sec. Total time for StanfordCoreNLP pipeline: 19.9 sec.\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/stanford-core-nlp/run-f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"59536","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[16/12/2015 - 14:25:2] (10.0.2.2|)  => hello
[16/12/2015 - 14:25:13] (10.0.2.2|)  => ok
[16/12/2015 - 14:25:28] (10.0.2.2|)  => hello
[16/12/2015 - 14:25:28] (10.0.2.2|)  => 75cc397b-a088-436d-8874-345dbb0dbc65
[16/12/2015 - 14:25:28] (10.0.2.2|)  => hello
[16/12/2015 - 14:25:28] (10.0.2.2|)  => {"creationdate":"2015-12-16T14:25:28.385","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-core-nlp/run-75cc397b-a088-436d-8874-345dbb0dbc65"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-core-nlp/run-75cc397b-a088-436d-8874-345dbb0dbc65"}},"ruid":"75cc397b-a088-436d-8874-345dbb0dbc65","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-core-nlp"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/custom/jose_moreno"},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-core-nlp/run-75cc397b-a088-436d-8874-345dbb0dbc65/\""},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-core-nlp"}},"processport":"29157","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-core-nlp","parentport":"35590","completeddate":"","status":"Running"}
[16/12/2015 - 14:25:48] (10.0.2.2|)  => hello
[16/12/2015 - 14:25:48] (10.0.2.2|)  => {"creationdate":"2015-12-16T14:25:28.385","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-core-nlp/run-75cc397b-a088-436d-8874-345dbb0dbc65"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-core-nlp/run-75cc397b-a088-436d-8874-345dbb0dbc65"}},"ruid":"75cc397b-a088-436d-8874-345dbb0dbc65","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-core-nlp"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/custom/jose_moreno"},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-core-nlp/run-75cc397b-a088-436d-8874-345dbb0dbc65/\""},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-core-nlp"}},"processport":"29157","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-core-nlp","parentport":"35590","completeddate":"","status":"Running"}
[16/12/2015 - 14:25:51] (10.0.2.2|)  => hello
[16/12/2015 - 14:25:51] (10.0.2.2|)  => {"creationdate":"2015-12-16T14:25:28.385","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-core-nlp/run-75cc397b-a088-436d-8874-345dbb0dbc65\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/vagrant/data/results/stanford-core-nlp/run-75cc397b-a088-436d-8874-345dbb0dbc65//meaning_of_life_full.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/vagrant/data/results/stanford-core-nlp/run-75cc397b-a088-436d-8874-345dbb0dbc65//meaning_of_life_full.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/stanford-core-nlp/run-75cc397b-a088-436d-8874-345dbb0dbc65\\\"\""}},"ruid":"75cc397b-a088-436d-8874-345dbb0dbc65","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/vagrant/data/corpus//testcorpus/meaning_of_life_full.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.4 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [4.1 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [2.7 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.8 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 16, 2015 2:25:42 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 16, 2015 2:25:42 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 16, 2015 2:25:42 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /vagrant/data/corpus/testcorpus/meaning_of_life_full.txt ... writing to /vagrant/data/results/stanford-core-nlp/run-75cc397b-a088-436d-8874-345dbb0dbc65/meaning_of_life_full.txt.xml Annotating file /vagrant/data/corpus/testcorpus/meaning_of_life_full.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.0 sec. MorphaAnnotator: 0.0 sec. NERCombinerAnnotator: 0.2 sec. ParserAnnotator: 3.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 3.7 sec. for 141 tokens at 37.8 tokens/sec. Pipeline setup: 16.6 sec. Total time for StanfordCoreNLP pipeline: 20.5 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-core-nlp/run-75cc397b-a088-436d-8874-345dbb0dbc65/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"62964","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[16/12/2015 - 14:41:8] (10.0.2.2|)  => hello
[16/12/2015 - 14:41:8] (10.0.2.2|)  => 
[16/12/2015 - 14:41:8] (10.0.2.2|)  => hello
[16/12/2015 - 14:41:8] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 14:41:8] (10.0.2.2|)  => hello
[16/12/2015 - 14:41:8] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 14:41:9] (10.0.2.2|)  => hello
[16/12/2015 - 14:41:9] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 14:41:9] (10.0.2.2|)  => hello
[16/12/2015 - 14:41:9] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[16/12/2015 - 14:41:9] (10.0.2.2|)  => hello
[16/12/2015 - 14:41:9] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65

[16/12/2015 - 14:41:9] (10.0.2.2|)  => hello
[16/12/2015 - 14:41:19] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 14:47:13] (10.0.2.2|)  => hello
[16/12/2015 - 14:47:13] (10.0.2.2|)  => 
[16/12/2015 - 14:47:13] (10.0.2.2|)  => hello
[16/12/2015 - 14:47:13] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 14:47:14] (10.0.2.2|)  => hello
[16/12/2015 - 14:47:14] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 14:47:14] (10.0.2.2|)  => hello
[16/12/2015 - 14:47:14] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 14:47:14] (10.0.2.2|)  => hello
[16/12/2015 - 14:47:25] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 14:47:25] (10.0.2.2|)  => hello
[16/12/2015 - 14:47:25] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65

[16/12/2015 - 14:47:25] (10.0.2.2|)  => hello
[16/12/2015 - 14:47:25] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[16/12/2015 - 15:47:53] (10.0.2.2|)  => hello
[16/12/2015 - 15:47:53] (10.0.2.2|)  => 
[16/12/2015 - 15:47:53] (10.0.2.2|)  => hello
[16/12/2015 - 15:47:53] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[16/12/2015 - 15:47:53] (10.0.2.2|)  => hello
[16/12/2015 - 15:47:53] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[16/12/2015 - 15:47:54] (10.0.2.2|)  => hello
[16/12/2015 - 15:48:8] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[16/12/2015 - 15:48:8] (10.0.2.2|)  => hello
[16/12/2015 - 15:48:8] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[16/12/2015 - 15:48:8] (10.0.2.2|)  => hello
[16/12/2015 - 15:48:18] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[16/12/2015 - 15:48:18] (10.0.2.2|)  => hello
[16/12/2015 - 15:48:19] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65

[16/12/2015 - 15:49:0] (10.0.2.2|)  => hello
[16/12/2015 - 15:49:0] (10.0.2.2|)  => 11576218-a347-40e8-8471-a2ba7a3c30c3
[16/12/2015 - 15:49:0] (10.0.2.2|)  => hello
[16/12/2015 - 15:49:0] (10.0.2.2|)  => {"creationdate":"2015-12-16T15:49:00.194","def":"/vagrant/modules/examples/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light/490051479555043328.txt/"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples/parsing\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-11576218-a347-40e8-8471-a2ba7a3c30c3"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light/490051479555043328.txt/"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples/parsing\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-11576218-a347-40e8-8471-a2ba7a3c30c3"}},"ruid":"11576218-a347-40e8-8471-a2ba7a3c30c3","parentProcess":"None","env":"","processport":"19909","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-parser","parentport":"30290","completeddate":"","status":"Running"}
[16/12/2015 - 15:49:12] (10.0.2.2|)  => hello
[16/12/2015 - 15:49:12] (10.0.2.2|)  => {"creationdate":"2015-12-16T15:49:00.194","def":"/vagrant/modules/examples/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"\"/vagrant/data/corpus//origtweets_light/490051479555043328.txt/\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/examples/parsing\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-parser/run-11576218-a347-40e8-8471-a2ba7a3c30c3\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/vagrant/data/corpus//origtweets_light/490051479555043328.txt/\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples/parsing\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-parser/run-11576218-a347-40e8-8471-a2ba7a3c30c3\""},"OUT":{"type":"FILE","value":"\"\\\"/vagrant/data/results/stanford-parser/run-11576218-a347-40e8-8471-a2ba7a3c30c3//490051479555043328.xml\\\"\""}},"ruid":"11576218-a347-40e8-8471-a2ba7a3c30c3","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#2conll.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"IN":{"type":"FILE","value":"\"/vagrant/data/corpus//origtweets_light/490051479555043328.txt/\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-parser\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples/parsing\""},"_CMD.STDERR":{"type":"VAL","value":"\"Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [1.0 sec]. Parsing file: /vagrant/data/corpus//origtweets_light/490051479555043328.txt/ Parsing [sent. 1 len. 13]: Les #zoneshumides camarguaises au centre d'une exposition en #Chine http://t.co/EegQgeFJRJ #camargue #provence #biodiversité Parsed file: /vagrant/data/corpus//origtweets_light/490051479555043328.txt/ [1 sentences]. Parsed 13 words in 1 sentences (14.08 wds/sec; 1.08 sents/sec).\""},"_CMD#2conll.STDERR":{"type":"VAL","value":"\"/bin/sh: 1: /vagrant/modules/examples/parsing/StfdParse2Conll.sh: Permission denied\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-parser/run-11576218-a347-40e8-8471-a2ba7a3c30c3/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-parser\""}},"processport":"63295","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-parser","parentport":"NONE","completeddate":"","status":"Exited(error when running : _CMD#2conll failed with exit value error when running : _CMD#2conll failed with exit value 126)"}
[16/12/2015 - 15:49:52] (10.0.2.2|)  => hello
[16/12/2015 - 15:49:52] (10.0.2.2|)  => 7ab7d919-48c0-42f9-9f12-74c70d58a4a6
[16/12/2015 - 15:49:52] (10.0.2.2|)  => hello
[16/12/2015 - 15:49:52] (10.0.2.2|)  => {"creationdate":"2015-12-16T15:49:52.177","def":"/vagrant/modules/examples/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light/490051479555043328.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples/parsing\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6"}},"parentEnv":{"IN":{"type":"VAL","value":"/vagrant/data/corpus//origtweets_light/490051479555043328.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples/parsing\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/stanford-parser/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6"}},"ruid":"7ab7d919-48c0-42f9-9f12-74c70d58a4a6","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/vagrant/data/corpus//origtweets_light/490051479555043328.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-parser"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples/parsing"},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-parser/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/\""},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-parser"}},"processport":"48810","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-parser","parentport":"19246","completeddate":"","status":"Running"}
[16/12/2015 - 15:49:59] (10.0.2.2|)  => hello
[16/12/2015 - 15:49:59] (10.0.2.2|)  => {"creationdate":"2015-12-16T15:49:52.177","def":"/vagrant/modules/examples/parsing/stanford-parser.module","runconf":{"IN":{"type":"VAL","value":"\"/vagrant/data/corpus//origtweets_light/490051479555043328.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/examples/parsing\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-parser/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/vagrant/data/corpus//origtweets_light/490051479555043328.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples/parsing\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-parser/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6\""},"OUT":{"type":"FILE","value":"\"\\\"/vagrant/data/results/stanford-parser/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6//490051479555043328.xml\\\"\""}},"ruid":"7ab7d919-48c0-42f9-9f12-74c70d58a4a6","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#2conll.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"IN":{"type":"FILE","value":"\"/vagrant/data/corpus//origtweets_light/490051479555043328.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-parser\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples/parsing\""},"_CMD.STDERR":{"type":"VAL","value":"\"Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.6 sec]. Parsing file: /vagrant/data/corpus//origtweets_light/490051479555043328.txt Parsing [sent. 1 len. 13]: Les #zoneshumides camarguaises au centre d'une exposition en #Chine http://t.co/EegQgeFJRJ #camargue #provence #biodiversité Parsed file: /vagrant/data/corpus//origtweets_light/490051479555043328.txt [1 sentences]. Parsed 13 words in 1 sentences (16.88 wds/sec; 1.30 sents/sec).\""},"_CMD#2conll.STDERR":{"type":"VAL","value":"\"UniversalPOSMapper: Warning - could not load Tsurgeon file from edu/stanford/nlp/models/upos/ENUniversalPOS.tsurgeon.\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/stanford-parser/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-parser\""}},"processport":"42671","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-parser","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[16/12/2015 - 15:50:18] (10.0.2.2|)  => hello
[16/12/2015 - 15:50:18] (10.0.2.2|)  => /vagrant/data/results/stanford-parser/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6//490051479555043328.conll
[16/12/2015 - 15:50:18] (10.0.2.2|)  => 1	Les	_	NNP	NNP	_	2	compound	_	_
2	#zoneshumides	_	NNS	NNS	_	3	nsubj	_	_
3	camarguaises	_	VBZ	VBZ	_	0	root	_	_
4	au	_	NN	NN	_	7	compound	_	_
5	centre	_	NN	NN	_	7	compound	_	_
6	d'une	_	NN	NN	_	7	compound	_	_
7	exposition	_	NN	NN	_	3	dobj	_	_
8	en	_	IN	IN	_	13	case	_	_
9	#Chine	_	JJ	JJ	_	13	amod	_	_
10	http://t.co/EegQgeFJRJ	_	NNP	NNP	_	13	compound	_	_
11	#camargue	_	NN	NN	_	13	compound	_	_
12	#provence	_	NN	NN	_	13	compound	_	_
13	#biodiversité	_	NNS	NNS	_	7	nmod:en	_	_

1	Les-1	_	#zoneshumides-2,	#zoneshumides-2,	_	0	root	_	_

1	#zoneshumides-2	_	camarguaises-3,	camarguaises-3,	_	0	root	_	_

1	camarguaises-3	_	ROOT-0,	ROOT-0,	_	0	root	_	_

1	au-4	_	exposition-7,	exposition-7,	_	0	root	_	_

1	centre-5	_	exposition-7,	exposition-7,	_	0	root	_	_

1	d'une-6	_	exposition-7,	exposition-7,	_	0	root	_	_

1	exposition-7	_	camarguaises-3,	camarguaises-3,	_	0	root	_	_

1	en-8	_	#biodiversité-13,	#biodiversité-13,	_	0	root	_	_

1	#Chine-9	_	#biodiversité-13,	#biodiversité-13,	_	0	root	_	_

1	http://t.co/EegQgeFJRJ-10	_	#biodiversité-13,	#biodiversité-13,	_	0	root	_	_

1	#camargue-11	_	#biodiversité-13,	#biodiversité-13,	_	0	root	_	_

1	#provence-12	_	#biodiversité-13,	#biodiversité-13,	_	0	root	_	_

1	#biodiversité-13	_	exposition-7,	exposition-7,	_	0	root	_	_


[16/12/2015 - 15:58:31] (10.0.2.2|)  => hello
[16/12/2015 - 15:58:31] (10.0.2.2|)  => public/test/build/style/depgraph.css
[16/12/2015 - 15:58:31] (10.0.2.2|)  => hello
[16/12/2015 - 15:58:31] (10.0.2.2|)  => public/test/build/depgraph.js
[16/12/2015 - 15:58:32] (10.0.2.2|)  => hello
[16/12/2015 - 15:58:32] (10.0.2.2|)  => public/test/build/style/depgraph.css
[16/12/2015 - 16:3:8] (10.0.2.2|)  => hello
[16/12/2015 - 16:3:8] (10.0.2.2|)  => public/test/undefined
[18/12/2015 - 9:29:34] (10.0.2.2|)  => hello
[18/12/2015 - 9:29:34] (10.0.2.2|)  => 
[18/12/2015 - 9:29:35] (10.0.2.2|)  => hello
[18/12/2015 - 9:29:35] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[18/12/2015 - 9:29:35] (10.0.2.2|)  => hello
[18/12/2015 - 9:29:35] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[18/12/2015 - 9:29:35] (10.0.2.2|)  => hello
[18/12/2015 - 9:29:55] (10.0.2.2|)  => timeout
[18/12/2015 - 9:29:56] (10.0.2.2|)  => hello
[18/12/2015 - 9:29:57] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 9:29:57] (10.0.2.2|)  => hello
[18/12/2015 - 9:29:58] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6

[18/12/2015 - 9:29:58] (10.0.2.2|)  => hello
[18/12/2015 - 9:29:58] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 9:33:58] (10.0.2.2|)  => hello
[18/12/2015 - 9:33:58] (10.0.2.2|)  => public/doc/slides/css/theme/league.css
[18/12/2015 - 9:34:0] (10.0.2.2|)  => hello
[18/12/2015 - 9:34:0] (10.0.2.2|)  => public/doc/slides/css/theme/sky.css
[18/12/2015 - 9:34:1] (10.0.2.2|)  => hello
[18/12/2015 - 9:34:1] (10.0.2.2|)  => public/doc/slides/css/theme/white.css
[18/12/2015 - 9:34:2] (10.0.2.2|)  => hello
[18/12/2015 - 9:34:2] (10.0.2.2|)  => public/doc/slides/css/theme/league.css
[18/12/2015 - 9:34:4] (10.0.2.2|)  => hello
[18/12/2015 - 9:34:4] (10.0.2.2|)  => public/doc/slides/css/theme/black.css
[18/12/2015 - 9:34:6] (10.0.2.2|)  => hello
[18/12/2015 - 9:34:6] (10.0.2.2|)  => public/doc/slides/css/theme/serif.css
[18/12/2015 - 9:34:9] (10.0.2.2|)  => hello
[18/12/2015 - 9:34:9] (10.0.2.2|)  => 
[18/12/2015 - 9:34:10] (10.0.2.2|)  => hello
[18/12/2015 - 9:34:10] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[18/12/2015 - 9:34:10] (10.0.2.2|)  => hello
[18/12/2015 - 9:34:10] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[18/12/2015 - 9:34:11] (10.0.2.2|)  => hello
[18/12/2015 - 9:34:11] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 9:34:11] (10.0.2.2|)  => hello
[18/12/2015 - 9:34:11] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 9:34:11] (10.0.2.2|)  => hello
[18/12/2015 - 9:34:21] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 9:34:21] (10.0.2.2|)  => hello
[18/12/2015 - 9:34:21] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6

[18/12/2015 - 9:36:29] (10.0.2.2|)  => hello
[18/12/2015 - 9:36:29] (10.0.2.2|)  => 
[18/12/2015 - 9:36:30] (10.0.2.2|)  => hello
[18/12/2015 - 9:36:30] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[18/12/2015 - 9:36:31] (10.0.2.2|)  => hello
[18/12/2015 - 9:36:31] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[18/12/2015 - 9:36:31] (10.0.2.2|)  => hello
[18/12/2015 - 9:36:31] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 9:36:31] (10.0.2.2|)  => hello
[18/12/2015 - 9:36:41] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 9:36:41] (10.0.2.2|)  => hello
[18/12/2015 - 9:36:41] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6

[18/12/2015 - 9:36:41] (10.0.2.2|)  => hello
[18/12/2015 - 9:36:41] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 9:49:1] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:1] (10.0.2.2|)  => 
[18/12/2015 - 9:49:1] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:1] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[18/12/2015 - 9:49:1] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:1] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[18/12/2015 - 9:49:2] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:2] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 9:49:2] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:12] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 9:49:12] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:12] (10.0.2.2|)  => 
[18/12/2015 - 9:49:12] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:12] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6

[18/12/2015 - 9:49:12] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:12] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 9:49:13] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:13] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[18/12/2015 - 9:49:13] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:13] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[18/12/2015 - 9:49:14] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:14] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 9:49:14] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:14] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 9:49:14] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:21] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 9:49:21] (10.0.2.2|)  => hello
[18/12/2015 - 9:49:21] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6

[18/12/2015 - 9:58:27] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:27] (10.0.2.2|)  => 
[18/12/2015 - 9:58:28] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:28] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[18/12/2015 - 9:58:28] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:28] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[18/12/2015 - 9:58:28] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:28] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 9:58:28] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:28] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 9:58:28] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:28] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6

[18/12/2015 - 9:58:28] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:38] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 9:58:44] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:44] (10.0.2.2|)  => 
[18/12/2015 - 9:58:44] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:44] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[18/12/2015 - 9:58:44] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:44] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[18/12/2015 - 9:58:44] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:45] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 9:58:45] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:45] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6

[18/12/2015 - 9:58:45] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:52] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 9:58:52] (10.0.2.2|)  => hello
[18/12/2015 - 9:58:52] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 10:12:30] (10.0.2.2|)  => hello
[18/12/2015 - 10:12:30] (10.0.2.2|)  => 
[18/12/2015 - 10:12:30] (10.0.2.2|)  => hello
[18/12/2015 - 10:12:30] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[18/12/2015 - 10:12:30] (10.0.2.2|)  => hello
[18/12/2015 - 10:12:30] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[18/12/2015 - 10:12:31] (10.0.2.2|)  => hello
[18/12/2015 - 10:12:31] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 10:12:31] (10.0.2.2|)  => hello
[18/12/2015 - 10:12:31] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 10:12:31] (10.0.2.2|)  => hello
[18/12/2015 - 10:12:40] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 10:12:40] (10.0.2.2|)  => hello
[18/12/2015 - 10:12:40] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6

[18/12/2015 - 10:19:55] (10.0.2.2|)  => hello
[18/12/2015 - 10:19:55] (10.0.2.2|)  => 
[18/12/2015 - 10:19:55] (10.0.2.2|)  => hello
[18/12/2015 - 10:19:55] (10.0.2.2|)  => 
[18/12/2015 - 10:19:56] (10.0.2.2|)  => hello
[18/12/2015 - 10:19:56] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 10:19:56] (10.0.2.2|)  => hello
[18/12/2015 - 10:20:5] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 10:20:5] (10.0.2.2|)  => hello
[18/12/2015 - 10:20:5] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 10:20:5] (10.0.2.2|)  => hello
[18/12/2015 - 10:20:5] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6

[18/12/2015 - 13:39:27] (10.0.2.2|)  => hello
[18/12/2015 - 13:39:27] (10.0.2.2|)  => 
[18/12/2015 - 13:39:28] (10.0.2.2|)  => hello
[18/12/2015 - 13:39:28] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 13:39:28] (10.0.2.2|)  => hello
[18/12/2015 - 13:39:48] (10.0.2.2|)  => timeout
[18/12/2015 - 13:39:48] (10.0.2.2|)  => hello
[18/12/2015 - 13:40:3] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6

[18/12/2015 - 13:40:3] (10.0.2.2|)  => hello
[18/12/2015 - 13:40:3] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 13:40:3] (10.0.2.2|)  => hello
[18/12/2015 - 13:40:3] (10.0.2.2|)  => 
[18/12/2015 - 13:40:4] (10.0.2.2|)  => hello
[18/12/2015 - 13:40:4] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 13:40:4] (10.0.2.2|)  => hello
[18/12/2015 - 13:40:4] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6

[18/12/2015 - 13:40:4] (10.0.2.2|)  => hello
[18/12/2015 - 13:40:4] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 13:40:4] (10.0.2.2|)  => hello
[18/12/2015 - 13:40:17] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6":["490051479555043328.xml","490051479555043328.conll"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 13:40:23] (10.0.2.2|)  => hello
[18/12/2015 - 13:40:40] (10.0.2.2|)  => ok
[18/12/2015 - 13:40:47] (10.0.2.2|)  => hello
[18/12/2015 - 13:40:47] (10.0.2.2|)  => 
[18/12/2015 - 13:40:48] (10.0.2.2|)  => hello
[18/12/2015 - 13:40:48] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 13:40:48] (10.0.2.2|)  => hello
[18/12/2015 - 13:40:48] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"views","items":[{"folder":true,"foldername":"depgraph","items":[{"modulename":"depgraph-viewer@buiquang","source":"\nname : depgraph-viewer@buiquang\n\ndesc : >\n  Dependency Graph Visualisation Library\n\ninput :\n  SOURCE : \n    type : FILE\n  FORMAT :\n    type : VAL\n\noutput :\n  HTML :\n    type : VAL\n    format : html\n    value : ${CMD.STDOUT}\n  JS :\n    type : FILE*\n    value :\n      - $_DEF_DIR/src/js/vendor/colorbox/jquery.colorbox-min.js\n      - $_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js\n      - $_DEF_DIR/src/js/vendor/d3.v2.js\n      - $_DEF_DIR/build/depgraph.js\n  CSS :\n    type : FILE*\n    value :\n      - $_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css\n      - $_DEF_DIR/build/style/depgraph.css\n\nexec :\n  _CMD :\n    input :\n      DOCKEFILE : true\n      CMD : >\n        php produceGraph.php $SOURCE $FORMAT","sourcepath":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module"}]}]},{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 13:40:48] (10.0.2.2|)  => hello
[18/12/2015 - 13:40:48] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6

[18/12/2015 - 13:40:48] (10.0.2.2|)  => hello
[18/12/2015 - 13:41:0] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6":["490051479555043328.xml","490051479555043328.conll"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 13:41:49] (10.0.2.2|)  => hello
[18/12/2015 - 13:42:6] (10.0.2.2|)  => ok
[18/12/2015 - 13:42:6] (10.0.2.2|)  => hello
[18/12/2015 - 13:42:6] (10.0.2.2|)  => 
[18/12/2015 - 13:42:7] (10.0.2.2|)  => hello
[18/12/2015 - 13:42:7] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"views","items":[{"folder":true,"foldername":"depgraph","items":[{"module":{"output":{"CSS":{"type":"FILE*","value":["$_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","$_DEF_DIR/build/style/depgraph.css"]},"JS":{"type":"FILE*","value":["$_DEF_DIR/src/js/vendor/colorbox/jquery.colorbox-min.js","$_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","$_DEF_DIR/src/js/vendor/d3.v2.js","$_DEF_DIR/build/depgraph.js"]},"HTML":{"format":"html","type":"VAL","value":"${CMD.STDOUT}"}},"input":{"FORMAT":{"type":"VAL"},"SOURCE":{"type":"FILE"}},"name":"depgraph-viewer@buiquang","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"php produceGraph.php $SOURCE $FORMAT"}}}],"desc":"Dependency Graph Visualisation Library"},"modulename":"depgraph-viewer@buiquang","source":"\nname : depgraph-viewer@buiquang\n\ndesc : >\n  Dependency Graph Visualisation Library\n\ninput :\n  SOURCE : \n    type : FILE\n  FORMAT :\n    type : VAL\n\noutput :\n  HTML :\n    type : VAL\n    format : html\n    value : ${CMD.STDOUT}\n  JS :\n    type : FILE*\n    value :\n      - $_DEF_DIR/src/js/vendor/colorbox/jquery.colorbox-min.js\n      - $_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js\n      - $_DEF_DIR/src/js/vendor/d3.v2.js\n      - $_DEF_DIR/build/depgraph.js\n  CSS :\n    type : FILE*\n    value :\n      - $_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css\n      - $_DEF_DIR/build/style/depgraph.css\n\nexec :\n  - _CMD :\n      input :\n        DOCKEFILE : true\n        CMD : >\n          php produceGraph.php $SOURCE $FORMAT","sourcepath":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module"}]}]},{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 13:42:7] (10.0.2.2|)  => hello
[18/12/2015 - 13:42:19] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6":["490051479555043328.xml","490051479555043328.conll"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 13:42:19] (10.0.2.2|)  => hello
[18/12/2015 - 13:42:19] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6

[18/12/2015 - 13:42:19] (10.0.2.2|)  => hello
[18/12/2015 - 13:42:19] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 13:42:41] (10.0.2.2|)  => hello
[18/12/2015 - 13:42:41] (10.0.2.2|)  => ae8cadc3-731d-4306-815e-e836a8765917
[18/12/2015 - 13:42:41] (10.0.2.2|)  => hello
[18/12/2015 - 13:42:41] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:42:41.277","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"undefined//run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-ae8cadc3-731d-4306-815e-e836a8765917"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"undefined//run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-ae8cadc3-731d-4306-815e-e836a8765917"}},"ruid":"ae8cadc3-731d-4306-815e-e836a8765917","parentProcess":"None","env":"","processport":"9997","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"4578","completeddate":"","status":"Running"}
[18/12/2015 - 13:42:50] (10.0.2.2|)  => hello
[18/12/2015 - 13:42:50] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:42:41.277","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"undefined//run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-ae8cadc3-731d-4306-815e-e836a8765917"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"undefined//run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-ae8cadc3-731d-4306-815e-e836a8765917"}},"ruid":"ae8cadc3-731d-4306-815e-e836a8765917","parentProcess":"None","env":"","processport":"9997","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"4578","completeddate":"","status":"Running"}
[18/12/2015 - 13:43:17] (10.0.2.2|)  => hello
[18/12/2015 - 13:43:17] (10.0.2.2|)  => 9835069e-2aa1-490a-b365-09dfc58c0a2f
[18/12/2015 - 13:43:17] (10.0.2.2|)  => hello
[18/12/2015 - 13:43:17] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:43:17.589","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-9835069e-2aa1-490a-b365-09dfc58c0a2f"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-9835069e-2aa1-490a-b365-09dfc58c0a2f"}},"ruid":"9835069e-2aa1-490a-b365-09dfc58c0a2f","parentProcess":"None","env":"","processport":"16290","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"51662","completeddate":"","status":"Running"}
[18/12/2015 - 13:43:19] (10.0.2.2|)  => hello
[18/12/2015 - 13:43:19] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:43:17.589","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-9835069e-2aa1-490a-b365-09dfc58c0a2f"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-9835069e-2aa1-490a-b365-09dfc58c0a2f"}},"ruid":"9835069e-2aa1-490a-b365-09dfc58c0a2f","parentProcess":"None","env":"","processport":"16290","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"51662","completeddate":"","status":"Running"}
[18/12/2015 - 13:43:21] (10.0.2.2|)  => hello
[18/12/2015 - 13:43:21] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:43:17.589","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-9835069e-2aa1-490a-b365-09dfc58c0a2f"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-9835069e-2aa1-490a-b365-09dfc58c0a2f"}},"ruid":"9835069e-2aa1-490a-b365-09dfc58c0a2f","parentProcess":"None","env":"","processport":"16290","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"51662","completeddate":"","status":"Running"}
[18/12/2015 - 13:43:22] (10.0.2.2|)  => hello
[18/12/2015 - 13:43:22] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:43:17.589","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-9835069e-2aa1-490a-b365-09dfc58c0a2f"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-9835069e-2aa1-490a-b365-09dfc58c0a2f"}},"ruid":"9835069e-2aa1-490a-b365-09dfc58c0a2f","parentProcess":"None","env":"","processport":"16290","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"51662","completeddate":"","status":"Running"}
[18/12/2015 - 13:43:22] (10.0.2.2|)  => hello
[18/12/2015 - 13:43:22] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:43:17.589","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-9835069e-2aa1-490a-b365-09dfc58c0a2f"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"SOURCE":{"type":"VAL","value":"conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-9835069e-2aa1-490a-b365-09dfc58c0a2f"}},"ruid":"9835069e-2aa1-490a-b365-09dfc58c0a2f","parentProcess":"None","env":"","processport":"16290","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"51662","completeddate":"","status":"Running"}
[18/12/2015 - 13:43:50] (10.0.2.2|)  => hello
[18/12/2015 - 13:43:50] (10.0.2.2|)  => 80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b
[18/12/2015 - 13:43:50] (10.0.2.2|)  => hello
[18/12/2015 - 13:43:50] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:43:50.028","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b"}},"ruid":"80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b","parentProcess":"None","env":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"FILE","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_CUR_MOD":{"type":"VAL","value":"depgraph-viewer@buiquang"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/views/depgraph"},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b/\""},"_MOD_CONTEXT":{"type":"VAL","value":"depgraph-viewer@buiquang"}},"processport":"33623","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"25472","completeddate":"","status":"Running"}
[18/12/2015 - 13:43:57] (10.0.2.2|)  => hello
[18/12/2015 - 13:43:57] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:43:50.028","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"\\\"${CMD.STDOUT}\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b\""}},"ruid":"80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"PHP Notice:  Use of undefined constant json_data - assumed 'json_data' in /vagrant/modules/addons/views/depgraph/produceGraph.php on line 12\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"49935","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 13:45:23] (10.0.2.2|)  => hello
[18/12/2015 - 13:45:41] (10.0.2.2|)  => ok
[18/12/2015 - 13:45:45] (10.0.2.2|)  => hello
[18/12/2015 - 13:45:45] (10.0.2.2|)  => 388d7126-b453-4dfc-abf0-bfd577d20d8a
[18/12/2015 - 13:45:46] (10.0.2.2|)  => hello
[18/12/2015 - 13:45:46] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:45:45.985","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-388d7126-b453-4dfc-abf0-bfd577d20d8a"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-388d7126-b453-4dfc-abf0-bfd577d20d8a"}},"ruid":"388d7126-b453-4dfc-abf0-bfd577d20d8a","parentProcess":"None","env":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"FILE","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_CUR_MOD":{"type":"VAL","value":"depgraph-viewer@buiquang"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/views/depgraph"},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-388d7126-b453-4dfc-abf0-bfd577d20d8a/\""},"_MOD_CONTEXT":{"type":"VAL","value":"depgraph-viewer@buiquang"}},"processport":"53853","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"49809","completeddate":"","status":"Running"}
[18/12/2015 - 13:46:57] (10.0.2.2|)  => hello
[18/12/2015 - 13:46:57] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:45:45.985","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-388d7126-b453-4dfc-abf0-bfd577d20d8a\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-388d7126-b453-4dfc-abf0-bfd577d20d8a\""}},"ruid":"388d7126-b453-4dfc-abf0-bfd577d20d8a","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"Could not open input file: produceGraph.php\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-388d7126-b453-4dfc-abf0-bfd577d20d8a/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"20862","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(error when running : _CMD failed with exit value error when running : _CMD failed with exit value 1)"}
[18/12/2015 - 13:51:0] (10.0.2.2|)  => hello
[18/12/2015 - 13:51:1] (10.0.2.2|)  => 63ed1678-d757-4ab4-9c90-b8679ad90696
[18/12/2015 - 13:51:1] (10.0.2.2|)  => hello
[18/12/2015 - 13:51:2] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:51:01.636","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-63ed1678-d757-4ab4-9c90-b8679ad90696"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-63ed1678-d757-4ab4-9c90-b8679ad90696"}},"ruid":"63ed1678-d757-4ab4-9c90-b8679ad90696","parentProcess":"None","env":"","processport":"58876","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"17358","completeddate":"","status":"Running"}
[18/12/2015 - 13:51:18] (10.0.2.2|)  => hello
[18/12/2015 - 13:51:18] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:51:01.636","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-63ed1678-d757-4ab4-9c90-b8679ad90696"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-63ed1678-d757-4ab4-9c90-b8679ad90696"}},"ruid":"63ed1678-d757-4ab4-9c90-b8679ad90696","parentProcess":"None","env":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"FILE","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_CUR_MOD":{"type":"VAL","value":"depgraph-viewer@buiquang"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/views/depgraph"},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-63ed1678-d757-4ab4-9c90-b8679ad90696/\""},"_MOD_CONTEXT":{"type":"VAL","value":"depgraph-viewer@buiquang"}},"processport":"58876","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"17358","completeddate":"","status":"Running"}
[18/12/2015 - 13:52:9] (10.0.2.2|)  => hello
[18/12/2015 - 13:52:10] (10.0.2.2|)  => 55488161-fde7-4f4e-ad52-195ab3372b87
[18/12/2015 - 13:52:10] (10.0.2.2|)  => hello
[18/12/2015 - 13:52:10] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:52:10.154","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-55488161-fde7-4f4e-ad52-195ab3372b87"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-55488161-fde7-4f4e-ad52-195ab3372b87"}},"ruid":"55488161-fde7-4f4e-ad52-195ab3372b87","parentProcess":"None","env":"","processport":"48321","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"21638","completeddate":"","status":"Running"}
[18/12/2015 - 13:52:17] (10.0.2.2|)  => hello
[18/12/2015 - 13:52:17] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:52:10.154","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-55488161-fde7-4f4e-ad52-195ab3372b87\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-55488161-fde7-4f4e-ad52-195ab3372b87\""}},"ruid":"55488161-fde7-4f4e-ad52-195ab3372b87","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-55488161-fde7-4f4e-ad52-195ab3372b87/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"3534","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 13:54:36] (10.0.2.2|)  => hello
[18/12/2015 - 13:54:37] (10.0.2.2|)  => cc0221f3-e0f4-4080-a342-0d43cec80f52
[18/12/2015 - 13:54:37] (10.0.2.2|)  => hello
[18/12/2015 - 13:54:37] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:54:36.962","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52"}},"ruid":"cc0221f3-e0f4-4080-a342-0d43cec80f52","parentProcess":"None","env":"","processport":"54613","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"59940","completeddate":"","status":"Running"}
[18/12/2015 - 13:54:39] (10.0.2.2|)  => hello
[18/12/2015 - 13:54:39] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:54:36.962","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52"}},"ruid":"cc0221f3-e0f4-4080-a342-0d43cec80f52","parentProcess":"None","env":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"FILE","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_CUR_MOD":{"type":"VAL","value":"depgraph-viewer@buiquang"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/views/depgraph"},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52/\""},"_MOD_CONTEXT":{"type":"VAL","value":"depgraph-viewer@buiquang"}},"processport":"54613","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"59940","completeddate":"","status":"Running"}
[18/12/2015 - 13:54:42] (10.0.2.2|)  => hello
[18/12/2015 - 13:54:42] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:54:36.962","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52"}},"parentEnv":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"VAL","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_RUN_DIR":{"type":"DIR","value":"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52"}},"ruid":"cc0221f3-e0f4-4080-a342-0d43cec80f52","parentProcess":"None","env":{"FORMAT":{"type":"VAL","value":"conll"},"SOURCE":{"type":"FILE","value":"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll"},"_CUR_MOD":{"type":"VAL","value":"depgraph-viewer@buiquang"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/addons/views/depgraph"},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52/\""},"_MOD_CONTEXT":{"type":"VAL","value":"depgraph-viewer@buiquang"}},"processport":"54613","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"depgraph-viewer@buiquang","parentport":"59940","completeddate":"","status":"Running"}
[18/12/2015 - 13:55:7] (10.0.2.2|)  => hello
[18/12/2015 - 13:55:7] (10.0.2.2|)  => Error :expected '<document start>', but found Scalar
 in 'string', line 1, column 15:
    "\"<div id=\\"graph-container\\"></div>
                  ^

[18/12/2015 - 13:56:5] (10.0.2.2|)  => hello
[18/12/2015 - 13:56:6] (10.0.2.2|)  => Error :Invalid UUID string: 
[18/12/2015 - 13:56:10] (10.0.2.2|)  => hello
[18/12/2015 - 13:56:10] (10.0.2.2|)  => Error :expected '<document start>', but found Scalar
 in 'string', line 1, column 15:
    "\"<div id=\\"graph-container\\"></div>
                  ^

[18/12/2015 - 13:57:13] (10.0.2.2|)  => hello
[18/12/2015 - 13:57:13] (10.0.2.2|)  => Error :expected '<document start>', but found Scalar
 in 'string', line 1, column 15:
    "\"<div id=\\"graph-container\\"></div>
                  ^

[18/12/2015 - 13:57:28] (10.0.2.2|)  => hello
[18/12/2015 - 13:57:28] (10.0.2.2|)  => Error :expected '<document start>', but found Scalar
 in 'string', line 1, column 15:
    "\"<div id=\\"graph-container\\"></div>
                  ^

[18/12/2015 - 13:58:23] (10.0.2.2|)  => hello
[18/12/2015 - 13:58:23] (10.0.2.2|)  => Error :expected '<document start>', but found Scalar
 in 'string', line 1, column 15:
    "\"<div id=\\"graph-container\\"></div>
                  ^

[18/12/2015 - 14:2:18] (10.0.2.2|)  => hello
[18/12/2015 - 14:2:18] (10.0.2.2|)  => cfc2b399-118f-4bfc-8842-1e21b0ae0ef3
[18/12/2015 - 14:2:18] (10.0.2.2|)  => hello
[18/12/2015 - 14:2:18] (10.0.2.2|)  => {"creationdate":"2015-12-18T14:02:18.611","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":"","parentEnv":"","ruid":"cfc2b399-118f-4bfc-8842-1e21b0ae0ef3","parentProcess":"None","env":"","processport":"32358","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Waiting"}
[18/12/2015 - 14:2:27] (10.0.2.2|)  => hello
[18/12/2015 - 14:2:27] (10.0.2.2|)  => {"creationdate":"2015-12-18T14:02:18.611","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversitu00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversitu00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"ruid":"cfc2b399-118f-4bfc-8842-1e21b0ae0ef3","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"24707","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 14:3:33] (10.0.2.2|)  => hello
[18/12/2015 - 14:3:33] (10.0.2.2|)  => {"creationdate":"2015-12-18T14:02:18.611","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversitu00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversitu00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"ruid":"cfc2b399-118f-4bfc-8842-1e21b0ae0ef3","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"4170","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 14:3:34] (10.0.2.2|)  => hello
[18/12/2015 - 14:3:34] (10.0.2.2|)  => {"creationdate":"2015-12-18T14:02:18.611","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversitu00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversitu00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"ruid":"cfc2b399-118f-4bfc-8842-1e21b0ae0ef3","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"64406","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 14:3:34] (10.0.2.2|)  => hello
[18/12/2015 - 14:3:34] (10.0.2.2|)  => {"creationdate":"2015-12-18T14:02:18.611","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversitu00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversitu00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"ruid":"cfc2b399-118f-4bfc-8842-1e21b0ae0ef3","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"39184","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 14:3:43] (10.0.2.2|)  => hello
[18/12/2015 - 14:3:43] (10.0.2.2|)  => {"creationdate":"2015-12-18T14:02:18.611","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversitu00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversitu00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"ruid":"cfc2b399-118f-4bfc-8842-1e21b0ae0ef3","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"8836","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 14:4:16] (10.0.2.2|)  => hello
[18/12/2015 - 14:4:16] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[18/12/2015 - 14:4:16] (10.0.2.2|)  => hello
[18/12/2015 - 14:4:16] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[18/12/2015 - 14:28:49] (10.0.2.2|)  => hello
[18/12/2015 - 14:28:49] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:54:36.962","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversitu00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversitu00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52\""}},"ruid":"cc0221f3-e0f4-4080-a342-0d43cec80f52","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\/\\/t.co\\/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http:\\/\\/t.co\\/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\u00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversit\\u00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\u00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\u00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\/\\/t.co\\/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\u00e9-13,\\\"},\\\"label\\\":\\\"http:\\/\\/t.co\\/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\u00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\u00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\u00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversit\\u00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"60276","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 14:29:10] (10.0.2.2|)  => hello
[18/12/2015 - 14:29:10] (10.0.2.2|)  => {"creationdate":"2015-12-18T14:02:18.611","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversitu00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversitu00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"ruid":"cfc2b399-118f-4bfc-8842-1e21b0ae0ef3","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"59491","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 14:29:44] (10.0.2.2|)  => hello
[18/12/2015 - 14:29:44] (10.0.2.2|)  => 
[18/12/2015 - 14:29:45] (10.0.2.2|)  => hello
[18/12/2015 - 14:29:45] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[18/12/2015 - 14:29:45] (10.0.2.2|)  => hello
[18/12/2015 - 14:29:45] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[18/12/2015 - 14:29:45] (10.0.2.2|)  => hello
[18/12/2015 - 14:29:45] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 14:29:45] (10.0.2.2|)  => hello
[18/12/2015 - 14:29:45] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6
depgraph-viewer@buiquang : ae8cadc3-731d-4306-815e-e836a8765917
depgraph-viewer@buiquang : 9835069e-2aa1-490a-b365-09dfc58c0a2f
depgraph-viewer@buiquang : 80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b
depgraph-viewer@buiquang : 388d7126-b453-4dfc-abf0-bfd577d20d8a
depgraph-viewer@buiquang : 63ed1678-d757-4ab4-9c90-b8679ad90696
depgraph-viewer@buiquang : 55488161-fde7-4f4e-ad52-195ab3372b87
depgraph-viewer@buiquang : cc0221f3-e0f4-4080-a342-0d43cec80f52
depgraph-viewer@buiquang : cfc2b399-118f-4bfc-8842-1e21b0ae0ef3

[18/12/2015 - 14:29:45] (10.0.2.2|)  => hello
[18/12/2015 - 14:29:57] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6":["490051479555043328.xml","490051479555043328.conll"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 14:29:57] (10.0.2.2|)  => hello
[18/12/2015 - 14:29:57] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"views","items":[{"folder":true,"foldername":"depgraph","items":[{"module":{"output":{"CSS":{"type":"FILE*","value":["$_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","$_DEF_DIR/build/style/depgraph.css"]},"JS":{"type":"FILE*","value":["$_DEF_DIR/src/js/vendor/colorbox/jquery.colorbox-min.js","$_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","$_DEF_DIR/src/js/vendor/d3.v2.js","$_DEF_DIR/build/depgraph.js"]},"HTML":{"format":"html","type":"VAL","value":"${_CMD.STDOUT}"}},"input":{"FORMAT":{"type":"VAL"},"SOURCE":{"type":"FILE"}},"name":"depgraph-viewer@buiquang","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"php $_DEF_DIR/produceGraph.php $SOURCE $FORMAT"}}}],"desc":"Dependency Graph Visualisation Library"},"modulename":"depgraph-viewer@buiquang","source":"\nname : depgraph-viewer@buiquang\n\ndesc : >\n  Dependency Graph Visualisation Library\n\ninput :\n  SOURCE : \n    type : FILE\n  FORMAT :\n    type : VAL\n\noutput :\n  HTML :\n    type : VAL\n    format : html\n    value : ${_CMD.STDOUT}\n  JS :\n    type : FILE*\n    value :\n      - $_DEF_DIR/src/js/vendor/colorbox/jquery.colorbox-min.js\n      - $_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js\n      - $_DEF_DIR/src/js/vendor/d3.v2.js\n      - $_DEF_DIR/build/depgraph.js\n  CSS :\n    type : FILE*\n    value :\n      - $_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css\n      - $_DEF_DIR/build/style/depgraph.css\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : true\n        CMD : >\n          php $_DEF_DIR/produceGraph.php $SOURCE $FORMAT","sourcepath":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module"}]}]},{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 14:32:42] (10.0.2.2|)  => hello
[18/12/2015 - 14:32:42] (10.0.2.2|)  => Error :can't parse serialized environnment ()
[18/12/2015 - 14:32:50] (10.0.2.2|)  => hello
[18/12/2015 - 14:32:50] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:43:50.028","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"\\\"${CMD.STDOUT}\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b\""}},"ruid":"80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"PHP Notice:  Use of undefined constant json_data - assumed 'json_data' in /vagrant/modules/addons/views/depgraph/produceGraph.php on line 12\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"50091","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 14:32:53] (10.0.2.2|)  => hello
[18/12/2015 - 14:32:53] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:52:10.154","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-55488161-fde7-4f4e-ad52-195ab3372b87\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-55488161-fde7-4f4e-ad52-195ab3372b87\""}},"ruid":"55488161-fde7-4f4e-ad52-195ab3372b87","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-55488161-fde7-4f4e-ad52-195ab3372b87/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"29702","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 14:32:56] (10.0.2.2|)  => hello
[18/12/2015 - 14:32:56] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:54:36.962","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversitu00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversitu00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52\""}},"ruid":"cc0221f3-e0f4-4080-a342-0d43cec80f52","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\/\\/t.co\\/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http:\\/\\/t.co\\/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\u00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversit\\u00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\u00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\u00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\/\\/t.co\\/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\u00e9-13,\\\"},\\\"label\\\":\\\"http:\\/\\/t.co\\/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\u00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\u00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\u00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversit\\u00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-cc0221f3-e0f4-4080-a342-0d43cec80f52/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"31140","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 14:33:0] (10.0.2.2|)  => hello
[18/12/2015 - 14:33:0] (10.0.2.2|)  => {"creationdate":"2015-12-18T14:02:18.611","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversitu00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"http://t.co/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversitu00e9-13,\\\",\\\"pos\\\":\\\"#biodiversitu00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversitu00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversitu00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversitu00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3\""}},"ruid":"cfc2b399-118f-4bfc-8842-1e21b0ae0ef3","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"<div id=\\\"graph-container\\\"><\/div> <script> var json_data = {\\\"graph\\\":{\\\"words\\\":[{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"Les\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"2\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#zoneshumides\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"3\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"VBZ\\\",\\\"pos\\\":\\\"VBZ\\\"},\\\"label\\\":\\\"camarguaises\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"VBZ\\\"]},{\\\"id\\\":\\\"4\\\",\\\"#data\\\":{\\\"token\\\":\\\"au\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"au\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"5\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"centre\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"6\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"d'une\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"7\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"exposition\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"8\\\",\\\"#data\\\":{\\\"token\\\":\\\"en\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"IN\\\",\\\"pos\\\":\\\"IN\\\"},\\\"label\\\":\\\"en\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"IN\\\"]},{\\\"id\\\":\\\"9\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"JJ\\\",\\\"pos\\\":\\\"JJ\\\"},\\\"label\\\":\\\"#Chine\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"JJ\\\"]},{\\\"id\\\":\\\"10\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNP\\\",\\\"pos\\\":\\\"NNP\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNP\\\"]},{\\\"id\\\":\\\"11\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#camargue\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"12\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NN\\\",\\\"pos\\\":\\\"NN\\\"},\\\"label\\\":\\\"#provence\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NN\\\"]},{\\\"id\\\":\\\"13\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"NNS\\\",\\\"pos\\\":\\\"NNS\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"NNS\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"Les-1\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#zoneshumides-2,\\\",\\\"pos\\\":\\\"#zoneshumides-2,\\\"},\\\"label\\\":\\\"Les-1\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#zoneshumides-2,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#zoneshumides-2\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"#zoneshumides-2\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"camarguaises-3\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"ROOT-0,\\\",\\\"pos\\\":\\\"ROOT-0,\\\"},\\\"label\\\":\\\"camarguaises-3\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"ROOT-0,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"au-4\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"au-4\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"centre-5\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"centre-5\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"d'une-6\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"d'une-6\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"exposition-7\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"camarguaises-3,\\\",\\\"pos\\\":\\\"camarguaises-3,\\\"},\\\"label\\\":\\\"exposition-7\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"camarguaises-3,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"en-8\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"en-8\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#Chine-9\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#Chine-9\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"http:\\\\/\\\\/t.co\\\\/EegQgeFJRJ-10\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#camargue-11\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#camargue-11\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#provence-12\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"#biodiversit\\\\u00e9-13,\\\",\\\"pos\\\":\\\"#biodiversit\\\\u00e9-13,\\\"},\\\"label\\\":\\\"#provence-12\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"#biodiversit\\\\u00e9-13,\\\"]},{\\\"id\\\":\\\"1\\\",\\\"#data\\\":{\\\"token\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"lemma\\\":\\\"_\\\",\\\"cpos\\\":\\\"exposition-7,\\\",\\\"pos\\\":\\\"exposition-7,\\\"},\\\"label\\\":\\\"#biodiversit\\\\u00e9-13\\\",\\\"sublabel\\\":[\\\"_\\\",\\\"exposition-7,\\\"]}],\\\"links\\\":[{\\\"source\\\":\\\"2\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"2\\\",\\\"label\\\":\\\"nsubj\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"3\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"4\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"5\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"6\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"3\\\",\\\"target\\\":\\\"7\\\",\\\"label\\\":\\\"dobj\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"8\\\",\\\"label\\\":\\\"case\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"9\\\",\\\"label\\\":\\\"amod\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"10\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"11\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"13\\\",\\\"target\\\":\\\"12\\\",\\\"label\\\":\\\"compound\\\"},{\\\"source\\\":\\\"7\\\",\\\"target\\\":\\\"13\\\",\\\"label\\\":\\\"nmod:en\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"},{\\\"source\\\":\\\"0\\\",\\\"target\\\":\\\"1\\\",\\\"label\\\":\\\"root\\\"}],\\\"chunks\\\":[]}}; var depGraph = new depgraphlib.DepGraph(jQuery(\\\"#graph-container\\\"),json_data); <\/script>\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-cfc2b399-118f-4bfc-8842-1e21b0ae0ef3/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"15708","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 14:33:2] (10.0.2.2|)  => hello
[18/12/2015 - 14:33:2] (10.0.2.2|)  => Error :can't parse serialized environnment ()
[18/12/2015 - 14:33:18] (10.0.2.2|)  => hello
[18/12/2015 - 14:33:18] (10.0.2.2|)  => Error :can't parse serialized environnment ()
[18/12/2015 - 14:35:45] (10.0.2.2|)  => hello
[18/12/2015 - 14:35:45] (10.0.2.2|)  => {"creationdate":"2015-12-18T13:52:10.154","def":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module","runconf":{"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/addons/views/depgraph\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-55488161-fde7-4f4e-ad52-195ab3372b87\""}},"parentEnv":{"CSS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","/vagrant/modules/addons/views/depgraph/build/style/depgraph.css"]},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"VAL","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"JS":{"type":"FILE*","value":["/vagrant/modules/addons/views/depgraph/src/js/vendor/colorbox/jquery.colorbox-min.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","/vagrant/modules/addons/views/depgraph/src/js/vendor/d3.v2.js","/vagrant/modules/addons/views/depgraph/build/depgraph.js"]},"HTML":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/vagrant/data/results/depgraph-viewer@buiquang/run-55488161-fde7-4f4e-ad52-195ab3372b87\""}},"ruid":"55488161-fde7-4f4e-ad52-195ab3372b87","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"FORMAT":{"type":"VAL","value":"\"conll\""},"SOURCE":{"type":"FILE","value":"\"/vagrant/data/corpus/run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6/490051479555043328.conll\""},"_CUR_MOD":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/addons/views/depgraph\""},"_CMD.STDERR":{"type":"VAL","value":"\"\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/vagrant/data/results/depgraph-viewer@buiquang/run-55488161-fde7-4f4e-ad52-195ab3372b87/\\\"\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"depgraph-viewer@buiquang\""}},"processport":"44452","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"depgraph-viewer@buiquang","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[18/12/2015 - 15:2:7] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:7] (10.0.2.2|)  => 
[18/12/2015 - 15:2:7] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:7] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[18/12/2015 - 15:2:7] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:7] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[18/12/2015 - 15:2:8] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:8] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 15:2:8] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:17] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6":["490051479555043328.xml","490051479555043328.conll"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 15:2:17] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:17] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6
depgraph-viewer@buiquang : ae8cadc3-731d-4306-815e-e836a8765917
depgraph-viewer@buiquang : 9835069e-2aa1-490a-b365-09dfc58c0a2f
depgraph-viewer@buiquang : 80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b
depgraph-viewer@buiquang : 388d7126-b453-4dfc-abf0-bfd577d20d8a
depgraph-viewer@buiquang : 63ed1678-d757-4ab4-9c90-b8679ad90696
depgraph-viewer@buiquang : 55488161-fde7-4f4e-ad52-195ab3372b87
depgraph-viewer@buiquang : cc0221f3-e0f4-4080-a342-0d43cec80f52
depgraph-viewer@buiquang : cfc2b399-118f-4bfc-8842-1e21b0ae0ef3

[18/12/2015 - 15:2:17] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:17] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"views","items":[{"folder":true,"foldername":"depgraph","items":[{"module":{"output":{"CSS":{"type":"FILE*","value":["$_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","$_DEF_DIR/build/style/depgraph.css"]},"JS":{"type":"FILE*","value":["$_DEF_DIR/src/js/vendor/colorbox/jquery.colorbox-min.js","$_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","$_DEF_DIR/src/js/vendor/d3.v2.js","$_DEF_DIR/build/depgraph.js"]},"HTML":{"format":"html","type":"VAL","value":"${_CMD.STDOUT}"}},"input":{"FORMAT":{"type":"VAL"},"SOURCE":{"type":"FILE"}},"name":"depgraph-viewer@buiquang","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"php $_DEF_DIR/produceGraph.php $SOURCE $FORMAT"}}}],"desc":"Dependency Graph Visualisation Library"},"modulename":"depgraph-viewer@buiquang","source":"\nname : depgraph-viewer@buiquang\n\ndesc : >\n  Dependency Graph Visualisation Library\n\ninput :\n  SOURCE : \n    type : FILE\n  FORMAT :\n    type : VAL\n\noutput :\n  HTML :\n    type : VAL\n    format : html\n    value : ${_CMD.STDOUT}\n  JS :\n    type : FILE*\n    value :\n      - $_DEF_DIR/src/js/vendor/colorbox/jquery.colorbox-min.js\n      - $_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js\n      - $_DEF_DIR/src/js/vendor/d3.v2.js\n      - $_DEF_DIR/build/depgraph.js\n  CSS :\n    type : FILE*\n    value :\n      - $_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css\n      - $_DEF_DIR/build/style/depgraph.css\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : true\n        CMD : >\n          php $_DEF_DIR/produceGraph.php $SOURCE $FORMAT","sourcepath":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module"}]}]},{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 15:2:17] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:17] (10.0.2.2|)  => 
[18/12/2015 - 15:2:17] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:17] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[18/12/2015 - 15:2:17] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:17] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[18/12/2015 - 15:2:18] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:18] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 15:2:18] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:18] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"views","items":[{"folder":true,"foldername":"depgraph","items":[{"module":{"output":{"CSS":{"type":"FILE*","value":["$_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","$_DEF_DIR/build/style/depgraph.css"]},"JS":{"type":"FILE*","value":["$_DEF_DIR/src/js/vendor/colorbox/jquery.colorbox-min.js","$_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","$_DEF_DIR/src/js/vendor/d3.v2.js","$_DEF_DIR/build/depgraph.js"]},"HTML":{"format":"html","type":"VAL","value":"${_CMD.STDOUT}"}},"input":{"FORMAT":{"type":"VAL"},"SOURCE":{"type":"FILE"}},"name":"depgraph-viewer@buiquang","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"php $_DEF_DIR/produceGraph.php $SOURCE $FORMAT"}}}],"desc":"Dependency Graph Visualisation Library"},"modulename":"depgraph-viewer@buiquang","source":"\nname : depgraph-viewer@buiquang\n\ndesc : >\n  Dependency Graph Visualisation Library\n\ninput :\n  SOURCE : \n    type : FILE\n  FORMAT :\n    type : VAL\n\noutput :\n  HTML :\n    type : VAL\n    format : html\n    value : ${_CMD.STDOUT}\n  JS :\n    type : FILE*\n    value :\n      - $_DEF_DIR/src/js/vendor/colorbox/jquery.colorbox-min.js\n      - $_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js\n      - $_DEF_DIR/src/js/vendor/d3.v2.js\n      - $_DEF_DIR/build/depgraph.js\n  CSS :\n    type : FILE*\n    value :\n      - $_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css\n      - $_DEF_DIR/build/style/depgraph.css\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : true\n        CMD : >\n          php $_DEF_DIR/produceGraph.php $SOURCE $FORMAT","sourcepath":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module"}]}]},{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 15:2:18] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:27] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6":["490051479555043328.xml","490051479555043328.conll"]},"hello",".stats_cache","me.tweetaccount"]}
[18/12/2015 - 15:2:27] (10.0.2.2|)  => hello
[18/12/2015 - 15:2:27] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6
depgraph-viewer@buiquang : ae8cadc3-731d-4306-815e-e836a8765917
depgraph-viewer@buiquang : 9835069e-2aa1-490a-b365-09dfc58c0a2f
depgraph-viewer@buiquang : 80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b
depgraph-viewer@buiquang : 388d7126-b453-4dfc-abf0-bfd577d20d8a
depgraph-viewer@buiquang : 63ed1678-d757-4ab4-9c90-b8679ad90696
depgraph-viewer@buiquang : 55488161-fde7-4f4e-ad52-195ab3372b87
depgraph-viewer@buiquang : cc0221f3-e0f4-4080-a342-0d43cec80f52
depgraph-viewer@buiquang : cfc2b399-118f-4bfc-8842-1e21b0ae0ef3

[18/12/2015 - 15:4:37] (10.0.2.2|)  => hello
[18/12/2015 - 15:4:37] (10.0.2.2|)  => 
[18/12/2015 - 15:4:37] (10.0.2.2|)  => hello
[18/12/2015 - 15:4:37] (10.0.2.2|)  => public/js/vendor/underscore-min.map
[18/12/2015 - 15:4:37] (10.0.2.2|)  => hello
[18/12/2015 - 15:4:37] (10.0.2.2|)  => public/js/vendor/backbone-min.map
[18/12/2015 - 15:4:38] (10.0.2.2|)  => hello
[18/12/2015 - 15:4:38] (10.0.2.2|)  => {"result_dir":"/vagrant/data/results","corpus_dir":"/vagrant/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[18/12/2015 - 15:4:38] (10.0.2.2|)  => hello
[18/12/2015 - 15:4:38] (10.0.2.2|)  => stanford-core-nlp : 3fd8ef7d-7ca4-469b-a61f-3c0291cc1a91
stanford-core-nlp : f3d94ae2-7aff-4dc7-b5b6-08d2dfec3c7e
stanford-core-nlp : 75cc397b-a088-436d-8874-345dbb0dbc65
stanford-parser : 11576218-a347-40e8-8471-a2ba7a3c30c3
stanford-parser : 7ab7d919-48c0-42f9-9f12-74c70d58a4a6
depgraph-viewer@buiquang : ae8cadc3-731d-4306-815e-e836a8765917
depgraph-viewer@buiquang : 9835069e-2aa1-490a-b365-09dfc58c0a2f
depgraph-viewer@buiquang : 80b2d6b1-4e93-4470-ac9c-3fdb077d7a7b
depgraph-viewer@buiquang : 388d7126-b453-4dfc-abf0-bfd577d20d8a
depgraph-viewer@buiquang : 63ed1678-d757-4ab4-9c90-b8679ad90696
depgraph-viewer@buiquang : 55488161-fde7-4f4e-ad52-195ab3372b87
depgraph-viewer@buiquang : cc0221f3-e0f4-4080-a342-0d43cec80f52
depgraph-viewer@buiquang : cfc2b399-118f-4bfc-8842-1e21b0ae0ef3

[18/12/2015 - 15:4:38] (10.0.2.2|)  => hello
[18/12/2015 - 15:4:38] (10.0.2.2|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"views","items":[{"folder":true,"foldername":"depgraph","items":[{"module":{"output":{"CSS":{"type":"FILE*","value":["$_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css","$_DEF_DIR/build/style/depgraph.css"]},"JS":{"type":"FILE*","value":["$_DEF_DIR/src/js/vendor/colorbox/jquery.colorbox-min.js","$_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js","$_DEF_DIR/src/js/vendor/d3.v2.js","$_DEF_DIR/build/depgraph.js"]},"HTML":{"format":"html","type":"VAL","value":"${_CMD.STDOUT}"}},"input":{"FORMAT":{"type":"VAL"},"SOURCE":{"type":"FILE"}},"name":"depgraph-viewer@buiquang","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"php $_DEF_DIR/produceGraph.php $SOURCE $FORMAT"}}}],"desc":"Dependency Graph Visualisation Library"},"modulename":"depgraph-viewer@buiquang","source":"\nname : depgraph-viewer@buiquang\n\ndesc : >\n  Dependency Graph Visualisation Library\n\ninput :\n  SOURCE : \n    type : FILE\n  FORMAT :\n    type : VAL\n\noutput :\n  HTML :\n    type : VAL\n    format : html\n    value : ${_CMD.STDOUT}\n  JS :\n    type : FILE*\n    value :\n      - $_DEF_DIR/src/js/vendor/colorbox/jquery.colorbox-min.js\n      - $_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.js\n      - $_DEF_DIR/src/js/vendor/d3.v2.js\n      - $_DEF_DIR/build/depgraph.js\n  CSS :\n    type : FILE*\n    value :\n      - $_DEF_DIR/src/js/vendor/jquery-contextMenu-master/jquery.contextMenu.css\n      - $_DEF_DIR/build/style/depgraph.css\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : true\n        CMD : >\n          php $_DEF_DIR/produceGraph.php $SOURCE $FORMAT","sourcepath":"/vagrant/modules/addons/views/depgraph/depgraph-viewer@buiquang.module"}]}]},{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]}]}]}]}
[18/12/2015 - 15:4:38] (10.0.2.2|)  => hello
[18/12/2015 - 15:4:51] (10.0.2.2|)  => {"corpus":[{"origtweets":["490066480680013824.txt","489076308476186624.txt","487640289213833216.txt","489780871617323008.txt","489510294855905280.json","489751324381032448.txt","489425966402260994.json","489895804958941184.json","488590058103275520.txt","489168726785523712.json","487632740146503680.txt","489467949191667713.json","489659585922613248.json","489503614202032128.txt","507044785568620544.txt","506840576914759681.txt","488229991340343296.txt",".stats_cache","489111492441432064.json","489778416359866368.json",{"...":"file"}]},{"tmp":["507411251035521024.txt","507420679118278656.txt","507421306565169152.txt","507421595946586112.txt","507421843792617472.txt","507423578833555456.txt","507423642545045505.txt","507426881885708288.txt","506791604049293312.txt","506799356025249792.txt","506801308775362561.txt","506801900147466241.txt","506807631747751937.txt","506810294640054272.txt","506819395063410688.txt","506820161471381504.txt","506829902746636288.txt","506840576914759681.txt","506842574259486720.txt","506856916455526400.txt",{"...":"file"}]},{"origtweets_light":["487838782453219328.txt","488778133295075328.txt","488963679669731328.txt","488984223458787328.txt","489056320092643328.txt","489101415894499328.txt","489316372002787328.txt","489335673758179328.txt","489363645026275328.txt","489377154770403328.txt","489416444191715328.txt","489447870429667328.txt","489681750281699328.txt","489706911927779328.txt","489738611739619328.txt","489869581918691328.txt","490012805358051328.txt","490051479555043328.txt",".stats_cache","487838782453219328.ann",{"...":"file"}]},{"munshitest":[{"munshidatatest":[{"corpus":["cinq_semaines_en_ballon.xml","comte_chanteleine.xml"]},{"pdf":["comte_chanteleine.pdf","cinq_semaines_en_ballon.pdf"]},{"pdfbox":["comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]}]},"comte_chanteleine.xml","cinq_semaines_en_ballon.xml"]},{"testcorpus":["meaning_of_life.txt","humanism.txt","meaning_of_life_full.txt"]},{"run-7ab7d919-48c0-42f9-9f12-74c70d58a4a6":["490051479555043328.xml","490051479555043328.conll"]},"hello",".stats_cache","me.tweetaccount"]}
>>>>>>> 1a8a6bec871bbad0e0e1d69a791e94c6e671d610
[21/12/2015 - 14:33:21] (::1|)  => hello
[21/12/2015 - 14:33:21] (::1|)  => cpm
[21/12/2015 - 14:33:33] (::1|)  => hello
[21/12/2015 - 14:33:33] (::1|)  => 
[21/12/2015 - 14:33:34] (::1|)  => hello
[21/12/2015 - 14:33:54] (::1|)  => timeout
[21/12/2015 - 14:33:54] (::1|)  => hello
[21/12/2015 - 14:34:14] (::1|)  => timeout
[21/12/2015 - 14:34:14] (::1|)  => hello
[21/12/2015 - 14:34:34] (::1|)  => timeout
[21/12/2015 - 14:34:34] (::1|)  => hello
[21/12/2015 - 14:34:54] (::1|)  => timeout
[21/12/2015 - 14:36:36] (::1|)  => hello
[21/12/2015 - 14:36:36] (::1|)  => 
[21/12/2015 - 14:36:36] (::1|)  => hello
[21/12/2015 - 14:36:56] (::1|)  => timeout
[21/12/2015 - 14:36:56] (::1|)  => hello
[21/12/2015 - 14:37:16] (::1|)  => timeout
[21/12/2015 - 14:37:16] (::1|)  => hello
[21/12/2015 - 14:37:36] (::1|)  => timeout
[21/12/2015 - 14:37:36] (::1|)  => hello
[21/12/2015 - 14:37:56] (::1|)  => timeout
[21/12/2015 - 14:37:56] (::1|)  => hello
[21/12/2015 - 14:37:56] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 14:37:56] (::1|)  => hello
[21/12/2015 - 14:37:56] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 15:3:24] (::1|)  => hello
[21/12/2015 - 15:3:24] (::1|)  => 
[21/12/2015 - 15:3:25] (::1|)  => hello
[21/12/2015 - 15:3:25] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 15:3:26] (::1|)  => hello
[21/12/2015 - 15:3:26] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 15:3:26] (::1|)  => hello
[21/12/2015 - 15:3:26] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 15:3:26] (::1|)  => hello
[21/12/2015 - 15:3:26] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/modules/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/modules/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/modules/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"OUT":{"format":"unknown","type":"FILE","value":"$OUT_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"},"OUT_DIR":{"type":"DIR","value":"$_RUN_DIR"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  OUT_DIR :\n    type : DIR\n    value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $OUT_DIR/${IN:basename}.xml\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $OUT_DIR/${IN:basename}.xml","sourcepath":"/vagrant/modules/examples/modules/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/modules/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.stanford-parser.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/modules/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN","OUT_DIR":"$_RUN_DIR"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/modules/pipeline-test0.module"}]}]}]}]}]}
[21/12/2015 - 15:3:26] (::1|)  => hello
[21/12/2015 - 15:3:27] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301

[21/12/2015 - 15:3:27] (::1|)  => hello
[21/12/2015 - 15:3:27] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 15:6:58] (::1|)  => hello
[21/12/2015 - 15:6:58] (::1|)  => 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
[21/12/2015 - 15:6:58] (::1|)  => hello
[21/12/2015 - 15:6:58] (::1|)  => Invalid argument
[21/12/2015 - 15:15:22] (::1|)  => hello
[21/12/2015 - 15:15:22] (::1|)  => 
[21/12/2015 - 15:15:23] (::1|)  => hello
[21/12/2015 - 15:15:23] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 15:15:24] (::1|)  => hello
[21/12/2015 - 15:15:24] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 15:15:24] (::1|)  => hello
[21/12/2015 - 15:15:24] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 15:15:24] (::1|)  => hello
[21/12/2015 - 15:15:24] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 15:15:24] (::1|)  => hello
[21/12/2015 - 15:15:24] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 15:15:24] (::1|)  => hello
[21/12/2015 - 15:15:25] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61

[21/12/2015 - 15:16:10] (::1|)  => hello
[21/12/2015 - 15:16:10] (::1|)  => 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
[21/12/2015 - 15:16:10] (::1|)  => hello
[21/12/2015 - 15:16:10] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547"}},"parentEnv":{"IN":{"type":"VAL","value":"/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547"}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/data/corpus//testcorpus/humanism.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-core-nlp"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/custom/jose_moreno"},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-core-nlp"}},"processport":"61235","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-core-nlp","parentport":"28011","completeddate":"","status":"Running"}
[21/12/2015 - 15:16:13] (::1|)  => hello
[21/12/2015 - 15:16:13] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547"}},"parentEnv":{"IN":{"type":"VAL","value":"/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547"}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/data/corpus//testcorpus/humanism.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-core-nlp"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/custom/jose_moreno"},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-core-nlp"}},"processport":"61235","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-core-nlp","parentport":"28011","completeddate":"","status":"Running"}
[21/12/2015 - 15:16:16] (::1|)  => hello
[21/12/2015 - 15:16:16] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547"}},"parentEnv":{"IN":{"type":"VAL","value":"/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547"}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/data/corpus//testcorpus/humanism.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-core-nlp"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/custom/jose_moreno"},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-core-nlp"}},"processport":"61235","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-core-nlp","parentport":"28011","completeddate":"","status":"Running"}
[21/12/2015 - 15:16:40] (::1|)  => hello
[21/12/2015 - 15:16:40] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\\\"\""}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:16:45 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.8 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.1 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.9 sec. ParserAnnotator: 4.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.6 sec. for 132 tokens at 23.5 tokens/sec. Pipeline setup: 22.4 sec. Total time for StanfordCoreNLP pipeline: 28.3 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"47355","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 15:20:20] (::1|)  => hello
[21/12/2015 - 15:20:20] (::1|)  => 
[21/12/2015 - 15:20:21] (::1|)  => hello
[21/12/2015 - 15:20:21] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 15:20:22] (::1|)  => hello
[21/12/2015 - 15:20:22] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 15:20:22] (::1|)  => hello
[21/12/2015 - 15:20:22] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 15:20:22] (::1|)  => hello
[21/12/2015 - 15:20:22] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 15:20:22] (::1|)  => hello
[21/12/2015 - 15:20:23] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547

[21/12/2015 - 15:20:23] (::1|)  => hello
[21/12/2015 - 15:20:23] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 15:20:25] (::1|)  => hello
[21/12/2015 - 15:20:25] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\\\"\""}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:16:45 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.8 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.1 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.9 sec. ParserAnnotator: 4.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.6 sec. for 132 tokens at 23.5 tokens/sec. Pipeline setup: 22.4 sec. Total time for StanfordCoreNLP pipeline: 28.3 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"839","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 15:20:36] (::1|)  => hello
[21/12/2015 - 15:20:36] (::1|)  => 
[21/12/2015 - 15:20:38] (::1|)  => hello
[21/12/2015 - 15:20:38] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 15:20:38] (::1|)  => hello
[21/12/2015 - 15:20:38] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 15:20:39] (::1|)  => hello
[21/12/2015 - 15:20:39] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 15:20:39] (::1|)  => hello
[21/12/2015 - 15:20:39] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 15:20:39] (::1|)  => hello
[21/12/2015 - 15:20:39] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547

[21/12/2015 - 15:20:39] (::1|)  => hello
[21/12/2015 - 15:20:39] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 15:21:5] (::1|)  => hello
[21/12/2015 - 15:21:5] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\\\"\""}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:16:45 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.8 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.1 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.9 sec. ParserAnnotator: 4.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.6 sec. for 132 tokens at 23.5 tokens/sec. Pipeline setup: 22.4 sec. Total time for StanfordCoreNLP pipeline: 28.3 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"61311","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 15:22:55] (::1|)  => hello
[21/12/2015 - 15:22:55] (::1|)  => ok
[21/12/2015 - 15:23:13] (::1|)  => hello
[21/12/2015 - 15:23:13] (::1|)  => no module named stanford-core-nlp found!
[21/12/2015 - 15:23:13] (::1|)  => hello
[21/12/2015 - 15:23:13] (::1|)  => Error :Invalid UUID string: no
[21/12/2015 - 15:23:37] (::1|)  => hello
[21/12/2015 - 15:23:38] (::1|)  => ok
[21/12/2015 - 15:23:48] (::1|)  => hello
[21/12/2015 - 15:23:48] (::1|)  => 0f8f1662-688e-4de3-96ea-03330e4cc77a
[21/12/2015 - 15:23:48] (::1|)  => hello
[21/12/2015 - 15:23:48] (::1|)  => {"creationdate":"2015-12-21T14:24:07.670","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a"}},"parentEnv":{"IN":{"type":"VAL","value":"/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a"}},"ruid":"0f8f1662-688e-4de3-96ea-03330e4cc77a","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/data/corpus//testcorpus/humanism.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-core-nlp"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/custom/jose_moreno"},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a/\""},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-core-nlp"}},"processport":"22671","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-core-nlp","parentport":"61716","completeddate":"","status":"Running"}
[21/12/2015 - 15:23:50] (::1|)  => hello
[21/12/2015 - 15:23:50] (::1|)  => {"creationdate":"2015-12-21T14:24:07.670","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a"}},"parentEnv":{"IN":{"type":"VAL","value":"/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a"}},"ruid":"0f8f1662-688e-4de3-96ea-03330e4cc77a","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/data/corpus//testcorpus/humanism.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-core-nlp"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/custom/jose_moreno"},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a/\""},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-core-nlp"}},"processport":"22671","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-core-nlp","parentport":"61716","completeddate":"","status":"Running"}
[21/12/2015 - 15:24:4] (::1|)  => hello
[21/12/2015 - 15:24:4] (::1|)  => {"creationdate":"2015-12-21T14:24:07.670","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a"}},"parentEnv":{"IN":{"type":"VAL","value":"/data/corpus//testcorpus/humanism.txt"},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a"}},"ruid":"0f8f1662-688e-4de3-96ea-03330e4cc77a","parentProcess":"None","env":{"IN":{"type":"FILE","value":"/data/corpus//testcorpus/humanism.txt"},"_CUR_MOD":{"type":"VAL","value":"stanford-core-nlp"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/custom/jose_moreno"},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a/\""},"_MOD_CONTEXT":{"type":"VAL","value":"stanford-core-nlp"}},"processport":"22671","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"stanford-core-nlp","parentport":"61716","completeddate":"","status":"Running"}
[21/12/2015 - 15:24:33] (::1|)  => hello
[21/12/2015 - 15:24:33] (::1|)  => {"creationdate":"2015-12-21T14:24:07.670","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a\\\"\""}},"ruid":"0f8f1662-688e-4de3-96ea-03330e4cc77a","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.7 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.5 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:24:24 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:24:24 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:24:24 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [2.6 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.0 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.6 sec. ParserAnnotator: 4.5 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.5 sec. for 132 tokens at 24.2 tokens/sec. Pipeline setup: 21.1 sec. Total time for StanfordCoreNLP pipeline: 26.7 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"1396","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 15:25:53] (::1|)  => hello
[21/12/2015 - 15:25:53] (::1|)  => 
[21/12/2015 - 15:25:55] (::1|)  => hello
[21/12/2015 - 15:25:55] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 15:25:56] (::1|)  => hello
[21/12/2015 - 15:25:56] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 15:25:56] (::1|)  => hello
[21/12/2015 - 15:25:56] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 15:25:56] (::1|)  => hello
[21/12/2015 - 15:25:56] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 15:25:56] (::1|)  => hello
[21/12/2015 - 15:25:56] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 15:25:56] (::1|)  => hello
[21/12/2015 - 15:25:56] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a

[21/12/2015 - 15:27:59] (::1|)  => hello
[21/12/2015 - 15:27:59] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\\\"\""}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:16:45 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.8 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.1 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.9 sec. ParserAnnotator: 4.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.6 sec. for 132 tokens at 23.5 tokens/sec. Pipeline setup: 22.4 sec. Total time for StanfordCoreNLP pipeline: 28.3 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"44514","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 15:28:0] (::1|)  => hello
[21/12/2015 - 15:28:0] (::1|)  => {"creationdate":"2015-12-21T14:24:07.670","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a\\\"\""}},"ruid":"0f8f1662-688e-4de3-96ea-03330e4cc77a","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.7 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.5 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:24:24 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:24:24 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:24:24 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [2.6 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.0 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.6 sec. ParserAnnotator: 4.5 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.5 sec. for 132 tokens at 24.2 tokens/sec. Pipeline setup: 21.1 sec. Total time for StanfordCoreNLP pipeline: 26.7 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"2768","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 15:28:14] (::1|)  => hello
[21/12/2015 - 15:28:14] (::1|)  => /data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a//humanism.txt.xml
[21/12/2015 - 15:28:14] (::1|)  => false
[21/12/2015 - 16:41:9] (::1|)  => hello
[21/12/2015 - 16:41:9] (::1|)  => 
[21/12/2015 - 16:41:10] (::1|)  => hello
[21/12/2015 - 16:41:10] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 16:41:10] (::1|)  => hello
[21/12/2015 - 16:41:10] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a

[21/12/2015 - 16:41:10] (::1|)  => hello
[21/12/2015 - 16:41:10] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 16:41:10] (::1|)  => hello
[21/12/2015 - 16:41:10] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 16:41:15] (::1|)  => hello
[21/12/2015 - 16:41:15] (::1|)  => Name : pipeline-test
Desc : test de pipeline
Last Modified : 12/21/15 2:08 PM
Inputs : 
	CORPUS: DIR( format : none ; schema : none)
Outputs : 
	VOID: FILE*( format : none ; schema : none)


Name : corenlp-server
Desc : stanford core nlp server mode test
Last Modified : 12/21/15 2:07 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	OUT: FILE( format : none ; schema : none)


Name : pipeline-test2
Desc : test de pipeline
Last Modified : 12/21/15 2:08 PM
Inputs : 
	CORPUS: DIR( format : none ; schema : none)
Outputs : 
	VOID: VAL( format : none ; schema : none)


Name : stanford-core-nlp
Desc : The default stanford core nlp pipeline
Last Modified : 12/21/15 2:23 PM
Inputs : 
	IN: FILE( format : none ; schema : none)// File to be annotated
Outputs : 
	RAW_OUT: FILE( format : xml ; schema : none)
	BRAT_ANN: FILE( format : txt ; schema : brat_ann)


Name : brat_propagate
Desc : 
Last Modified : 12/21/15 2:07 PM
Inputs : 
	SEED: FILE( format : none ; schema : brat_annotation)
	CORPUS: DIR( format : none ; schema : text)
Outputs : 
	CORPUS_MODIFIED: DIR( format : none ; schema : text)


Name : bonsai-parser@munshi
Desc : bonsai parse of xml files into passage format made by Munshi Asadullah
Last Modified : 12/21/15 2:07 PM
Inputs : 
	IN_DIR: DIR( format : xml ; schema : html)// directory containing html files to be parsed
Outputs : 
	OUT_DIR: DIR( format : xml ; schema : passage)// directory containing the output of the parsed file files keep the same name as the original file



Name : stanford-parser
Desc : The stanford parser
Last Modified : 12/21/15 2:08 PM
Inputs : 
	IN: FILE( format : none ; schema : none)// File to be annotated
Outputs : 
	OUT: FILE( format : unknown ; schema : none)
	CONLL: FILE( format : text ; schema : conll)


Name : pipeline-test0
Desc : test de pipeline
Last Modified : 12/21/15 2:08 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	VOID: VAL( format : none ; schema : none)


Name : tweetparse@jose
Desc : crawl some tweets
Last Modified : 12/21/15 2:08 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	OUT: FILE( format : none ; schema : none)


Name : foo
Desc : foo module for testing purposes
Last Modified : 12/21/15 2:07 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	OUT: FILE*( format : none ; schema : none)



[21/12/2015 - 16:53:25] (::1|)  => hello
[21/12/2015 - 16:53:25] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 16:53:25] (::1|)  => hello
[21/12/2015 - 16:53:25] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 17:2:39] (::1|)  => hello
[21/12/2015 - 17:2:39] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\\\"\""}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:16:45 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.8 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.1 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.9 sec. ParserAnnotator: 4.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.6 sec. for 132 tokens at 23.5 tokens/sec. Pipeline setup: 22.4 sec. Total time for StanfordCoreNLP pipeline: 28.3 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"41551","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 17:2:52] (::1|)  => hello
[21/12/2015 - 17:2:52] (::1|)  => Error :can't parse serialized environnment ()
[21/12/2015 - 17:2:54] (::1|)  => hello
[21/12/2015 - 17:2:54] (::1|)  => Error :can't parse serialized environnment ()
[21/12/2015 - 17:2:56] (::1|)  => hello
[21/12/2015 - 17:2:56] (::1|)  => Error :can't parse serialized environnment ()
[21/12/2015 - 17:3:2] (::1|)  => hello
[21/12/2015 - 17:3:2] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\\\"\""}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:16:45 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.8 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.1 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.9 sec. ParserAnnotator: 4.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.6 sec. for 132 tokens at 23.5 tokens/sec. Pipeline setup: 22.4 sec. Total time for StanfordCoreNLP pipeline: 28.3 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"39758","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 17:3:9] (::1|)  => hello
[21/12/2015 - 17:3:9] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a

[21/12/2015 - 17:5:48] (::1|)  => hello
[21/12/2015 - 17:5:48] (::1|)  => Name : pipeline-test
Desc : test de pipeline
Last Modified : 12/21/15 2:08 PM
Inputs : 
	CORPUS: DIR( format : none ; schema : none)
Outputs : 
	VOID: FILE*( format : none ; schema : none)


Name : corenlp-server
Desc : stanford core nlp server mode test
Last Modified : 12/21/15 2:07 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	OUT: FILE( format : none ; schema : none)


Name : pipeline-test2
Desc : test de pipeline
Last Modified : 12/21/15 2:08 PM
Inputs : 
	CORPUS: DIR( format : none ; schema : none)
Outputs : 
	VOID: VAL( format : none ; schema : none)


Name : stanford-core-nlp
Desc : The default stanford core nlp pipeline
Last Modified : 12/21/15 2:23 PM
Inputs : 
	IN: FILE( format : none ; schema : none)// File to be annotated
Outputs : 
	RAW_OUT: FILE( format : xml ; schema : none)
	BRAT_ANN: FILE( format : txt ; schema : brat_ann)


Name : brat_propagate
Desc : 
Last Modified : 12/21/15 2:07 PM
Inputs : 
	SEED: FILE( format : none ; schema : brat_annotation)
	CORPUS: DIR( format : none ; schema : text)
Outputs : 
	CORPUS_MODIFIED: DIR( format : none ; schema : text)


Name : bonsai-parser@munshi
Desc : bonsai parse of xml files into passage format made by Munshi Asadullah
Last Modified : 12/21/15 2:07 PM
Inputs : 
	IN_DIR: DIR( format : xml ; schema : html)// directory containing html files to be parsed
Outputs : 
	OUT_DIR: DIR( format : xml ; schema : passage)// directory containing the output of the parsed file files keep the same name as the original file



Name : stanford-parser
Desc : The stanford parser
Last Modified : 12/21/15 2:08 PM
Inputs : 
	IN: FILE( format : none ; schema : none)// File to be annotated
Outputs : 
	OUT: FILE( format : unknown ; schema : none)
	CONLL: FILE( format : text ; schema : conll)


Name : pipeline-test0
Desc : test de pipeline
Last Modified : 12/21/15 2:08 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	VOID: VAL( format : none ; schema : none)


Name : tweetparse@jose
Desc : crawl some tweets
Last Modified : 12/21/15 2:08 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	OUT: FILE( format : none ; schema : none)


Name : foo
Desc : foo module for testing purposes
Last Modified : 12/21/15 2:07 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	OUT: FILE*( format : none ; schema : none)



[21/12/2015 - 17:6:58] (::1|)  => hello
[21/12/2015 - 17:6:59] (::1|)  => dfd3e565-988c-4e5e-bcfc-b70d718e0535
[21/12/2015 - 17:6:59] (::1|)  => hello
[21/12/2015 - 17:6:59] (::1|)  => {"creationdate":"2015-12-21T16:07:19.535","def":"/vagrant/modules/examples/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535"},"CORPUS":{"type":"VAL","value":"/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535"},"CORPUS":{"type":"VAL","value":"/data/corpus//testcorpus"}},"ruid":"dfd3e565-988c-4e5e-bcfc-b70d718e0535","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples"},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535/\""},"CORPUS":{"type":"DIR","value":"/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"34506","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"22598","completeddate":"","status":"Running"}
[21/12/2015 - 17:7:3] (::1|)  => hello
[21/12/2015 - 17:7:3] (::1|)  => {"creationdate":"2015-12-21T16:07:19.535","def":"/vagrant/modules/examples/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535"},"CORPUS":{"type":"VAL","value":"/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535"},"CORPUS":{"type":"VAL","value":"/data/corpus//testcorpus"}},"ruid":"dfd3e565-988c-4e5e-bcfc-b70d718e0535","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples"},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535/\""},"CORPUS":{"type":"DIR","value":"/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"34506","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"22598","completeddate":"","status":"Running"}
[21/12/2015 - 17:7:6] (::1|)  => hello
[21/12/2015 - 17:7:6] (::1|)  => {"creationdate":"2015-12-21T16:07:19.535","def":"/vagrant/modules/examples/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535"},"CORPUS":{"type":"VAL","value":"/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535"},"CORPUS":{"type":"VAL","value":"/data/corpus//testcorpus"}},"ruid":"dfd3e565-988c-4e5e-bcfc-b70d718e0535","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples"},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535/\""},"CORPUS":{"type":"DIR","value":"/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"34506","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"22598","completeddate":"","status":"Running"}
[21/12/2015 - 17:7:33] (::1|)  => hello
[21/12/2015 - 17:7:33] (::1|)  => {"creationdate":"2015-12-21T16:07:19.535","def":"/vagrant/modules/examples/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/examples\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535\""},"CORPUS":{"type":"VAL","value":"\"/data/corpus//testcorpus\""}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535\""},"CORPUS":{"type":"VAL","value":"\"/data/corpus//testcorpus\""},"VOID":{"type":"FILE*","value":["Error reading val value (should be a string)","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/stanford-parser/meaning_of_life.xml","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/stanford-parser/humanism.xml","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/stanford-parser/meaning_of_life_full.xml"]}},"ruid":"dfd3e565-988c-4e5e-bcfc-b70d718e0535","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/stanford-parser/meaning_of_life.xml","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/stanford-parser/humanism.xml","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/stanford-parser/meaning_of_life_full.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":"\"\""},"_MAP.stanford-parser.CONLL":{"type":"FILE*","value":["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/stanford-parser/meaning_of_life.conll","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/stanford-parser/meaning_of_life_full.conll","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/stanford-parser/humanism.conll"]},"_CUR_MOD":{"type":"VAL","value":"\"pipeline-test\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_MAP.foo.OUT":{"type":"FILE**","value":[["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/foo/foo1","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/foo/foo2","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/foo/foo3"],["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/foo/foo1","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/foo/foo2","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/foo/foo3"],["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/foo/foo1","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/foo/foo2","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null,null]},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535/\""},"_CMD#merge.STDERR":{"type":"VAL","value":"\"\\\"\\\"\""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null,null]},"CORPUS":{"type":"DIR","value":"\"/data/corpus//testcorpus\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"pipeline-test\""}},"processport":"42461","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 17:51:0] (::1|)  => hello
[21/12/2015 - 17:51:0] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 17:51:0] (::1|)  => hello
[21/12/2015 - 17:51:0] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 17:51:21] (::1|)  => hello
[21/12/2015 - 17:51:21] (::1|)  => public/img/system/m.png
[21/12/2015 - 17:51:21] (::1|)  => hello
[21/12/2015 - 17:51:21] (::1|)  => public/img/system/mo.png
[21/12/2015 - 17:51:21] (::1|)  => hello
[21/12/2015 - 17:51:21] (::1|)  => public/img/system/mod.png
[21/12/2015 - 17:51:21] (::1|)  => hello
[21/12/2015 - 17:51:21] (::1|)  => public/img/system/modu.png
[21/12/2015 - 17:51:22] (::1|)  => hello
[21/12/2015 - 17:51:22] (::1|)  => public/img/system/modul.png
[21/12/2015 - 17:52:14] (::1|)  => hello
[21/12/2015 - 17:52:14] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 17:52:14] (::1|)  => hello
[21/12/2015 - 17:52:14] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 17:52:50] (::1|)  => hello
[21/12/2015 - 17:52:50] (::1|)  => 
[21/12/2015 - 17:52:50] (::1|)  => hello
[21/12/2015 - 17:52:50] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 17:52:50] (::1|)  => hello
[21/12/2015 - 17:52:50] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 17:52:51] (::1|)  => hello
[21/12/2015 - 17:52:51] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 17:52:51] (::1|)  => hello
[21/12/2015 - 17:52:51] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 17:52:51] (::1|)  => hello
[21/12/2015 - 17:52:51] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 17:52:51] (::1|)  => hello
[21/12/2015 - 17:52:51] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535

[21/12/2015 - 17:53:28] (::1|)  => hello
[21/12/2015 - 17:53:28] (::1|)  => 
[21/12/2015 - 17:53:28] (::1|)  => hello
[21/12/2015 - 17:53:29] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 17:53:29] (::1|)  => hello
[21/12/2015 - 17:53:29] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535

[21/12/2015 - 17:53:29] (::1|)  => hello
[21/12/2015 - 17:53:29] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 17:53:29] (::1|)  => hello
[21/12/2015 - 17:53:29] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 17:54:19] (::1|)  => hello
[21/12/2015 - 17:54:20] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\\\"\""}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:16:45 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.8 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.1 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.9 sec. ParserAnnotator: 4.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.6 sec. for 132 tokens at 23.5 tokens/sec. Pipeline setup: 22.4 sec. Total time for StanfordCoreNLP pipeline: 28.3 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"59817","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 17:59:0] (::1|)  => hello
[21/12/2015 - 17:59:0] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 17:59:0] (::1|)  => hello
[21/12/2015 - 17:59:0] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 18:1:33] (::1|)  => hello
[21/12/2015 - 18:1:33] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 18:1:33] (::1|)  => hello
[21/12/2015 - 18:1:33] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 18:2:44] (::1|)  => hello
[21/12/2015 - 18:2:44] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 18:2:45] (::1|)  => hello
[21/12/2015 - 18:2:45] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 18:2:49] (::1|)  => hello
[21/12/2015 - 18:2:49] (::1|)  => public/img/system/m.png
[21/12/2015 - 18:2:50] (::1|)  => hello
[21/12/2015 - 18:2:50] (::1|)  => public/img/system/mo.png
[21/12/2015 - 18:2:50] (::1|)  => hello
[21/12/2015 - 18:2:50] (::1|)  => public/img/system/mod.png
[21/12/2015 - 18:2:50] (::1|)  => hello
[21/12/2015 - 18:2:50] (::1|)  => public/img/system/modu.png
[21/12/2015 - 18:2:50] (::1|)  => hello
[21/12/2015 - 18:2:50] (::1|)  => public/img/system/modul.png
[21/12/2015 - 18:4:19] (::1|)  => hello
[21/12/2015 - 18:4:19] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\\\"\""}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:16:45 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.8 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.1 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.9 sec. ParserAnnotator: 4.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.6 sec. for 132 tokens at 23.5 tokens/sec. Pipeline setup: 22.4 sec. Total time for StanfordCoreNLP pipeline: 28.3 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"38274","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 18:10:53] (::1|)  => hello
[21/12/2015 - 18:10:53] (::1|)  => 
[21/12/2015 - 18:10:56] (::1|)  => hello
[21/12/2015 - 18:10:56] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 18:10:56] (::1|)  => hello
[21/12/2015 - 18:10:56] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 18:10:57] (::1|)  => hello
[21/12/2015 - 18:10:57] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 18:10:57] (::1|)  => hello
[21/12/2015 - 18:10:57] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535

[21/12/2015 - 18:10:57] (::1|)  => hello
[21/12/2015 - 18:10:57] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 18:10:57] (::1|)  => hello
[21/12/2015 - 18:10:57] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 18:11:18] (::1|)  => hello
[21/12/2015 - 18:11:18] (::1|)  => 
[21/12/2015 - 18:11:20] (::1|)  => hello
[21/12/2015 - 18:11:20] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 18:11:21] (::1|)  => hello
[21/12/2015 - 18:11:21] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 18:11:22] (::1|)  => hello
[21/12/2015 - 18:11:22] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 18:11:22] (::1|)  => hello
[21/12/2015 - 18:11:22] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 18:11:22] (::1|)  => hello
[21/12/2015 - 18:11:22] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535

[21/12/2015 - 18:11:22] (::1|)  => hello
[21/12/2015 - 18:11:22] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 18:12:23] (::1|)  => hello
[21/12/2015 - 18:12:23] (::1|)  => public/img/system/folde2.png
[21/12/2015 - 18:12:25] (::1|)  => hello
[21/12/2015 - 18:12:25] (::1|)  => public/img/system/folde2.png
[21/12/2015 - 18:13:24] (::1|)  => hello
[21/12/2015 - 18:13:24] (::1|)  => 
[21/12/2015 - 18:13:26] (::1|)  => hello
[21/12/2015 - 18:13:26] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 18:13:27] (::1|)  => hello
[21/12/2015 - 18:13:27] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 18:13:27] (::1|)  => hello
[21/12/2015 - 18:13:27] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 18:13:27] (::1|)  => hello
[21/12/2015 - 18:13:28] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 18:13:28] (::1|)  => hello
[21/12/2015 - 18:13:28] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535

[21/12/2015 - 18:13:28] (::1|)  => hello
[21/12/2015 - 18:13:28] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 18:18:51] (::1|)  => hello
[21/12/2015 - 18:18:51] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 18:18:51] (::1|)  => hello
[21/12/2015 - 18:18:51] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 18:18:55] (::1|)  => hello
[21/12/2015 - 18:18:55] (::1|)  => 
[21/12/2015 - 18:18:55] (::1|)  => hello
[21/12/2015 - 18:18:55] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 18:18:56] (::1|)  => hello
[21/12/2015 - 18:18:56] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 18:18:56] (::1|)  => hello
[21/12/2015 - 18:18:56] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 18:18:56] (::1|)  => hello
[21/12/2015 - 18:18:56] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535

[21/12/2015 - 18:18:56] (::1|)  => hello
[21/12/2015 - 18:18:56] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 18:18:56] (::1|)  => hello
[21/12/2015 - 18:18:56] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 18:27:12] (::1|)  => hello
[21/12/2015 - 18:27:12] (::1|)  => 
[21/12/2015 - 18:27:14] (::1|)  => hello
[21/12/2015 - 18:27:14] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 18:27:15] (::1|)  => hello
[21/12/2015 - 18:27:15] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 18:27:15] (::1|)  => hello
[21/12/2015 - 18:27:15] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 18:27:15] (::1|)  => hello
[21/12/2015 - 18:27:15] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 18:27:15] (::1|)  => hello
[21/12/2015 - 18:27:16] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535

[21/12/2015 - 18:27:16] (::1|)  => hello
[21/12/2015 - 18:27:16] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 18:27:29] (::1|)  => hello
[21/12/2015 - 18:27:29] (::1|)  => 
[21/12/2015 - 18:27:29] (::1|)  => hello
[21/12/2015 - 18:27:29] (::1|)  => 
[21/12/2015 - 18:28:30] (::1|)  => hello
[21/12/2015 - 18:28:30] (::1|)  => 
[21/12/2015 - 18:28:31] (::1|)  => hello
[21/12/2015 - 18:28:31] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 18:28:31] (::1|)  => hello
[21/12/2015 - 18:28:31] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 18:28:31] (::1|)  => hello
[21/12/2015 - 18:28:31] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 18:28:31] (::1|)  => hello
[21/12/2015 - 18:28:31] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 18:28:31] (::1|)  => hello
[21/12/2015 - 18:28:31] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535

[21/12/2015 - 18:28:31] (::1|)  => hello
[21/12/2015 - 18:28:31] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 18:31:6] (::1|)  => hello
[21/12/2015 - 18:31:6] (::1|)  => 
[21/12/2015 - 18:31:6] (::1|)  => hello
[21/12/2015 - 18:31:6] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 18:31:6] (::1|)  => hello
[21/12/2015 - 18:31:6] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 18:31:6] (::1|)  => hello
[21/12/2015 - 18:31:6] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535

[21/12/2015 - 18:31:6] (::1|)  => hello
[21/12/2015 - 18:31:7] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 18:32:32] (::1|)  => hello
[21/12/2015 - 18:32:32] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\\\"\""}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:16:45 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.8 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.1 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.9 sec. ParserAnnotator: 4.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.6 sec. for 132 tokens at 23.5 tokens/sec. Pipeline setup: 22.4 sec. Total time for StanfordCoreNLP pipeline: 28.3 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"50211","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 18:32:44] (::1|)  => hello
[21/12/2015 - 18:32:44] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\\\"\""}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:16:45 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.8 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.1 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.9 sec. ParserAnnotator: 4.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.6 sec. for 132 tokens at 23.5 tokens/sec. Pipeline setup: 22.4 sec. Total time for StanfordCoreNLP pipeline: 28.3 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"17413","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 18:32:45] (::1|)  => hello
[21/12/2015 - 18:32:45] (::1|)  => {"creationdate":"2015-12-21T14:24:07.670","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a\\\"\""}},"ruid":"0f8f1662-688e-4de3-96ea-03330e4cc77a","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.7 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.5 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:24:24 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:24:24 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:24:24 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [2.6 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.0 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.6 sec. ParserAnnotator: 4.5 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.5 sec. for 132 tokens at 24.2 tokens/sec. Pipeline setup: 21.1 sec. Total time for StanfordCoreNLP pipeline: 26.7 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"3449","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 18:33:14] (::1|)  => hello
[21/12/2015 - 18:33:14] (::1|)  => 0174e913-e06e-42fa-8244-1705d7cee6bc
[21/12/2015 - 18:33:14] (::1|)  => hello
[21/12/2015 - 18:33:14] (::1|)  => {"creationdate":"2015-12-21T17:33:35.270","def":"/vagrant/modules/examples/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc"},"CORPUS":{"type":"VAL","value":"/data/corpus//testcorpus"}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_RUN_DIR":{"type":"DIR","value":"/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc"},"CORPUS":{"type":"VAL","value":"/data/corpus//testcorpus"}},"ruid":"0174e913-e06e-42fa-8244-1705d7cee6bc","parentProcess":"None","env":{"_CUR_MOD":{"type":"VAL","value":"pipeline-test"},"_DEF_DIR":{"type":"DIR","value":"/vagrant/modules/examples"},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc/\""},"CORPUS":{"type":"DIR","value":"/data/corpus//testcorpus"},"_MOD_CONTEXT":{"type":"VAL","value":"pipeline-test"}},"processport":"34023","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","resultnamespace":"","name":"pipeline-test","parentport":"28678","completeddate":"","status":"Running"}
[21/12/2015 - 18:33:22] (::1|)  => hello
[21/12/2015 - 18:33:22] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\\\"\""}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:16:45 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.8 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.1 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.9 sec. ParserAnnotator: 4.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.6 sec. for 132 tokens at 23.5 tokens/sec. Pipeline setup: 22.4 sec. Total time for StanfordCoreNLP pipeline: 28.3 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"37357","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 18:33:52] (::1|)  => hello
[21/12/2015 - 18:33:52] (::1|)  => {"creationdate":"2015-12-21T17:33:35.270","def":"/vagrant/modules/examples/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/examples\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc\""},"CORPUS":{"type":"VAL","value":"\"/data/corpus//testcorpus\""}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc\""},"CORPUS":{"type":"VAL","value":"\"/data/corpus//testcorpus\""},"VOID":{"type":"FILE*","value":["Error reading val value (should be a string)","/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.1/stanford-parser/meaning_of_life.xml","/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.2/stanford-parser/humanism.xml","/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.0/stanford-parser/meaning_of_life_full.xml"]}},"ruid":"0174e913-e06e-42fa-8244-1705d7cee6bc","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.1/stanford-parser/meaning_of_life.xml","/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.2/stanford-parser/humanism.xml","/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.0/stanford-parser/meaning_of_life_full.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":"\"\""},"_MAP.stanford-parser.CONLL":{"type":"FILE*","value":["/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.1/stanford-parser/meaning_of_life.conll","/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.0/stanford-parser/meaning_of_life_full.conll","/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.2/stanford-parser/humanism.conll"]},"_CUR_MOD":{"type":"VAL","value":"\"pipeline-test\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_MAP.foo.OUT":{"type":"FILE**","value":[["/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.2/foo/foo1","/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.2/foo/foo2","/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.2/foo/foo3"],["/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.0/foo/foo1","/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.0/foo/foo2","/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.0/foo/foo3"],["/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.1/foo/foo1","/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.1/foo/foo2","/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null,null]},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-0174e913-e06e-42fa-8244-1705d7cee6bc/\""},"_CMD#merge.STDERR":{"type":"VAL","value":"\"\\\"\\\"\""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null,null]},"CORPUS":{"type":"DIR","value":"\"/data/corpus//testcorpus\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"pipeline-test\""}},"processport":"19646","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 18:40:42] (::1|)  => hello
[21/12/2015 - 18:40:42] (::1|)  => Error :can't parse serialized environnment ()
[21/12/2015 - 18:40:44] (::1|)  => hello
[21/12/2015 - 18:40:44] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\\\"\""}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:16:45 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.8 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.1 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.9 sec. ParserAnnotator: 4.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.6 sec. for 132 tokens at 23.5 tokens/sec. Pipeline setup: 22.4 sec. Total time for StanfordCoreNLP pipeline: 28.3 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"59547","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 19:10:36] (::1|)  => hello
[21/12/2015 - 19:10:36] (::1|)  => 
[21/12/2015 - 19:10:39] (::1|)  => hello
[21/12/2015 - 19:10:39] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:10:39] (::1|)  => hello
[21/12/2015 - 19:10:39] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:10:40] (::1|)  => hello
[21/12/2015 - 19:10:40] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:10:40] (::1|)  => hello
[21/12/2015 - 19:10:40] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:10:40] (::1|)  => hello
[21/12/2015 - 19:10:40] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:10:40] (::1|)  => hello
[21/12/2015 - 19:10:40] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:11:17] (::1|)  => hello
[21/12/2015 - 19:11:17] (::1|)  => 
[21/12/2015 - 19:11:19] (::1|)  => hello
[21/12/2015 - 19:11:19] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:11:19] (::1|)  => hello
[21/12/2015 - 19:11:19] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:11:20] (::1|)  => hello
[21/12/2015 - 19:11:20] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:11:20] (::1|)  => hello
[21/12/2015 - 19:11:20] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:11:20] (::1|)  => hello
[21/12/2015 - 19:11:20] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:11:20] (::1|)  => hello
[21/12/2015 - 19:11:20] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:12:2] (::1|)  => hello
[21/12/2015 - 19:12:2] (::1|)  => 
[21/12/2015 - 19:12:4] (::1|)  => hello
[21/12/2015 - 19:12:4] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:12:5] (::1|)  => hello
[21/12/2015 - 19:12:5] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:12:6] (::1|)  => hello
[21/12/2015 - 19:12:6] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:12:6] (::1|)  => hello
[21/12/2015 - 19:12:6] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:12:6] (::1|)  => hello
[21/12/2015 - 19:12:6] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:12:6] (::1|)  => hello
[21/12/2015 - 19:12:6] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:13:25] (::1|)  => hello
[21/12/2015 - 19:13:25] (::1|)  => 
[21/12/2015 - 19:13:27] (::1|)  => hello
[21/12/2015 - 19:13:27] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:13:28] (::1|)  => hello
[21/12/2015 - 19:13:28] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:13:29] (::1|)  => hello
[21/12/2015 - 19:13:29] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:13:29] (::1|)  => hello
[21/12/2015 - 19:13:29] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:13:29] (::1|)  => hello
[21/12/2015 - 19:13:29] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:13:29] (::1|)  => hello
[21/12/2015 - 19:13:29] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:14:27] (::1|)  => hello
[21/12/2015 - 19:14:27] (::1|)  => 
[21/12/2015 - 19:14:30] (::1|)  => hello
[21/12/2015 - 19:14:30] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:14:30] (::1|)  => hello
[21/12/2015 - 19:14:30] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:14:31] (::1|)  => hello
[21/12/2015 - 19:14:31] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:14:31] (::1|)  => hello
[21/12/2015 - 19:14:31] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:14:31] (::1|)  => hello
[21/12/2015 - 19:14:31] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:14:31] (::1|)  => hello
[21/12/2015 - 19:14:31] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:15:9] (::1|)  => hello
[21/12/2015 - 19:15:9] (::1|)  => 
[21/12/2015 - 19:15:11] (::1|)  => hello
[21/12/2015 - 19:15:11] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:15:12] (::1|)  => hello
[21/12/2015 - 19:15:12] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:15:13] (::1|)  => hello
[21/12/2015 - 19:15:13] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:15:13] (::1|)  => hello
[21/12/2015 - 19:15:13] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:15:13] (::1|)  => hello
[21/12/2015 - 19:15:13] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:15:13] (::1|)  => hello
[21/12/2015 - 19:15:13] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:23:23] (::1|)  => hello
[21/12/2015 - 19:23:23] (::1|)  => 
[21/12/2015 - 19:23:25] (::1|)  => hello
[21/12/2015 - 19:23:25] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:23:26] (::1|)  => hello
[21/12/2015 - 19:23:26] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:23:27] (::1|)  => hello
[21/12/2015 - 19:23:27] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:23:27] (::1|)  => hello
[21/12/2015 - 19:23:27] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:23:27] (::1|)  => hello
[21/12/2015 - 19:23:27] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:23:27] (::1|)  => hello
[21/12/2015 - 19:23:27] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:24:7] (::1|)  => hello
[21/12/2015 - 19:24:7] (::1|)  => 
[21/12/2015 - 19:24:10] (::1|)  => hello
[21/12/2015 - 19:24:10] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:24:10] (::1|)  => hello
[21/12/2015 - 19:24:10] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:24:11] (::1|)  => hello
[21/12/2015 - 19:24:11] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:24:11] (::1|)  => hello
[21/12/2015 - 19:24:11] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:24:11] (::1|)  => hello
[21/12/2015 - 19:24:11] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:24:11] (::1|)  => hello
[21/12/2015 - 19:24:11] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:26:3] (::1|)  => hello
[21/12/2015 - 19:26:3] (::1|)  => 
[21/12/2015 - 19:26:6] (::1|)  => hello
[21/12/2015 - 19:26:6] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:26:6] (::1|)  => hello
[21/12/2015 - 19:26:6] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:26:7] (::1|)  => hello
[21/12/2015 - 19:26:7] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:26:7] (::1|)  => hello
[21/12/2015 - 19:26:7] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:26:7] (::1|)  => hello
[21/12/2015 - 19:26:7] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:26:7] (::1|)  => hello
[21/12/2015 - 19:26:7] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:27:14] (::1|)  => hello
[21/12/2015 - 19:27:14] (::1|)  => 
[21/12/2015 - 19:27:17] (::1|)  => hello
[21/12/2015 - 19:27:17] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:27:18] (::1|)  => hello
[21/12/2015 - 19:27:18] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:27:18] (::1|)  => hello
[21/12/2015 - 19:27:18] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:27:18] (::1|)  => hello
[21/12/2015 - 19:27:19] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:27:19] (::1|)  => hello
[21/12/2015 - 19:27:19] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:27:19] (::1|)  => hello
[21/12/2015 - 19:27:19] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:29:40] (::1|)  => hello
[21/12/2015 - 19:29:40] (::1|)  => 
[21/12/2015 - 19:29:43] (::1|)  => hello
[21/12/2015 - 19:29:43] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:29:43] (::1|)  => hello
[21/12/2015 - 19:29:43] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:29:44] (::1|)  => hello
[21/12/2015 - 19:29:44] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:29:44] (::1|)  => hello
[21/12/2015 - 19:29:44] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:29:44] (::1|)  => hello
[21/12/2015 - 19:29:44] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:29:44] (::1|)  => hello
[21/12/2015 - 19:29:44] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:31:30] (::1|)  => hello
[21/12/2015 - 19:31:30] (::1|)  => 
[21/12/2015 - 19:31:32] (::1|)  => hello
[21/12/2015 - 19:31:32] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:31:33] (::1|)  => hello
[21/12/2015 - 19:31:33] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:31:34] (::1|)  => hello
[21/12/2015 - 19:31:34] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:31:34] (::1|)  => hello
[21/12/2015 - 19:31:34] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:31:34] (::1|)  => hello
[21/12/2015 - 19:31:34] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:31:34] (::1|)  => hello
[21/12/2015 - 19:31:34] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:32:16] (::1|)  => hello
[21/12/2015 - 19:32:16] (::1|)  => 
[21/12/2015 - 19:32:18] (::1|)  => hello
[21/12/2015 - 19:32:18] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:32:19] (::1|)  => hello
[21/12/2015 - 19:32:19] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:32:20] (::1|)  => hello
[21/12/2015 - 19:32:20] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:32:20] (::1|)  => hello
[21/12/2015 - 19:32:20] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:32:20] (::1|)  => hello
[21/12/2015 - 19:32:20] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:32:20] (::1|)  => hello
[21/12/2015 - 19:32:20] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:33:33] (::1|)  => hello
[21/12/2015 - 19:33:33] (::1|)  => 
[21/12/2015 - 19:33:36] (::1|)  => hello
[21/12/2015 - 19:33:36] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:33:37] (::1|)  => hello
[21/12/2015 - 19:33:37] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:33:38] (::1|)  => hello
[21/12/2015 - 19:33:38] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:33:38] (::1|)  => hello
[21/12/2015 - 19:33:38] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:33:38] (::1|)  => hello
[21/12/2015 - 19:33:38] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:33:38] (::1|)  => hello
[21/12/2015 - 19:33:38] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:38:39] (::1|)  => hello
[21/12/2015 - 19:38:39] (::1|)  => 
[21/12/2015 - 19:38:41] (::1|)  => hello
[21/12/2015 - 19:38:41] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:38:42] (::1|)  => hello
[21/12/2015 - 19:38:42] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:38:43] (::1|)  => hello
[21/12/2015 - 19:38:43] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:38:43] (::1|)  => hello
[21/12/2015 - 19:38:43] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:38:43] (::1|)  => hello
[21/12/2015 - 19:38:43] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:38:43] (::1|)  => hello
[21/12/2015 - 19:38:43] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:39:21] (::1|)  => hello
[21/12/2015 - 19:39:21] (::1|)  => 
[21/12/2015 - 19:39:24] (::1|)  => hello
[21/12/2015 - 19:39:24] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:39:25] (::1|)  => hello
[21/12/2015 - 19:39:25] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:39:26] (::1|)  => hello
[21/12/2015 - 19:39:26] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:39:26] (::1|)  => hello
[21/12/2015 - 19:39:26] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:39:26] (::1|)  => hello
[21/12/2015 - 19:39:26] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:39:26] (::1|)  => hello
[21/12/2015 - 19:39:26] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:39:41] (::1|)  => hello
[21/12/2015 - 19:39:41] (::1|)  => Name : pipeline-test
Desc : test de pipeline
Last Modified : 12/21/15 2:08 PM
Inputs : 
	CORPUS: DIR( format : none ; schema : none)
Outputs : 
	VOID: FILE*( format : none ; schema : none)


Name : corenlp-server
Desc : stanford core nlp server mode test
Last Modified : 12/21/15 2:07 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	OUT: FILE( format : none ; schema : none)


Name : pipeline-test2
Desc : test de pipeline
Last Modified : 12/21/15 2:08 PM
Inputs : 
	CORPUS: DIR( format : none ; schema : none)
Outputs : 
	VOID: VAL( format : none ; schema : none)


Name : stanford-core-nlp
Desc : The default stanford core nlp pipeline
Last Modified : 12/21/15 2:23 PM
Inputs : 
	IN: FILE( format : none ; schema : none)// File to be annotated
Outputs : 
	RAW_OUT: FILE( format : xml ; schema : none)
	BRAT_ANN: FILE( format : txt ; schema : brat_ann)


Name : brat_propagate
Desc : 
Last Modified : 12/21/15 2:07 PM
Inputs : 
	SEED: FILE( format : none ; schema : brat_annotation)
	CORPUS: DIR( format : none ; schema : text)
Outputs : 
	CORPUS_MODIFIED: DIR( format : none ; schema : text)


Name : bonsai-parser@munshi
Desc : bonsai parse of xml files into passage format made by Munshi Asadullah
Last Modified : 12/21/15 2:07 PM
Inputs : 
	IN_DIR: DIR( format : xml ; schema : html)// directory containing html files to be parsed
Outputs : 
	OUT_DIR: DIR( format : xml ; schema : passage)// directory containing the output of the parsed file files keep the same name as the original file



Name : stanford-parser
Desc : The stanford parser
Last Modified : 12/21/15 2:08 PM
Inputs : 
	IN: FILE( format : none ; schema : none)// File to be annotated
Outputs : 
	OUT: FILE( format : unknown ; schema : none)
	CONLL: FILE( format : text ; schema : conll)


Name : pipeline-test0
Desc : test de pipeline
Last Modified : 12/21/15 2:08 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	VOID: VAL( format : none ; schema : none)


Name : tweetparse@jose
Desc : crawl some tweets
Last Modified : 12/21/15 2:08 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	OUT: FILE( format : none ; schema : none)


Name : foo
Desc : foo module for testing purposes
Last Modified : 12/21/15 2:07 PM
Inputs : 
	IN: FILE( format : none ; schema : none)
Outputs : 
	OUT: FILE*( format : none ; schema : none)



[21/12/2015 - 19:39:49] (::1|)  => hello
[21/12/2015 - 19:39:49] (::1|)  => 
[21/12/2015 - 19:39:54] (::1|)  => hello
[21/12/2015 - 19:39:54] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:46:53] (::1|)  => hello
[21/12/2015 - 19:46:53] (::1|)  => 
[21/12/2015 - 19:46:56] (::1|)  => hello
[21/12/2015 - 19:46:56] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:46:57] (::1|)  => hello
[21/12/2015 - 19:46:57] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:46:58] (::1|)  => hello
[21/12/2015 - 19:46:58] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:46:58] (::1|)  => hello
[21/12/2015 - 19:46:58] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:46:58] (::1|)  => hello
[21/12/2015 - 19:46:58] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:46:58] (::1|)  => hello
[21/12/2015 - 19:46:58] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:48:24] (::1|)  => hello
[21/12/2015 - 19:48:24] (::1|)  => {"creationdate":"2015-12-21T16:07:19.535","def":"/vagrant/modules/examples/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/examples\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535\""},"CORPUS":{"type":"VAL","value":"\"/data/corpus//testcorpus\""}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535\""},"CORPUS":{"type":"VAL","value":"\"/data/corpus//testcorpus\""},"VOID":{"type":"FILE*","value":["Error reading val value (should be a string)","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/stanford-parser/meaning_of_life.xml","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/stanford-parser/humanism.xml","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/stanford-parser/meaning_of_life_full.xml"]}},"ruid":"dfd3e565-988c-4e5e-bcfc-b70d718e0535","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/stanford-parser/meaning_of_life.xml","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/stanford-parser/humanism.xml","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/stanford-parser/meaning_of_life_full.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":"\"\""},"_MAP.stanford-parser.CONLL":{"type":"FILE*","value":["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/stanford-parser/meaning_of_life.conll","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/stanford-parser/meaning_of_life_full.conll","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/stanford-parser/humanism.conll"]},"_CUR_MOD":{"type":"VAL","value":"\"pipeline-test\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_MAP.foo.OUT":{"type":"FILE**","value":[["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/foo/foo1","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/foo/foo2","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/foo/foo3"],["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/foo/foo1","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/foo/foo2","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/foo/foo3"],["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/foo/foo1","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/foo/foo2","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null,null]},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535/\""},"_CMD#merge.STDERR":{"type":"VAL","value":"\"\\\"\\\"\""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null,null]},"CORPUS":{"type":"DIR","value":"\"/data/corpus//testcorpus\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"pipeline-test\""}},"processport":"24411","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 19:48:29] (::1|)  => hello
[21/12/2015 - 19:48:29] (::1|)  => {"creationdate":"2015-12-21T14:16:29.438","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547\\\"\""}},"ruid":"6c0c7c24-e9a0-4d42-bb9b-542cc7029547","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.8 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:16:45 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:16:48 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [0.8 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.1 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.9 sec. ParserAnnotator: 4.3 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.6 sec. for 132 tokens at 23.5 tokens/sec. Pipeline setup: 22.4 sec. Total time for StanfordCoreNLP pipeline: 28.3 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-6c0c7c24-e9a0-4d42-bb9b-542cc7029547/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"20519","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 19:48:39] (::1|)  => hello
[21/12/2015 - 19:48:39] (::1|)  => 
[21/12/2015 - 19:48:42] (::1|)  => hello
[21/12/2015 - 19:48:42] (::1|)  => public/js/vendor/underscore-min.map
[21/12/2015 - 19:48:43] (::1|)  => hello
[21/12/2015 - 19:48:43] (::1|)  => public/js/vendor/backbone-min.map
[21/12/2015 - 19:48:44] (::1|)  => hello
[21/12/2015 - 19:48:44] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:48:44] (::1|)  => hello
[21/12/2015 - 19:48:44] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:48:44] (::1|)  => hello
[21/12/2015 - 19:48:44] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[21/12/2015 - 19:48:44] (::1|)  => hello
[21/12/2015 - 19:48:44] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:48:46] (::1|)  => hello
[21/12/2015 - 19:48:46] (::1|)  => Error :can't parse serialized environnment ()
[21/12/2015 - 19:48:48] (::1|)  => hello
[21/12/2015 - 19:48:48] (::1|)  => {"creationdate":"2015-12-21T14:24:07.670","def":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module","runconf":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/custom/jose_moreno\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a\""}},"parentEnv":{"IN":{"type":"VAL","value":"\"/data/corpus//testcorpus/humanism.txt\""},"BRAT_ANN":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a//humanism.txt.ann\""},"RAW_OUT":{"type":"FILE","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a//humanism.txt.xml\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_RUN_DIR":{"type":"DIR","value":"\"\\\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a\\\"\""}},"ruid":"0f8f1662-688e-4de3-96ea-03330e4cc77a","parentProcess":"None","env":{"_CMD.STDOUT":{"type":"VAL","value":"\"\""},"_CMD#toBrat.STDERR":{"type":"VAL","value":"\"\""},"IN":{"type":"FILE","value":"\"/data/corpus//testcorpus/humanism.txt\""},"_CUR_MOD":{"type":"VAL","value":"\"stanford-core-nlp\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/custom/jose_moreno\""},"_CMD.STDERR":{"type":"VAL","value":"\"[main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator tokenize [main] INFO edu.stanford.nlp.pipeline.TokenizerAnnotator - TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ssplit [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [1.5 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator lemma [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator ner Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [5.7 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.5 sec]. Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec]. [main] INFO edu.stanford.nlp.time.JollyDayHolidays - Initializing JollyDayHoliday for SUTime from classpath edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml as sutime.binder.1. Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt Dec 21, 2015 2:24:24 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 83 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt Dec 21, 2015 2:24:24 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 267 rules Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt Dec 21, 2015 2:24:24 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules INFO: Read 25 rules [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator parse [main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...  done [2.6 sec]. [main] INFO edu.stanford.nlp.pipeline.StanfordCoreNLP - Adding annotator dcoref Processing file /data/corpus/testcorpus/humanism.txt ... writing to /data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a/humanism.txt.xml Annotating file /data/corpus/testcorpus/humanism.txt done. Annotation pipeline timing information: TokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.0 sec. MorphaAnnotator: 0.1 sec. NERCombinerAnnotator: 0.6 sec. ParserAnnotator: 4.5 sec. DeterministicCorefAnnotator: 0.2 sec. TOTAL: 5.5 sec. for 132 tokens at 24.2 tokens/sec. Pipeline setup: 21.1 sec. Total time for StanfordCoreNLP pipeline: 26.7 sec.\""},"_CMD#toBrat.STDOUT":{"type":"VAL","value":"\"\\\"\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/stanford-core-nlp/run-0f8f1662-688e-4de3-96ea-03330e4cc77a/\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"stanford-core-nlp\""}},"processport":"56343","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"stanford-core-nlp","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 19:48:49] (::1|)  => hello
[21/12/2015 - 19:48:49] (::1|)  => {"creationdate":"2015-12-21T16:07:19.535","def":"/vagrant/modules/examples/pipeline-test.module","runconf":{"_DEF_DIR":{"type":"DIR","value":"\"\\\"/vagrant/modules/examples\\\"\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535\""},"CORPUS":{"type":"VAL","value":"\"/data/corpus//testcorpus\""}},"parentEnv":{"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535\""},"CORPUS":{"type":"VAL","value":"\"/data/corpus//testcorpus\""},"VOID":{"type":"FILE*","value":["Error reading val value (should be a string)","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/stanford-parser/meaning_of_life.xml","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/stanford-parser/humanism.xml","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/stanford-parser/meaning_of_life_full.xml"]}},"ruid":"dfd3e565-988c-4e5e-bcfc-b70d718e0535","parentProcess":"None","env":{"_MAP.stanford-parser.OUT":{"type":"FILE*","value":["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/stanford-parser/meaning_of_life.xml","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/stanford-parser/humanism.xml","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/stanford-parser/meaning_of_life_full.xml"]},"_CMD#merge.STDOUT":{"type":"VAL","value":"\"\""},"_MAP.stanford-parser.CONLL":{"type":"FILE*","value":["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/stanford-parser/meaning_of_life.conll","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/stanford-parser/meaning_of_life_full.conll","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/stanford-parser/humanism.conll"]},"_CUR_MOD":{"type":"VAL","value":"\"pipeline-test\""},"_DEF_DIR":{"type":"DIR","value":"\"/vagrant/modules/examples\""},"_MAP.foo.OUT":{"type":"FILE**","value":[["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/foo/foo1","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/foo/foo2","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.2/foo/foo3"],["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/foo/foo1","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/foo/foo2","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.0/foo/foo3"],["/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/foo/foo1","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/foo/foo2","/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535//_MAP/_MAP.1/foo/foo3"]]},"_MAP._CMD#test.STDERR":{"type":"VAL*","value":[null,null,null]},"_RUN_DIR":{"type":"DIR","value":"\"/data/results/pipeline-test/run-dfd3e565-988c-4e5e-bcfc-b70d718e0535/\""},"_CMD#merge.STDERR":{"type":"VAL","value":"\"\\\"\\\"\""},"_MAP._CMD#test.STDOUT":{"type":"VAL*","value":[null,null,null]},"CORPUS":{"type":"DIR","value":"\"/data/corpus//testcorpus\""},"_MOD_CONTEXT":{"type":"VAL","value":"\"pipeline-test\""}},"processport":"24340","master":true,"modvalconf":"''\n","modvalnamespace":"","children":"","name":"pipeline-test","parentport":"NONE","completeddate":"","status":"Exited(0)"}
[21/12/2015 - 19:49:30] (::1|)  => hello
[21/12/2015 - 19:49:30] (::1|)  => 
[21/12/2015 - 19:49:31] (::1|)  => hello
[21/12/2015 - 19:49:31] (::1|)  => {"result_dir":"/data/results","corpus_dir":"/data/corpus","modules":[{"exist":false,"name":"/home/paul/projects/custom/cpm/examples/modules"},{"exist":false,"name":"/home/paul/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/modules"},{"exist":false,"name":"/people/buiquang/projects/custom/cpm/examples/modules"},{"exist":true,"name":"/vagrant/modules"},{"exist":false,"name":"/vagrant/examples/modules"}]}
[21/12/2015 - 19:49:31] (::1|)  => hello
[21/12/2015 - 19:49:31] (::1|)  => {"folder":true,"foldername":"/","items":[{"folder":true,"foldername":"/vagrant","items":[{"folder":true,"foldername":"modules","items":[{"folder":true,"foldername":"examples","items":[{"folder":true,"foldername":"tweetparse@jose","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/tweets.json"}},"input":{"IN":{"type":"FILE"}},"name":"tweetparse@jose","exec":[{"_CMD":{"input":{"DOCKERFILE":"$_DEF_DIR/Dockerfile","CONTAINED":"false","CMD":"python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json"}}}],"desc":"crawl some tweets"},"modulename":"tweetparse@jose","source":"\nname : tweetparse@jose\n\ndesc : >\n  crawl some tweets\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  OUT : \n    type : FILE\n    value : $_RUN_DIR/tweets.json\n\n\nexec :\n  - _CMD :\n      input :\n        DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : >\n          python $_DEF_DIR/twitter-crawler_copy/getTwitterIds.py $IN > $_RUN_DIR/tweets.json\n    ","sourcepath":"/vagrant/modules/examples/tweetparse@jose/tweetparse@jose.module"}]},{"folder":true,"foldername":"brat_propagate","items":[{"module":{"output":{"CORPUS_MODIFIED":{"schema":"text","type":"DIR","value":"$CORPUS"}},"input":{"SEED":{"schema":"brat_annotation","type":"FILE"},"CORPUS":{"schema":"text","type":"DIR"}},"name":"brat_propagate","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"perl propagation.pl -r $CORPUS -s $SEED"}}}]},"modulename":"brat_propagate","source":"\nname : brat_propagate\n\ndesc : >\n  # CONCEPT ANNOTATION PROPAGATION for BRAT RAPID ANNOTATION TOOL\n  #\n  # From existing annotations of concepts saved in BRAT stand-off\n  # annotation files (*.ann), this script searches for similar concepts\n  # to be annotated in the remaining part of the corpus to process and\n  # produces annotation files combining existing annotations (e.g., in\n  # case of automatic pre-annotation) with annotations found during the\n  # propagation process. Using this script supposes to process corpus\n  # files in the logic order of the files within a directory...\n  #\n  # Warning! Files from BRAT (*.txt and *.ann) must be encoded in UTF-8\n  #\n  # perl propagation.pl -r <directory containing files> -s <starting file name>\n\ninput :\n  SEED :\n    type : FILE\n    schema : brat_annotation\n  CORPUS :\n    type : DIR\n    schema : text\n\noutput :\n  CORPUS_MODIFIED :\n    type : DIR\n    schema : text\n    value : $CORPUS\n\n# here this module modify its input so we should make a copy before\n\nexec : \n  - _CMD :\n      input :\n        CMD : perl propagation.pl -r $CORPUS -s $SEED","sourcepath":"/vagrant/modules/examples/brat_propagate/brat_propagate.module"}]},{"module":{"output":{"VOID":{"type":"VAL","value":"${_MAP.corenlp-server.OUT}"}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test2","exec":[{"_MAP":{"input":{"REGEX":".*","IN":"$CORPUS","RUN":[{"corenlp-server":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"10"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test2","source":"\nname : pipeline-test2\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : VAL\n    value : ${_MAP.corenlp-server.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        RUN :\n          - corenlp-server :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : echo '${corenlp-server.OUT:basename}' > $_RUN_DIR/${corenlp-server.OUT:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.corenlp-server.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test2.module"},{"module":{"output":{"OUT":{"type":"FILE*","value":["$_RUN_DIR/foo1","$_RUN_DIR/foo2","$_RUN_DIR/foo3"]}},"input":{"IN":{"type":"FILE"}},"name":"foo","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;"}}}],"desc":"foo module for testing purposes"},"modulename":"foo","source":"\nname : foo\n\ndesc : foo module for testing purposes\n\ninput : \n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE*\n    value : $_RUN_DIR/foo1 $_RUN_DIR/foo2 $_RUN_DIR/foo3\n\nexec :\n  - _CMD :\n      input : \n        CMD : echo \"foo1\" > $_RUN_DIR/foo1; echo \"foo2\" > $_RUN_DIR/foo2; echo \"foo3\" > $_RUN_DIR/foo3;","sourcepath":"/vagrant/modules/examples/foo.module"},{"folder":true,"foldername":"parsing","items":[{"module":{"output":{"CONLL":{"schema":"conll","format":"text","type":"FILE","value":"$_RUN_DIR/${IN:basename}.conll"},"OUT":{"format":"unknown","type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-parser","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml"}}},{"_CMD#2conll":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll"}}}],"desc":"The stanford parser"},"modulename":"stanford-parser","source":"\n# The name of the module\n# Mandatory and must be unique\nname : stanford-parser\n\n# Brief description of the module\n# Optional\ndesc : \"The stanford parser\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  OUT :\n    type : FILE\n    format : \"unknown\"\n    value : $_RUN_DIR/${IN:basename}.xml\n  CONLL :\n    type : FILE\n    format : \"text\"\n    schema : \"conll\"\n    value : $_RUN_DIR/${IN:basename}.conll\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        CMD : > \n          $_DEF_DIR/stanford-parser-full-2015-04-20/lexparser.sh $IN > $_RUN_DIR/${IN:basename}.xml\n  - \"_CMD#2conll\" :\n      input : \n        CMD : > \n          $_DEF_DIR/StfdParse2Conll.sh $_RUN_DIR/${IN:basename}.xml > $_RUN_DIR/${IN:basename}.conll\n","sourcepath":"/vagrant/modules/examples/parsing/stanford-parser.module"}]},{"folder":true,"foldername":"corenlp-server","items":[{"module":{"output":{"OUT":{"type":"FILE","value":"$_RUN_DIR/${IN:basename}.xml"}},"input":{"IN":{"type":"FILE"}},"name":"corenlp-server","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml"}}}],"desc":"stanford core nlp server mode test"},"modulename":"corenlp-server","source":"\nname : corenlp-server\n\ndesc : stanford core nlp server mode test\n\n\ninput :\n  IN :\n    type : FILE\n\noutput :\n  OUT :\n    type : FILE\n    value : $_RUN_DIR/${IN:basename}.xml\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : >\n          python $_DEF_DIR/src/main/python/client.py $IN > $_RUN_DIR/${IN:basename}.xml\n\n","sourcepath":"/vagrant/modules/examples/corenlp-server/corenlp-server.module"}]},{"module":{"output":{"VOID":{"type":"FILE*","value":["${_MAP.stanford-parser.OUT}"]}},"input":{"CORPUS":{"type":"DIR"}},"name":"pipeline-test","exec":[{"_MAP":{"input":{"REGEX":".*?\\.txt","IN":"$CORPUS","RUN":[{"stanford-parser":{"input":{"IN":"$_"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt"}}},{"foo":{"input":{"IN":"$_"}}}],"CHUNK_SIZE":"20"}}},{"_CMD#merge":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test","source":"\nname : pipeline-test\n\ndesc : >\n  test de pipeline\n\ninput :\n  CORPUS : \n    type : DIR\n\noutput :\n  VOID : \n    type : FILE*\n    value : ${_MAP.stanford-parser.OUT}\n\n\nexec :\n  - _MAP :\n      input :\n        IN : $CORPUS\n        REGEX : .*?\\.txt\n        CHUNK_SIZE : 20\n        RUN :\n          - stanford-parser :\n              input :\n                IN : $_\n          - \"_CMD#test\" :\n              input :\n                CMD : $_DEF_DIR/foo.sh ${_:basename} $_RUN_DIR/${_:basename}.txt\n          - foo :\n              input :\n                IN : $_\n  - \"_CMD#merge\" :\n      input :\n        CMD : cat ${_MAP.stanford-parser.OUT} > $_RUN_DIR/merged.xml","sourcepath":"/vagrant/modules/examples/pipeline-test.module"},{"module":{"output":{"VOID":{"type":"VAL","value":"ok"}},"input":{"IN":{"type":"FILE"}},"name":"pipeline-test0","exec":[{"stanford-parser":{"input":{"IN":"$IN"}}},{"_CMD#test":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt"}}}],"desc":"test de pipeline"},"modulename":"pipeline-test0","source":"\nname : pipeline-test0\n\ndesc : >\n  test de pipeline\n\ninput :\n  IN : \n    type : FILE\n\noutput :\n  VOID : \n    type : VAL\n    value : ok\n\n\nexec :\n  - stanford-parser :\n      input :\n        IN : $IN\n  - \"_CMD#test\" :\n      input :\n        CMD : dd echo '${stanford-parser.OUT:basename}' > $_RUN_DIR/test.txt\n    ","sourcepath":"/vagrant/modules/examples/pipeline-test0.module"}]},{"folder":true,"foldername":"custom","items":[{"folder":true,"foldername":"jose_moreno","items":[{"module":{"output":{"BRAT_ANN":{"schema":"brat_ann","format":"txt","type":"FILE","value":"$_RUN_DIR/${IN:filename}.ann"},"RAW_OUT":{"format":"xml","type":"FILE","value":"$_RUN_DIR/${IN:filename}.xml"}},"input":{"IN":{"type":"FILE","desc":"File to be annotated"}},"name":"stanford-core-nlp","exec":[{"_CMD":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"$_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN"}}},{"_CMD#toBrat":{"input":{"DOCKERFILE":"false","CONTAINED":"false","CMD":"cp $IN $_RUN_DIR/${IN:filename};   python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml"}}}],"desc":"The default stanford core nlp pipeline"},"modulename":"stanford-core-nlp","source":"\nname : stanford-core-nlp\n\ndesc : \"The default stanford core nlp pipeline\"\n\n# Inputs\ninput :\n  IN :\n    type : FILE\n    desc : \"File to be annotated\"\n  #OUT_DIR :\n    #type : DIR\n    #value : $_RUN_DIR\n# Outputs\noutput :\n  RAW_OUT :\n    type : FILE\n    format : \"xml\"\n    value : $_RUN_DIR/${IN:filename}.xml\n  BRAT_ANN :\n    type : FILE\n    format : \"txt\"\n    schema : \"brat_ann\"\n    value : $_RUN_DIR/${IN:filename}.ann\n\n\n# Logging\nlog : \n  default : \"/tmp/parserlog\"\n\n# The command to run the module/pipeline\n# Required\nexec : \n  - _CMD :\n      input : \n        #DOCKERFILE : $_DEF_DIR/Dockerfile\n        CMD : > \n          $_DEF_DIR/jdk1.8.0_51/bin/java -cp '$_DEF_DIR/stanford-corenlp-full-2015-12-09/*' -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -outputExtension .xml -outputDirectory $_RUN_DIR -file $IN\n  - \"_CMD#toBrat\" :\n      input :\n        CMD : >\n          cp $IN $_RUN_DIR/${IN:filename};\t\n          python $_DEF_DIR/xmlCoreNLP_to_brat.py $_RUN_DIR/${IN:filename}.xml","sourcepath":"/vagrant/modules/custom/jose_moreno/stanford-core-nlp.module"}]}]},{"folder":true,"foldername":"addons","items":[{"folder":true,"foldername":"bonsai_parser","items":[{"module":{"output":{"OUT_DIR":{"schema":"passage","format":"xml","type":"DIR","value":"$_RUN_DIR","desc":"directory containing the output of the parsed file files keep the same name as the original file"}},"input":{"IN_DIR":{"schema":"html","format":"xml","type":"DIR","desc":"directory containing html files to be parsed"}},"name":"bonsai-parser@munshi","exec":[{"_CMD":{"input":{"DOCKERFILE":"true","CONTAINED":"false","CMD":"/home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR"}}}],"desc":"bonsai parse of xml files into passage format made by Munshi Asadullah"},"modulename":"bonsai-parser@munshi","source":"\nname : bonsai-parser@munshi\n\ndesc : >\n  bonsai parse of xml files into passage format made by Munshi Asadullah \n\ninput :\n  IN_DIR :\n    type : DIR\n    format : xml\n    schema : html\n    desc : directory containing html files to be parsed\n\noutput :\n  OUT_DIR :\n    type : DIR\n    format : xml\n    schema : passage\n    desc : >\n      directory containing the output of the parsed file\n      files keep the same name as the original file\n    value : $_RUN_DIR\n\nexec :\n  - _CMD :\n      input : \n        DOCKERFILE : true\n        CMD : /home/app/bin/parse_all.sh $IN_DIR $_RUN_DIR","sourcepath":"/vagrant/modules/addons/bonsai_parser/bonsai-parser@munshi.module"}]}]}]}]}]}
[21/12/2015 - 19:49:31] (::1|)  => hello
[21/12/2015 - 19:49:31] (::1|)  => pipeline-test : 8089e10d-3fbe-4d66-9b54-585cde53d258
foo : 390b08e9-6a74-45a6-a7a6-9603f27c9301
stanford-parser : 69c996e0-1d42-417d-a7aa-7cd2e5db6f61
stanford-core-nlp : 6c0c7c24-e9a0-4d42-bb9b-542cc7029547
stanford-core-nlp : 0f8f1662-688e-4de3-96ea-03330e4cc77a
pipeline-test : dfd3e565-988c-4e5e-bcfc-b70d718e0535
pipeline-test : 0174e913-e06e-42fa-8244-1705d7cee6bc

[21/12/2015 - 19:49:31] (::1|)  => hello
[21/12/2015 - 19:49:31] (::1|)  => {"corpus":[{"testcorpus":["meaning_of_life_full.txt","meaning_of_life.txt","humanism.txt"]}]}
[25/12/2015 - 18:22:53] (::1|)  => hello
[25/12/2015 - 18:22:53] (::1|)  => 
[25/12/2015 - 18:23:5] (::1|)  => hello
[25/12/2015 - 18:23:25] (::1|)  => timeout
[25/12/2015 - 18:23:25] (::1|)  => hello
[25/12/2015 - 18:23:45] (::1|)  => timeout
[25/12/2015 - 18:23:45] (::1|)  => hello
[25/12/2015 - 18:24:5] (::1|)  => timeout
[25/12/2015 - 18:24:5] (::1|)  => hello
[25/12/2015 - 18:24:25] (::1|)  => timeout
[27/12/2015 - 23:14:38] (::1|)  => hello
[27/12/2015 - 23:14:38] (::1|)  => 
[27/12/2015 - 23:14:46] (::1|)  => hello
[27/12/2015 - 23:15:6] (::1|)  => timeout
[27/12/2015 - 23:15:6] (::1|)  => hello
[27/12/2015 - 23:15:26] (::1|)  => timeout
[27/12/2015 - 23:15:26] (::1|)  => hello
[27/12/2015 - 23:15:46] (::1|)  => timeout
[27/12/2015 - 23:15:46] (::1|)  => hello
[27/12/2015 - 23:16:6] (::1|)  => timeout
[28/12/2015 - 0:29:44] (::1|)  => hello
[28/12/2015 - 0:29:44] (::1|)  => 
[28/12/2015 - 0:29:54] (::1|)  => hello
[28/12/2015 - 0:30:14] (::1|)  => timeout
[28/12/2015 - 0:30:14] (::1|)  => hello
[28/12/2015 - 0:30:34] (::1|)  => timeout
[28/12/2015 - 0:30:34] (::1|)  => hello
[28/12/2015 - 0:30:54] (::1|)  => timeout
[28/12/2015 - 0:30:54] (::1|)  => hello
[28/12/2015 - 0:31:14] (::1|)  => timeout
[28/12/2015 - 13:55:15] (::1|)  => hello
[28/12/2015 - 13:55:16] (::1|)  => 
[28/12/2015 - 13:55:21] (::1|)  => hello
[28/12/2015 - 13:55:41] (::1|)  => timeout
[28/12/2015 - 13:55:41] (::1|)  => hello
[28/12/2015 - 13:56:1] (::1|)  => timeout
[28/12/2015 - 13:56:1] (::1|)  => hello
[28/12/2015 - 13:56:21] (::1|)  => timeout
[28/12/2015 - 13:56:21] (::1|)  => hello
[28/12/2015 - 13:56:41] (::1|)  => timeout
[28/12/2015 - 22:17:8] (::1|)  => hello
[28/12/2015 - 22:17:8] (::1|)  => 
[28/12/2015 - 22:17:16] (::1|)  => hello
[28/12/2015 - 22:17:36] (::1|)  => timeout
[28/12/2015 - 22:17:36] (::1|)  => hello
[28/12/2015 - 22:17:56] (::1|)  => timeout
[28/12/2015 - 22:17:56] (::1|)  => hello
[28/12/2015 - 22:18:16] (::1|)  => timeout
[28/12/2015 - 22:18:16] (::1|)  => hello
[28/12/2015 - 22:18:36] (::1|)  => timeout
[28/12/2015 - 23:8:13] (::1|)  => hello
[28/12/2015 - 23:8:13] (::1|)  => 
[28/12/2015 - 23:8:29] (::1|)  => hello
[28/12/2015 - 23:8:49] (::1|)  => timeout
[28/12/2015 - 23:8:49] (::1|)  => hello
[28/12/2015 - 23:9:9] (::1|)  => timeout
[28/12/2015 - 23:9:9] (::1|)  => hello
[28/12/2015 - 23:9:29] (::1|)  => timeout
[28/12/2015 - 23:9:29] (::1|)  => hello
[28/12/2015 - 23:9:49] (::1|)  => timeout
[29/12/2015 - 2:26:14] (::1|)  => hello
[29/12/2015 - 2:26:14] (::1|)  => public/js/vendor/underscore-min.map
[29/12/2015 - 2:26:14] (::1|)  => hello
[29/12/2015 - 2:26:14] (::1|)  => public/js/vendor/backbone-min.map
[29/12/2015 - 2:52:4] (::1|)  => hello[29/12/2015 - 2:52:4] (::1|)  => hello
[29/12/2015 - 2:52:4] (::1|)  => hello

[29/12/2015 - 2:52:5] (::1|)  => hello
[29/12/2015 - 2:52:25] (::1|)  => timeout
[29/12/2015 - 2:52:25] (::1|)  => timeout
[29/12/2015 - 2:52:25] (::1|)  => timeout[29/12/2015 - 2:52:25] (::1|)  => timeout

[12/1/2016 - 15:20:55] (::1|)  => hello
[12/1/2016 - 15:20:55] (::1|)  => 
[12/1/2016 - 15:20:57] (::1|)  => hello
[12/1/2016 - 15:21:17] (::1|)  => timeout
[12/1/2016 - 15:21:17] (::1|)  => hello
[12/1/2016 - 15:21:37] (::1|)  => timeout
[12/1/2016 - 15:21:37] (::1|)  => hello
[12/1/2016 - 15:21:57] (::1|)  => timeout
[12/1/2016 - 15:21:57] (::1|)  => hello
[12/1/2016 - 15:22:17] (::1|)  => timeout
[12/1/2016 - 15:27:5] (::1|)  => hello
[12/1/2016 - 15:27:5] (::1|)  => 
[12/1/2016 - 15:27:7] (::1|)  => hello
[12/1/2016 - 15:27:27] (::1|)  => timeout
[12/1/2016 - 15:27:27] (::1|)  => hello
[12/1/2016 - 15:27:47] (::1|)  => timeout
[12/1/2016 - 15:27:47] (::1|)  => hello
[12/1/2016 - 15:28:7] (::1|)  => timeout
[12/1/2016 - 15:28:7] (::1|)  => hello
[12/1/2016 - 15:28:27] (::1|)  => timeout
[12/1/2016 - 15:38:21] (::1|)  => hello
[12/1/2016 - 15:38:21] (::1|)  => public/js/vendor/underscore-min.map
[12/1/2016 - 15:38:21] (::1|)  => hello
[12/1/2016 - 15:38:21] (::1|)  => public/js/vendor/backbone-min.map
[12/1/2016 - 16:0:40] (::1|)  => hello
[12/1/2016 - 16:0:40] (::1|)  => 
[12/1/2016 - 16:0:41] (::1|)  => hello
[12/1/2016 - 16:1:1] (::1|)  => timeout
[12/1/2016 - 16:1:1] (::1|)  => hello
[12/1/2016 - 16:1:21] (::1|)  => timeout
[12/1/2016 - 16:1:21] (::1|)  => hello
[12/1/2016 - 16:1:41] (::1|)  => timeout
[12/1/2016 - 16:1:41] (::1|)  => hello
[12/1/2016 - 16:2:1] (::1|)  => timeout
